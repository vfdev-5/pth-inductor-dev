buf0: SchedulerNode(ComputedBuffer)
buf0.writes = [MemoryDep('buf0', c0, {c0: 2*s4})]
buf0.unmet_dependencies = []
buf0.met_dependencies = []
buf0.users = [NodeUser(node=SchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]
buf0.group.device = cpu
buf0.group.iteration = ((s4, 2), ())
buf0.sizes = ([s4, 2], [])
class buf0_loop_body:
    var_ranges = {z0: s4, z1: 2}
    index0 = z1
    index1 = z0
    index2 = s2/s4
    index3 = 2*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(2, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf0', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        mul = ops.mul(add, index_expr_1)
        constant_1 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_1)
        constant_2 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_2)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_2, torch.float32, src_dtype = torch.int64)
        constant_3 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(to_dtype_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_3, torch.float32)
        mul_1 = ops.mul(add_1, index_expr_3)
        constant_4 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_5)
        to_dtype_2 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
        to_dtype_3 = ops.to_dtype(to_dtype_2, torch.float32, src_dtype = torch.int64)
        sub_2 = ops.sub(maximum, to_dtype_3)
        constant_6 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_2, constant_6)
        constant_7 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum_2, constant_7)
        constant_8 = ops.constant(1.0, torch.float32)
        sub_3 = ops.sub(constant_8, minimum)
        return sub_3
    def masked_subblock2(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        mul = ops.mul(add, index_expr_1)
        constant_1 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_1)
        constant_2 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_2)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_2, torch.float32, src_dtype = torch.int64)
        constant_3 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(to_dtype_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_3, torch.float32)
        mul_1 = ops.mul(add_1, index_expr_3)
        constant_4 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_5)
        to_dtype_2 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
        to_dtype_3 = ops.to_dtype(to_dtype_2, torch.float32, src_dtype = torch.int64)
        sub_2 = ops.sub(maximum, to_dtype_3)
        constant_6 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_2, constant_6)
        constant_7 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum_2, constant_7)
        return minimum


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep('buf1', c0, {c0: 2*s5})]
buf1.unmet_dependencies = []
buf1.met_dependencies = []
buf1.users = [NodeUser(node=SchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]
buf1.group.device = cpu
buf1.group.iteration = ((s5, 2), ())
buf1.sizes = ([s5, 2], [])
class buf1_loop_body:
    var_ranges = {z0: s5, z1: 2}
    index0 = z1
    index1 = z0
    index2 = s3/s5
    index3 = 2*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(2, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf1', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        mul = ops.mul(add, index_expr_1)
        constant_1 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_1)
        constant_2 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_2)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_2, torch.float32, src_dtype = torch.int64)
        constant_3 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(to_dtype_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_3, torch.float32)
        mul_1 = ops.mul(add_1, index_expr_3)
        constant_4 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_5)
        to_dtype_2 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
        to_dtype_3 = ops.to_dtype(to_dtype_2, torch.float32, src_dtype = torch.int64)
        sub_2 = ops.sub(maximum, to_dtype_3)
        constant_6 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_2, constant_6)
        constant_7 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum_2, constant_7)
        constant_8 = ops.constant(1.0, torch.float32)
        sub_3 = ops.sub(constant_8, minimum)
        return sub_3
    def masked_subblock2(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        mul = ops.mul(add, index_expr_1)
        constant_1 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_1)
        constant_2 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_2)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_2, torch.float32, src_dtype = torch.int64)
        constant_3 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(to_dtype_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_3, torch.float32)
        mul_1 = ops.mul(add_1, index_expr_3)
        constant_4 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_5)
        to_dtype_2 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
        to_dtype_3 = ops.to_dtype(to_dtype_2, torch.float32, src_dtype = torch.int64)
        sub_2 = ops.sub(maximum, to_dtype_3)
        constant_6 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_2, constant_6)
        constant_7 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum_2, constant_7)
        return minimum


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep('buf2', c0, {c0: s0*s1*s4*s5})]
buf2.unmet_dependencies = 
    [   MemoryDep('buf0', 2*c1 + 1, {c0: s0*s1, c1: s4}),
        MemoryDep('buf0', 2*c1, {c0: s0*s1, c1: s4}),
        MemoryDep('buf1', 2*c1 + 1, {c0: s0*s1*s4, c1: s5}),
        MemoryDep('buf1', 2*c1, {c0: s0*s1*s4, c1: s5})]
buf2.met_dependencies = 
    [   MemoryDep('arg4_1', (tmp104) + (tmp89)*s3 + c0*s2*s3, {c0: s0*s1}),
        MemoryDep('arg4_1', (tmp126)*s3 + (tmp141) + c0*s2*s3, {c0: s0*s1}),
        MemoryDep('arg4_1', (tmp16)*s3 + (tmp31) + c0*s2*s3, {c0: s0*s1}),
        MemoryDep('arg4_1', (tmp52)*s3 + (tmp67) + c0*s2*s3, {c0: s0*s1})]
buf2.users = [NodeUser(node=SchedulerNode(name='buf3'), can_inplace=True, is_weak=False)]
buf2.group.device = cpu
buf2.group.iteration = ((s0*s1, s4, s5), ())
buf2.sizes = ([s0*s1, s4, s5], [])
class buf2_loop_body:
    var_ranges = {z0: s0*s1, z1: s4, z2: s5}
    index0 = 2*z1
    index1 = 2*z2
    index2 = z1
    index3 = s2/s4
    index4 = s2 - 1
    index5 = z2
    index6 = s3/s5
    index7 = s3 - 1
    index8 = indirect0*s3 + indirect1 + s2*s3*z0
    index9 = 2*z2 + 1
    index10 = indirect2*s3 + indirect3 + s2*s3*z0
    index11 = 2*z1 + 1
    index12 = indirect4*s3 + indirect5 + s2*s3*z0
    index13 = indirect6*s3 + indirect7 + s2*s3*z0
    index14 = s4*s5*z0 + s5*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.float32)
        mul = ops.mul(add, index_expr_1)
        constant_1 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_1)
        constant_2 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_2)
        to_dtype_1 = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
        constant_3 = ops.constant(0, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_3)
        get_index_4 = self.get_index('index4')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        minimum = ops.minimum(add_1, index_expr_2)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_5 = self.get_index('index5')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_3, torch.float32, src_dtype = torch.int64)
        constant_4 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(to_dtype_2, constant_4)
        get_index_6 = self.get_index('index6')
        index_expr_4 = ops.index_expr(get_index_6, torch.float32)
        mul_1 = ops.mul(add_2, index_expr_4)
        constant_5 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_5)
        constant_6 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_6)
        to_dtype_3 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(0, torch.int64)
        add_3 = ops.add(to_dtype_3, constant_7)
        get_index_7 = self.get_index('index7')
        index_expr_5 = ops.index_expr(get_index_7, torch.int64)
        minimum_1 = ops.minimum(add_3, index_expr_5)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_8 = self.get_index('index8')
        load_2 = ops.load('arg4_1', get_index_8)
        to_dtype_4 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.uint8)
        mul_2 = ops.mul(load_1, to_dtype_4)
        mul_3 = ops.mul(load, mul_2)
        get_index_9 = self.get_index('index0')
        load_3 = ops.load('buf0', get_index_9)
        get_index_10 = self.get_index('index9')
        load_4 = ops.load('buf1', get_index_10)
        get_index_11 = self.get_index('index2')
        index_expr_6 = ops.index_expr(get_index_11, torch.int64)
        to_dtype_5 = ops.to_dtype(index_expr_6, torch.float32, src_dtype = torch.int64)
        constant_8 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(to_dtype_5, constant_8)
        get_index_12 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_12, torch.float32)
        mul_4 = ops.mul(add_4, index_expr_7)
        constant_9 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_4, constant_9)
        constant_10 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_2, constant_10)
        to_dtype_6 = ops.to_dtype(maximum_2, torch.int64, src_dtype = torch.float32)
        constant_11 = ops.constant(0, torch.int64)
        add_5 = ops.add(to_dtype_6, constant_11)
        get_index_13 = self.get_index('index4')
        index_expr_8 = ops.index_expr(get_index_13, torch.int64)
        minimum_2 = ops.minimum(add_5, index_expr_8)
        set_indirect2 = self.set_indirect2(minimum_2)
        get_index_14 = self.get_index('index5')
        index_expr_9 = ops.index_expr(get_index_14, torch.int64)
        to_dtype_7 = ops.to_dtype(index_expr_9, torch.float32, src_dtype = torch.int64)
        constant_12 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(to_dtype_7, constant_12)
        get_index_15 = self.get_index('index6')
        index_expr_10 = ops.index_expr(get_index_15, torch.float32)
        mul_5 = ops.mul(add_6, index_expr_10)
        constant_13 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_5, constant_13)
        constant_14 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_3, constant_14)
        to_dtype_8 = ops.to_dtype(maximum_3, torch.int64, src_dtype = torch.float32)
        constant_15 = ops.constant(1, torch.int64)
        add_7 = ops.add(to_dtype_8, constant_15)
        get_index_16 = self.get_index('index7')
        index_expr_11 = ops.index_expr(get_index_16, torch.int64)
        minimum_3 = ops.minimum(add_7, index_expr_11)
        set_indirect3 = self.set_indirect3(minimum_3)
        get_index_17 = self.get_index('index10')
        load_5 = ops.load('arg4_1', get_index_17)
        to_dtype_9 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.uint8)
        mul_6 = ops.mul(load_4, to_dtype_9)
        mul_7 = ops.mul(load_3, mul_6)
        add_8 = ops.add(mul_3, mul_7)
        get_index_18 = self.get_index('index11')
        load_6 = ops.load('buf0', get_index_18)
        get_index_19 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_19)
        get_index_20 = self.get_index('index2')
        index_expr_12 = ops.index_expr(get_index_20, torch.int64)
        to_dtype_10 = ops.to_dtype(index_expr_12, torch.float32, src_dtype = torch.int64)
        constant_16 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(to_dtype_10, constant_16)
        get_index_21 = self.get_index('index3')
        index_expr_13 = ops.index_expr(get_index_21, torch.float32)
        mul_8 = ops.mul(add_9, index_expr_13)
        constant_17 = ops.constant(0.5, torch.float32)
        sub_4 = ops.sub(mul_8, constant_17)
        constant_18 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_4, constant_18)
        to_dtype_11 = ops.to_dtype(maximum_4, torch.int64, src_dtype = torch.float32)
        constant_19 = ops.constant(1, torch.int64)
        add_10 = ops.add(to_dtype_11, constant_19)
        get_index_22 = self.get_index('index4')
        index_expr_14 = ops.index_expr(get_index_22, torch.int64)
        minimum_4 = ops.minimum(add_10, index_expr_14)
        set_indirect4 = self.set_indirect4(minimum_4)
        get_index_23 = self.get_index('index5')
        index_expr_15 = ops.index_expr(get_index_23, torch.int64)
        to_dtype_12 = ops.to_dtype(index_expr_15, torch.float32, src_dtype = torch.int64)
        constant_20 = ops.constant(0.5, torch.float32)
        add_11 = ops.add(to_dtype_12, constant_20)
        get_index_24 = self.get_index('index6')
        index_expr_16 = ops.index_expr(get_index_24, torch.float32)
        mul_9 = ops.mul(add_11, index_expr_16)
        constant_21 = ops.constant(0.5, torch.float32)
        sub_5 = ops.sub(mul_9, constant_21)
        constant_22 = ops.constant(0.0, torch.float32)
        maximum_5 = ops.maximum(sub_5, constant_22)
        to_dtype_13 = ops.to_dtype(maximum_5, torch.int64, src_dtype = torch.float32)
        constant_23 = ops.constant(0, torch.int64)
        add_12 = ops.add(to_dtype_13, constant_23)
        get_index_25 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_25, torch.int64)
        minimum_5 = ops.minimum(add_12, index_expr_17)
        set_indirect5 = self.set_indirect5(minimum_5)
        get_index_26 = self.get_index('index12')
        load_8 = ops.load('arg4_1', get_index_26)
        to_dtype_14 = ops.to_dtype(load_8, torch.float32, src_dtype = torch.uint8)
        mul_10 = ops.mul(load_7, to_dtype_14)
        mul_11 = ops.mul(load_6, mul_10)
        add_13 = ops.add(add_8, mul_11)
        get_index_27 = self.get_index('index11')
        load_9 = ops.load('buf0', get_index_27)
        get_index_28 = self.get_index('index9')
        load_10 = ops.load('buf1', get_index_28)
        get_index_29 = self.get_index('index2')
        index_expr_18 = ops.index_expr(get_index_29, torch.int64)
        to_dtype_15 = ops.to_dtype(index_expr_18, torch.float32, src_dtype = torch.int64)
        constant_24 = ops.constant(0.5, torch.float32)
        add_14 = ops.add(to_dtype_15, constant_24)
        get_index_30 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_30, torch.float32)
        mul_12 = ops.mul(add_14, index_expr_19)
        constant_25 = ops.constant(0.5, torch.float32)
        sub_6 = ops.sub(mul_12, constant_25)
        constant_26 = ops.constant(0.0, torch.float32)
        maximum_6 = ops.maximum(sub_6, constant_26)
        to_dtype_16 = ops.to_dtype(maximum_6, torch.int64, src_dtype = torch.float32)
        constant_27 = ops.constant(1, torch.int64)
        add_15 = ops.add(to_dtype_16, constant_27)
        get_index_31 = self.get_index('index4')
        index_expr_20 = ops.index_expr(get_index_31, torch.int64)
        minimum_6 = ops.minimum(add_15, index_expr_20)
        set_indirect6 = self.set_indirect6(minimum_6)
        get_index_32 = self.get_index('index5')
        index_expr_21 = ops.index_expr(get_index_32, torch.int64)
        to_dtype_17 = ops.to_dtype(index_expr_21, torch.float32, src_dtype = torch.int64)
        constant_28 = ops.constant(0.5, torch.float32)
        add_16 = ops.add(to_dtype_17, constant_28)
        get_index_33 = self.get_index('index6')
        index_expr_22 = ops.index_expr(get_index_33, torch.float32)
        mul_13 = ops.mul(add_16, index_expr_22)
        constant_29 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_13, constant_29)
        constant_30 = ops.constant(0.0, torch.float32)
        maximum_7 = ops.maximum(sub_7, constant_30)
        to_dtype_18 = ops.to_dtype(maximum_7, torch.int64, src_dtype = torch.float32)
        constant_31 = ops.constant(1, torch.int64)
        add_17 = ops.add(to_dtype_18, constant_31)
        get_index_34 = self.get_index('index7')
        index_expr_23 = ops.index_expr(get_index_34, torch.int64)
        minimum_7 = ops.minimum(add_17, index_expr_23)
        set_indirect7 = self.set_indirect7(minimum_7)
        get_index_35 = self.get_index('index13')
        load_11 = ops.load('arg4_1', get_index_35)
        to_dtype_19 = ops.to_dtype(load_11, torch.float32, src_dtype = torch.uint8)
        mul_14 = ops.mul(load_10, to_dtype_19)
        mul_15 = ops.mul(load_9, mul_14)
        add_18 = ops.add(add_13, mul_15)
        get_index_36 = self.get_index('index14')
        store = ops.store('buf2', get_index_36, add_18, None)
        return store


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = [MemoryDep('buf3', c0, {c0: s0*s1*s4*s5})]
buf3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: s0*s1*s4*s5})]
buf3.met_dependencies = []
buf3.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf3.group.device = cpu
buf3.group.iteration = ((s0*s1*s4*s5,), ())
buf3.sizes = ([s0*s1*s4*s5], [])
class buf3_loop_body:
    var_ranges = {z0: s0*s1*s4*s5}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        round_1 = ops.round(load)
        to_dtype = ops.to_dtype(round_1, torch.uint8, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf3', get_index_1, to_dtype, None)
        return store


