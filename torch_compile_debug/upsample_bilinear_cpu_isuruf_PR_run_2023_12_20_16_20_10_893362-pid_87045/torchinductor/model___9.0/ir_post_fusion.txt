buf0_buf1_buf2_buf3_buf4_buf5: FusedSchedulerNode(NoneType)
buf0_buf1_buf2_buf3_buf4_buf5.writes = 
    [   MemoryDep('buf0', c0, {c0: 1659730*s0}),
        MemoryDep('buf1', c0, {c0: 1659730*s0}),
        MemoryDep('buf2', c0, {c0: 1659730*s0}),
        MemoryDep('buf3', c0, {c0: 1659730*s0}),
        MemoryDep('buf4', c0, {c0: 1659730*s0}),
        MemoryDep('buf5', c0, {c0: 1659730*s0})]
buf0_buf1_buf2_buf3_buf4_buf5.unmet_dependencies = []
buf0_buf1_buf2_buf3_buf4_buf5.met_dependencies = 
    [   MemoryDep('arg3_1', (tmp10)*s2 + (tmp21) + c0*s1*s2, {c0: s0}),
        MemoryDep('arg3_1', (tmp10)*s2 + (tmp48) + c0*s1*s2, {c0: s0}),
        MemoryDep('arg3_1', (tmp11)*s2 + (tmp22) + c0*s1*s2, {c0: s0}),
        MemoryDep('arg3_1', (tmp37)*s2 + (tmp48) + c0*s1*s2, {c0: s0}),
        MemoryDep('arg3_1', (tmp37)*s2 + (tmp75) + c0*s1*s2, {c0: s0}),
        MemoryDep('arg3_1', (tmp43)*s2 + (tmp54) + c0*s1*s2, {c0: s0})]
buf0_buf1_buf2_buf3_buf4_buf5.users = []
    buf0_buf1_buf2_buf3_buf4_buf5.snodes[0] =
    buf0: SchedulerNode(ComputedBuffer)
    buf0.writes = [MemoryDep('buf0', c0, {c0: 1659730*s0})]
    buf0.unmet_dependencies = []
    buf0.met_dependencies = [MemoryDep('arg3_1', (tmp37)*s2 + (tmp75) + c0*s1*s2, {c0: s0})]
    buf0.users = [NodeUser(node=SchedulerNode(name='buf4'), can_inplace=True, is_weak=False)]
    buf0.group.device = cpu
    buf0.group.iteration = ((s0, 1234, 1345), ())
    buf0.sizes = ([s0, 1234, 1345], [])
    class buf0_loop_body:
        var_ranges = {z0: s0, z1: 1234, z2: 1345}
        index0 = z1
        index1 = s1/1234
        index2 = s1 - 1
        index3 = z2
        index4 = s2/1345
        index5 = s2 - 1
        index6 = indirect0*s2 + indirect1 + s1*s2*z0
        index7 = 1659730*z0 + 1345*z1 + z2
        def body(self, ops):
            get_index = self.get_index('index0')
            index_expr = ops.index_expr(get_index, torch.int64)
            to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
            constant = ops.constant(0.5, torch.float32)
            add = ops.add(to_dtype, constant)
            get_index_1 = self.get_index('index1')
            index_expr_1 = ops.index_expr(get_index_1, torch.float32)
            mul = ops.mul(add, index_expr_1)
            constant_1 = ops.constant(0.5, torch.float32)
            sub = ops.sub(mul, constant_1)
            constant_2 = ops.constant(0.0, torch.float32)
            maximum = ops.maximum(sub, constant_2)
            to_dtype_1 = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
            get_index_2 = self.get_index('index2')
            index_expr_2 = ops.index_expr(get_index_2, torch.int64)
            lt = ops.lt(to_dtype_1, index_expr_2)
            get_index_3 = self.get_index('index0')
            index_expr_3 = ops.index_expr(get_index_3, torch.int64)
            to_dtype_2 = ops.to_dtype(index_expr_3, torch.float32, src_dtype = torch.int64)
            constant_3 = ops.constant(0.5, torch.float32)
            add_1 = ops.add(to_dtype_2, constant_3)
            get_index_4 = self.get_index('index1')
            index_expr_4 = ops.index_expr(get_index_4, torch.float32)
            mul_1 = ops.mul(add_1, index_expr_4)
            constant_4 = ops.constant(0.5, torch.float32)
            sub_1 = ops.sub(mul_1, constant_4)
            constant_5 = ops.constant(0.0, torch.float32)
            maximum_1 = ops.maximum(sub_1, constant_5)
            to_dtype_3 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
            constant_6 = ops.constant(1, torch.int64)
            add_2 = ops.add(to_dtype_3, constant_6)
            get_index_5 = self.get_index('index0')
            index_expr_5 = ops.index_expr(get_index_5, torch.int64)
            to_dtype_4 = ops.to_dtype(index_expr_5, torch.float32, src_dtype = torch.int64)
            constant_7 = ops.constant(0.5, torch.float32)
            add_3 = ops.add(to_dtype_4, constant_7)
            get_index_6 = self.get_index('index1')
            index_expr_6 = ops.index_expr(get_index_6, torch.float32)
            mul_2 = ops.mul(add_3, index_expr_6)
            constant_8 = ops.constant(0.5, torch.float32)
            sub_2 = ops.sub(mul_2, constant_8)
            constant_9 = ops.constant(0.0, torch.float32)
            maximum_2 = ops.maximum(sub_2, constant_9)
            to_dtype_5 = ops.to_dtype(maximum_2, torch.int64, src_dtype = torch.float32)
            where = ops.where(lt, add_2, to_dtype_5)
            set_indirect0 = self.set_indirect0(where)
            get_index_7 = self.get_index('index3')
            index_expr_7 = ops.index_expr(get_index_7, torch.int64)
            to_dtype_6 = ops.to_dtype(index_expr_7, torch.float32, src_dtype = torch.int64)
            constant_10 = ops.constant(0.5, torch.float32)
            add_4 = ops.add(to_dtype_6, constant_10)
            get_index_8 = self.get_index('index4')
            index_expr_8 = ops.index_expr(get_index_8, torch.float32)
            mul_3 = ops.mul(add_4, index_expr_8)
            constant_11 = ops.constant(0.5, torch.float32)
            sub_3 = ops.sub(mul_3, constant_11)
            constant_12 = ops.constant(0.0, torch.float32)
            maximum_3 = ops.maximum(sub_3, constant_12)
            to_dtype_7 = ops.to_dtype(maximum_3, torch.int64, src_dtype = torch.float32)
            get_index_9 = self.get_index('index5')
            index_expr_9 = ops.index_expr(get_index_9, torch.int64)
            lt_1 = ops.lt(to_dtype_7, index_expr_9)
            get_index_10 = self.get_index('index3')
            index_expr_10 = ops.index_expr(get_index_10, torch.int64)
            to_dtype_8 = ops.to_dtype(index_expr_10, torch.float32, src_dtype = torch.int64)
            constant_13 = ops.constant(0.5, torch.float32)
            add_5 = ops.add(to_dtype_8, constant_13)
            get_index_11 = self.get_index('index4')
            index_expr_11 = ops.index_expr(get_index_11, torch.float32)
            mul_4 = ops.mul(add_5, index_expr_11)
            constant_14 = ops.constant(0.5, torch.float32)
            sub_4 = ops.sub(mul_4, constant_14)
            constant_15 = ops.constant(0.0, torch.float32)
            maximum_4 = ops.maximum(sub_4, constant_15)
            to_dtype_9 = ops.to_dtype(maximum_4, torch.int64, src_dtype = torch.float32)
            constant_16 = ops.constant(1, torch.int64)
            add_6 = ops.add(to_dtype_9, constant_16)
            get_index_12 = self.get_index('index3')
            index_expr_12 = ops.index_expr(get_index_12, torch.int64)
            to_dtype_10 = ops.to_dtype(index_expr_12, torch.float32, src_dtype = torch.int64)
            constant_17 = ops.constant(0.5, torch.float32)
            add_7 = ops.add(to_dtype_10, constant_17)
            get_index_13 = self.get_index('index4')
            index_expr_13 = ops.index_expr(get_index_13, torch.float32)
            mul_5 = ops.mul(add_7, index_expr_13)
            constant_18 = ops.constant(0.5, torch.float32)
            sub_5 = ops.sub(mul_5, constant_18)
            constant_19 = ops.constant(0.0, torch.float32)
            maximum_5 = ops.maximum(sub_5, constant_19)
            to_dtype_11 = ops.to_dtype(maximum_5, torch.int64, src_dtype = torch.float32)
            where_1 = ops.where(lt_1, add_6, to_dtype_11)
            set_indirect1 = self.set_indirect1(where_1)
            get_index_14 = self.get_index('index6')
            load = ops.load('arg3_1', get_index_14)
            get_index_15 = self.get_index('index7')
            store = ops.store('buf0', get_index_15, load, None)
            return store
    buf0_buf1_buf2_buf3_buf4_buf5.snodes[1] =
    buf1: SchedulerNode(ComputedBuffer)
    buf1.writes = [MemoryDep('buf1', c0, {c0: 1659730*s0})]
    buf1.unmet_dependencies = []
    buf1.met_dependencies = [MemoryDep('arg3_1', (tmp37)*s2 + (tmp48) + c0*s1*s2, {c0: s0})]
    buf1.users = [NodeUser(node=SchedulerNode(name='buf4'), can_inplace=True, is_weak=False)]
    buf1.group.device = cpu
    buf1.group.iteration = ((s0, 1234, 1345), ())
    buf1.sizes = ([s0, 1234, 1345], [])
    class buf1_loop_body:
        var_ranges = {z0: s0, z1: 1234, z2: 1345}
        index0 = z1
        index1 = s1/1234
        index2 = s1 - 1
        index3 = z2
        index4 = s2/1345
        index5 = indirect0*s2 + indirect1 + s1*s2*z0
        index6 = 1659730*z0 + 1345*z1 + z2
        def body(self, ops):
            get_index = self.get_index('index0')
            index_expr = ops.index_expr(get_index, torch.int64)
            to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
            constant = ops.constant(0.5, torch.float32)
            add = ops.add(to_dtype, constant)
            get_index_1 = self.get_index('index1')
            index_expr_1 = ops.index_expr(get_index_1, torch.float32)
            mul = ops.mul(add, index_expr_1)
            constant_1 = ops.constant(0.5, torch.float32)
            sub = ops.sub(mul, constant_1)
            constant_2 = ops.constant(0.0, torch.float32)
            maximum = ops.maximum(sub, constant_2)
            to_dtype_1 = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
            get_index_2 = self.get_index('index2')
            index_expr_2 = ops.index_expr(get_index_2, torch.int64)
            lt = ops.lt(to_dtype_1, index_expr_2)
            get_index_3 = self.get_index('index0')
            index_expr_3 = ops.index_expr(get_index_3, torch.int64)
            to_dtype_2 = ops.to_dtype(index_expr_3, torch.float32, src_dtype = torch.int64)
            constant_3 = ops.constant(0.5, torch.float32)
            add_1 = ops.add(to_dtype_2, constant_3)
            get_index_4 = self.get_index('index1')
            index_expr_4 = ops.index_expr(get_index_4, torch.float32)
            mul_1 = ops.mul(add_1, index_expr_4)
            constant_4 = ops.constant(0.5, torch.float32)
            sub_1 = ops.sub(mul_1, constant_4)
            constant_5 = ops.constant(0.0, torch.float32)
            maximum_1 = ops.maximum(sub_1, constant_5)
            to_dtype_3 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
            constant_6 = ops.constant(1, torch.int64)
            add_2 = ops.add(to_dtype_3, constant_6)
            get_index_5 = self.get_index('index0')
            index_expr_5 = ops.index_expr(get_index_5, torch.int64)
            to_dtype_4 = ops.to_dtype(index_expr_5, torch.float32, src_dtype = torch.int64)
            constant_7 = ops.constant(0.5, torch.float32)
            add_3 = ops.add(to_dtype_4, constant_7)
            get_index_6 = self.get_index('index1')
            index_expr_6 = ops.index_expr(get_index_6, torch.float32)
            mul_2 = ops.mul(add_3, index_expr_6)
            constant_8 = ops.constant(0.5, torch.float32)
            sub_2 = ops.sub(mul_2, constant_8)
            constant_9 = ops.constant(0.0, torch.float32)
            maximum_2 = ops.maximum(sub_2, constant_9)
            to_dtype_5 = ops.to_dtype(maximum_2, torch.int64, src_dtype = torch.float32)
            where = ops.where(lt, add_2, to_dtype_5)
            set_indirect0 = self.set_indirect0(where)
            get_index_7 = self.get_index('index3')
            index_expr_7 = ops.index_expr(get_index_7, torch.int64)
            to_dtype_6 = ops.to_dtype(index_expr_7, torch.float32, src_dtype = torch.int64)
            constant_10 = ops.constant(0.5, torch.float32)
            add_4 = ops.add(to_dtype_6, constant_10)
            get_index_8 = self.get_index('index4')
            index_expr_8 = ops.index_expr(get_index_8, torch.float32)
            mul_3 = ops.mul(add_4, index_expr_8)
            constant_11 = ops.constant(0.5, torch.float32)
            sub_3 = ops.sub(mul_3, constant_11)
            constant_12 = ops.constant(0.0, torch.float32)
            maximum_3 = ops.maximum(sub_3, constant_12)
            to_dtype_7 = ops.to_dtype(maximum_3, torch.int64, src_dtype = torch.float32)
            set_indirect1 = self.set_indirect1(to_dtype_7)
            get_index_9 = self.get_index('index5')
            load = ops.load('arg3_1', get_index_9)
            get_index_10 = self.get_index('index6')
            store = ops.store('buf1', get_index_10, load, None)
            return store
    buf0_buf1_buf2_buf3_buf4_buf5.snodes[2] =
    buf2: SchedulerNode(ComputedBuffer)
    buf2.writes = [MemoryDep('buf2', c0, {c0: 1659730*s0})]
    buf2.unmet_dependencies = []
    buf2.met_dependencies = [MemoryDep('arg3_1', (tmp10)*s2 + (tmp48) + c0*s1*s2, {c0: s0})]
    buf2.users = [NodeUser(node=SchedulerNode(name='buf3'), can_inplace=True, is_weak=False)]
    buf2.group.device = cpu
    buf2.group.iteration = ((s0, 1234, 1345), ())
    buf2.sizes = ([s0, 1234, 1345], [])
    class buf2_loop_body:
        var_ranges = {z0: s0, z1: 1234, z2: 1345}
        index0 = z1
        index1 = s1/1234
        index2 = z2
        index3 = s2/1345
        index4 = s2 - 1
        index5 = indirect0*s2 + indirect1 + s1*s2*z0
        index6 = 1659730*z0 + 1345*z1 + z2
        def body(self, ops):
            get_index = self.get_index('index0')
            index_expr = ops.index_expr(get_index, torch.int64)
            to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
            constant = ops.constant(0.5, torch.float32)
            add = ops.add(to_dtype, constant)
            get_index_1 = self.get_index('index1')
            index_expr_1 = ops.index_expr(get_index_1, torch.float32)
            mul = ops.mul(add, index_expr_1)
            constant_1 = ops.constant(0.5, torch.float32)
            sub = ops.sub(mul, constant_1)
            constant_2 = ops.constant(0.0, torch.float32)
            maximum = ops.maximum(sub, constant_2)
            to_dtype_1 = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
            set_indirect0 = self.set_indirect0(to_dtype_1)
            get_index_2 = self.get_index('index2')
            index_expr_2 = ops.index_expr(get_index_2, torch.int64)
            to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32, src_dtype = torch.int64)
            constant_3 = ops.constant(0.5, torch.float32)
            add_1 = ops.add(to_dtype_2, constant_3)
            get_index_3 = self.get_index('index3')
            index_expr_3 = ops.index_expr(get_index_3, torch.float32)
            mul_1 = ops.mul(add_1, index_expr_3)
            constant_4 = ops.constant(0.5, torch.float32)
            sub_1 = ops.sub(mul_1, constant_4)
            constant_5 = ops.constant(0.0, torch.float32)
            maximum_1 = ops.maximum(sub_1, constant_5)
            to_dtype_3 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
            get_index_4 = self.get_index('index4')
            index_expr_4 = ops.index_expr(get_index_4, torch.int64)
            lt = ops.lt(to_dtype_3, index_expr_4)
            get_index_5 = self.get_index('index2')
            index_expr_5 = ops.index_expr(get_index_5, torch.int64)
            to_dtype_4 = ops.to_dtype(index_expr_5, torch.float32, src_dtype = torch.int64)
            constant_6 = ops.constant(0.5, torch.float32)
            add_2 = ops.add(to_dtype_4, constant_6)
            get_index_6 = self.get_index('index3')
            index_expr_6 = ops.index_expr(get_index_6, torch.float32)
            mul_2 = ops.mul(add_2, index_expr_6)
            constant_7 = ops.constant(0.5, torch.float32)
            sub_2 = ops.sub(mul_2, constant_7)
            constant_8 = ops.constant(0.0, torch.float32)
            maximum_2 = ops.maximum(sub_2, constant_8)
            to_dtype_5 = ops.to_dtype(maximum_2, torch.int64, src_dtype = torch.float32)
            constant_9 = ops.constant(1, torch.int64)
            add_3 = ops.add(to_dtype_5, constant_9)
            get_index_7 = self.get_index('index2')
            index_expr_7 = ops.index_expr(get_index_7, torch.int64)
            to_dtype_6 = ops.to_dtype(index_expr_7, torch.float32, src_dtype = torch.int64)
            constant_10 = ops.constant(0.5, torch.float32)
            add_4 = ops.add(to_dtype_6, constant_10)
            get_index_8 = self.get_index('index3')
            index_expr_8 = ops.index_expr(get_index_8, torch.float32)
            mul_3 = ops.mul(add_4, index_expr_8)
            constant_11 = ops.constant(0.5, torch.float32)
            sub_3 = ops.sub(mul_3, constant_11)
            constant_12 = ops.constant(0.0, torch.float32)
            maximum_3 = ops.maximum(sub_3, constant_12)
            to_dtype_7 = ops.to_dtype(maximum_3, torch.int64, src_dtype = torch.float32)
            where = ops.where(lt, add_3, to_dtype_7)
            set_indirect1 = self.set_indirect1(where)
            get_index_9 = self.get_index('index5')
            load = ops.load('arg3_1', get_index_9)
            get_index_10 = self.get_index('index6')
            store = ops.store('buf2', get_index_10, load, None)
            return store
    buf0_buf1_buf2_buf3_buf4_buf5.snodes[3] =
    buf3: SchedulerNode(ComputedBuffer)
    buf3.writes = [MemoryDep('buf3', c0, {c0: 1659730*s0})]
    buf3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 1659730*s0})]
    buf3.met_dependencies = [MemoryDep('arg3_1', (tmp11)*s2 + (tmp22) + c0*s1*s2, {c0: s0})]
    buf3.users = [NodeUser(node=SchedulerNode(name='buf4'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf5'), can_inplace=True, is_weak=False)]
    buf3.group.device = cpu
    buf3.group.iteration = ((s0, 1234, 1345), ())
    buf3.sizes = ([s0, 1234, 1345], [])
    class buf3_loop_body:
        var_ranges = {z0: s0, z1: 1234, z2: 1345}
        index0 = 1659730*z0 + 1345*z1 + z2
        index1 = z1
        index2 = s1/1234
        index3 = z2
        index4 = s2/1345
        index5 = indirect0*s2 + indirect1 + s1*s2*z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf2', get_index)
            get_index_1 = self.get_index('index1')
            index_expr = ops.index_expr(get_index_1, torch.int64)
            to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
            constant = ops.constant(0.5, torch.float32)
            add = ops.add(to_dtype, constant)
            get_index_2 = self.get_index('index2')
            index_expr_1 = ops.index_expr(get_index_2, torch.float32)
            mul = ops.mul(add, index_expr_1)
            constant_1 = ops.constant(0.5, torch.float32)
            sub = ops.sub(mul, constant_1)
            constant_2 = ops.constant(0.0, torch.float32)
            maximum = ops.maximum(sub, constant_2)
            to_dtype_1 = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
            set_indirect0 = self.set_indirect0(to_dtype_1)
            get_index_3 = self.get_index('index3')
            index_expr_2 = ops.index_expr(get_index_3, torch.int64)
            to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32, src_dtype = torch.int64)
            constant_3 = ops.constant(0.5, torch.float32)
            add_1 = ops.add(to_dtype_2, constant_3)
            get_index_4 = self.get_index('index4')
            index_expr_3 = ops.index_expr(get_index_4, torch.float32)
            mul_1 = ops.mul(add_1, index_expr_3)
            constant_4 = ops.constant(0.5, torch.float32)
            sub_1 = ops.sub(mul_1, constant_4)
            constant_5 = ops.constant(0.0, torch.float32)
            maximum_1 = ops.maximum(sub_1, constant_5)
            to_dtype_3 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
            set_indirect1 = self.set_indirect1(to_dtype_3)
            get_index_5 = self.get_index('index5')
            load_1 = ops.load('arg3_1', get_index_5)
            sub_2 = ops.sub(load, load_1)
            get_index_6 = self.get_index('index3')
            index_expr_4 = ops.index_expr(get_index_6, torch.int64)
            to_dtype_4 = ops.to_dtype(index_expr_4, torch.float32, src_dtype = torch.int64)
            constant_6 = ops.constant(0.5, torch.float32)
            add_2 = ops.add(to_dtype_4, constant_6)
            get_index_7 = self.get_index('index4')
            index_expr_5 = ops.index_expr(get_index_7, torch.float32)
            mul_2 = ops.mul(add_2, index_expr_5)
            constant_7 = ops.constant(0.5, torch.float32)
            sub_3 = ops.sub(mul_2, constant_7)
            constant_8 = ops.constant(0.0, torch.float32)
            maximum_2 = ops.maximum(sub_3, constant_8)
            get_index_8 = self.get_index('index3')
            index_expr_6 = ops.index_expr(get_index_8, torch.int64)
            to_dtype_5 = ops.to_dtype(index_expr_6, torch.float32, src_dtype = torch.int64)
            constant_9 = ops.constant(0.5, torch.float32)
            add_3 = ops.add(to_dtype_5, constant_9)
            get_index_9 = self.get_index('index4')
            index_expr_7 = ops.index_expr(get_index_9, torch.float32)
            mul_3 = ops.mul(add_3, index_expr_7)
            constant_10 = ops.constant(0.5, torch.float32)
            sub_4 = ops.sub(mul_3, constant_10)
            constant_11 = ops.constant(0.0, torch.float32)
            maximum_3 = ops.maximum(sub_4, constant_11)
            to_dtype_6 = ops.to_dtype(maximum_3, torch.int64, src_dtype = torch.float32)
            to_dtype_7 = ops.to_dtype(to_dtype_6, torch.float32, src_dtype = torch.int64)
            sub_5 = ops.sub(maximum_2, to_dtype_7)
            constant_12 = ops.constant(0.0, torch.float32)
            maximum_4 = ops.maximum(sub_5, constant_12)
            constant_13 = ops.constant(1.0, torch.float32)
            minimum = ops.minimum(maximum_4, constant_13)
            mul_4 = ops.mul(sub_2, minimum)
            get_index_10 = self.get_index('index0')
            store = ops.store('buf3', get_index_10, mul_4, None)
            return store
    buf0_buf1_buf2_buf3_buf4_buf5.snodes[4] =
    buf4: SchedulerNode(ComputedBuffer)
    buf4.writes = [MemoryDep('buf4', c0, {c0: 1659730*s0})]
    buf4.unmet_dependencies = 
        [   MemoryDep('buf0', c0, {c0: 1659730*s0}),
            MemoryDep('buf1', c0, {c0: 1659730*s0}),
            MemoryDep('buf3', c0, {c0: 1659730*s0})]
    buf4.met_dependencies = [MemoryDep('arg3_1', (tmp43)*s2 + (tmp54) + c0*s1*s2, {c0: s0})]
    buf4.users = [NodeUser(node=SchedulerNode(name='buf5'), can_inplace=True, is_weak=False)]
    buf4.group.device = cpu
    buf4.group.iteration = ((s0, 1234, 1345), ())
    buf4.sizes = ([s0, 1234, 1345], [])
    class buf4_loop_body:
        var_ranges = {z0: s0, z1: 1234, z2: 1345}
        index0 = 1659730*z0 + 1345*z1 + z2
        index1 = z2
        index2 = s2/1345
        index3 = z1
        index4 = s1/1234
        index5 = indirect0*s2 + indirect1 + s1*s2*z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf1', get_index)
            get_index_1 = self.get_index('index0')
            load_1 = ops.load('buf0', get_index_1)
            get_index_2 = self.get_index('index0')
            load_2 = ops.load('buf1', get_index_2)
            sub = ops.sub(load_1, load_2)
            get_index_3 = self.get_index('index1')
            index_expr = ops.index_expr(get_index_3, torch.int64)
            to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
            constant = ops.constant(0.5, torch.float32)
            add = ops.add(to_dtype, constant)
            get_index_4 = self.get_index('index2')
            index_expr_1 = ops.index_expr(get_index_4, torch.float32)
            mul = ops.mul(add, index_expr_1)
            constant_1 = ops.constant(0.5, torch.float32)
            sub_1 = ops.sub(mul, constant_1)
            constant_2 = ops.constant(0.0, torch.float32)
            maximum = ops.maximum(sub_1, constant_2)
            get_index_5 = self.get_index('index1')
            index_expr_2 = ops.index_expr(get_index_5, torch.int64)
            to_dtype_1 = ops.to_dtype(index_expr_2, torch.float32, src_dtype = torch.int64)
            constant_3 = ops.constant(0.5, torch.float32)
            add_1 = ops.add(to_dtype_1, constant_3)
            get_index_6 = self.get_index('index2')
            index_expr_3 = ops.index_expr(get_index_6, torch.float32)
            mul_1 = ops.mul(add_1, index_expr_3)
            constant_4 = ops.constant(0.5, torch.float32)
            sub_2 = ops.sub(mul_1, constant_4)
            constant_5 = ops.constant(0.0, torch.float32)
            maximum_1 = ops.maximum(sub_2, constant_5)
            to_dtype_2 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
            to_dtype_3 = ops.to_dtype(to_dtype_2, torch.float32, src_dtype = torch.int64)
            sub_3 = ops.sub(maximum, to_dtype_3)
            constant_6 = ops.constant(0.0, torch.float32)
            maximum_2 = ops.maximum(sub_3, constant_6)
            constant_7 = ops.constant(1.0, torch.float32)
            minimum = ops.minimum(maximum_2, constant_7)
            mul_2 = ops.mul(sub, minimum)
            add_2 = ops.add(load, mul_2)
            get_index_7 = self.get_index('index3')
            index_expr_4 = ops.index_expr(get_index_7, torch.int64)
            to_dtype_4 = ops.to_dtype(index_expr_4, torch.float32, src_dtype = torch.int64)
            constant_8 = ops.constant(0.5, torch.float32)
            add_3 = ops.add(to_dtype_4, constant_8)
            get_index_8 = self.get_index('index4')
            index_expr_5 = ops.index_expr(get_index_8, torch.float32)
            mul_3 = ops.mul(add_3, index_expr_5)
            constant_9 = ops.constant(0.5, torch.float32)
            sub_4 = ops.sub(mul_3, constant_9)
            constant_10 = ops.constant(0.0, torch.float32)
            maximum_3 = ops.maximum(sub_4, constant_10)
            to_dtype_5 = ops.to_dtype(maximum_3, torch.int64, src_dtype = torch.float32)
            set_indirect0 = self.set_indirect0(to_dtype_5)
            get_index_9 = self.get_index('index1')
            index_expr_6 = ops.index_expr(get_index_9, torch.int64)
            to_dtype_6 = ops.to_dtype(index_expr_6, torch.float32, src_dtype = torch.int64)
            constant_11 = ops.constant(0.5, torch.float32)
            add_4 = ops.add(to_dtype_6, constant_11)
            get_index_10 = self.get_index('index2')
            index_expr_7 = ops.index_expr(get_index_10, torch.float32)
            mul_4 = ops.mul(add_4, index_expr_7)
            constant_12 = ops.constant(0.5, torch.float32)
            sub_5 = ops.sub(mul_4, constant_12)
            constant_13 = ops.constant(0.0, torch.float32)
            maximum_4 = ops.maximum(sub_5, constant_13)
            to_dtype_7 = ops.to_dtype(maximum_4, torch.int64, src_dtype = torch.float32)
            set_indirect1 = self.set_indirect1(to_dtype_7)
            get_index_11 = self.get_index('index5')
            load_3 = ops.load('arg3_1', get_index_11)
            get_index_12 = self.get_index('index0')
            load_4 = ops.load('buf3', get_index_12)
            add_5 = ops.add(load_3, load_4)
            sub_6 = ops.sub(add_2, add_5)
            get_index_13 = self.get_index('index0')
            store = ops.store('buf4', get_index_13, sub_6, None)
            return store
    buf0_buf1_buf2_buf3_buf4_buf5.snodes[5] =
    buf5: SchedulerNode(ComputedBuffer)
    buf5.writes = [MemoryDep('buf5', c0, {c0: 1659730*s0})]
    buf5.unmet_dependencies = 
        [   MemoryDep('buf3', c0, {c0: 1659730*s0}),
            MemoryDep('buf4', c0, {c0: 1659730*s0})]
    buf5.met_dependencies = [MemoryDep('arg3_1', (tmp10)*s2 + (tmp21) + c0*s1*s2, {c0: s0})]
    buf5.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf5.group.device = cpu
    buf5.group.iteration = ((s0, 1234, 1345), ())
    buf5.sizes = ([s0, 1234, 1345], [])
    class buf5_loop_body:
        var_ranges = {z0: s0, z1: 1234, z2: 1345}
        index0 = z1
        index1 = s1/1234
        index2 = z2
        index3 = s2/1345
        index4 = indirect0*s2 + indirect1 + s1*s2*z0
        index5 = 1659730*z0 + 1345*z1 + z2
        def body(self, ops):
            get_index = self.get_index('index0')
            index_expr = ops.index_expr(get_index, torch.int64)
            to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
            constant = ops.constant(0.5, torch.float32)
            add = ops.add(to_dtype, constant)
            get_index_1 = self.get_index('index1')
            index_expr_1 = ops.index_expr(get_index_1, torch.float32)
            mul = ops.mul(add, index_expr_1)
            constant_1 = ops.constant(0.5, torch.float32)
            sub = ops.sub(mul, constant_1)
            constant_2 = ops.constant(0.0, torch.float32)
            maximum = ops.maximum(sub, constant_2)
            to_dtype_1 = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
            set_indirect0 = self.set_indirect0(to_dtype_1)
            get_index_2 = self.get_index('index2')
            index_expr_2 = ops.index_expr(get_index_2, torch.int64)
            to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32, src_dtype = torch.int64)
            constant_3 = ops.constant(0.5, torch.float32)
            add_1 = ops.add(to_dtype_2, constant_3)
            get_index_3 = self.get_index('index3')
            index_expr_3 = ops.index_expr(get_index_3, torch.float32)
            mul_1 = ops.mul(add_1, index_expr_3)
            constant_4 = ops.constant(0.5, torch.float32)
            sub_1 = ops.sub(mul_1, constant_4)
            constant_5 = ops.constant(0.0, torch.float32)
            maximum_1 = ops.maximum(sub_1, constant_5)
            to_dtype_3 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
            set_indirect1 = self.set_indirect1(to_dtype_3)
            get_index_4 = self.get_index('index4')
            load = ops.load('arg3_1', get_index_4)
            get_index_5 = self.get_index('index5')
            load_1 = ops.load('buf3', get_index_5)
            add_2 = ops.add(load, load_1)
            get_index_6 = self.get_index('index5')
            load_2 = ops.load('buf4', get_index_6)
            get_index_7 = self.get_index('index0')
            index_expr_4 = ops.index_expr(get_index_7, torch.int64)
            to_dtype_4 = ops.to_dtype(index_expr_4, torch.float32, src_dtype = torch.int64)
            constant_6 = ops.constant(0.5, torch.float32)
            add_3 = ops.add(to_dtype_4, constant_6)
            get_index_8 = self.get_index('index1')
            index_expr_5 = ops.index_expr(get_index_8, torch.float32)
            mul_2 = ops.mul(add_3, index_expr_5)
            constant_7 = ops.constant(0.5, torch.float32)
            sub_2 = ops.sub(mul_2, constant_7)
            constant_8 = ops.constant(0.0, torch.float32)
            maximum_2 = ops.maximum(sub_2, constant_8)
            get_index_9 = self.get_index('index0')
            index_expr_6 = ops.index_expr(get_index_9, torch.int64)
            to_dtype_5 = ops.to_dtype(index_expr_6, torch.float32, src_dtype = torch.int64)
            constant_9 = ops.constant(0.5, torch.float32)
            add_4 = ops.add(to_dtype_5, constant_9)
            get_index_10 = self.get_index('index1')
            index_expr_7 = ops.index_expr(get_index_10, torch.float32)
            mul_3 = ops.mul(add_4, index_expr_7)
            constant_10 = ops.constant(0.5, torch.float32)
            sub_3 = ops.sub(mul_3, constant_10)
            constant_11 = ops.constant(0.0, torch.float32)
            maximum_3 = ops.maximum(sub_3, constant_11)
            to_dtype_6 = ops.to_dtype(maximum_3, torch.int64, src_dtype = torch.float32)
            to_dtype_7 = ops.to_dtype(to_dtype_6, torch.float32, src_dtype = torch.int64)
            sub_4 = ops.sub(maximum_2, to_dtype_7)
            constant_12 = ops.constant(0.0, torch.float32)
            maximum_4 = ops.maximum(sub_4, constant_12)
            constant_13 = ops.constant(1.0, torch.float32)
            minimum = ops.minimum(maximum_4, constant_13)
            mul_4 = ops.mul(load_2, minimum)
            add_5 = ops.add(add_2, mul_4)
            get_index_11 = self.get_index('index5')
            store = ops.store('buf5', get_index_11, add_5, None)
            return store


