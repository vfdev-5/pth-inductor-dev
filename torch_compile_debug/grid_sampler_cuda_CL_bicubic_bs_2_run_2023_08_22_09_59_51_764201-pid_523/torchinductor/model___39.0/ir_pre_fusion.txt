buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep('buf1', c0, {c0: 629280})]
buf1.unmet_dependencies = []
buf1.met_dependencies = 
    [   MemoryDep('arg1_1', 6*c0 + 3*c2 + 1, {c0: 2, c1: 157320, c2: 2}),
        MemoryDep('arg1_1', 6*c0 + 3*c2 + 2, {c0: 2, c1: 157320, c2: 2}),
        MemoryDep('arg1_1', 6*c0 + 3*c2, {c0: 2, c1: 157320, c2: 2})]
buf1.users = [NodeUser(node=SchedulerNode(name='buf2'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf3'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf4'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf5'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf6'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf7'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf8'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf9'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf10'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf11'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf12'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf13'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf14'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf15'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf16'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf17'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf18'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf19'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf20'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf21'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf22'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf23'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf24'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf25'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf26'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf27'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf28'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf29'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf30'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf31'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf32'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf33'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf34'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf35'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf36'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf37'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf38'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf39'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf40'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf41'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf42'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf43'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf44'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf45'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf46'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf47'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf48'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf49'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf50'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf51'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf52'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf53'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf54'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf55'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf56'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf57'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf58'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf59'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf60'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf61'), can_inplace=False)]
buf1.group.device = cuda:0
buf1.group.iteration = (629280, 1)
buf1.sizes = ([2, 157320, 2], [])
class buf1_loop_body:
    var_ranges = {z0: 2, z1: 157320, z2: 2}
    index0 = ModularIndexing(z1, 1, 456)
    index1 = 455 - ModularIndexing(z1, 1, 456)
    index2 = (z1//456)
    index3 = 344 - (z1//456)
    index4 = 6*z0 + 3*z2
    index5 = 6*z0 + 3*z2 + 1
    index6 = 6*z0 + 3*z2 + 2
    index7 = 314640*z0 + 2*z1 + z2
    def body(self, ops):
        constant = ops.constant(0, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(constant, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        constant_2 = ops.constant(-1, torch.int64)
        constant_3 = ops.constant(0, torch.int64)
        ge = ops.ge(constant_2, constant_3)
        constant_4 = ops.constant(-1, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        lt_1 = ops.lt(constant_4, constant_5)
        and_ = ops.and_(ge, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        add = ops.add(masked_subblock1, masked_subblock2)
        constant_6 = ops.constant(-2, torch.int64)
        constant_7 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(constant_6, constant_7)
        masked_subblock3 = self.masked_subblock3(ge_1, 0.0)
        add_1 = ops.add(add, masked_subblock3)
        get_index = self.get_index('index4')
        load = ops.load('arg1_1', get_index)
        mul = ops.mul(add_1, load)
        constant_8 = ops.constant(1, torch.int64)
        constant_9 = ops.constant(1, torch.int64)
        lt_2 = ops.lt(constant_8, constant_9)
        masked_subblock4 = self.masked_subblock4(lt_2, 0.0)
        constant_10 = ops.constant(0, torch.int64)
        constant_11 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(constant_10, constant_11)
        constant_12 = ops.constant(0, torch.int64)
        constant_13 = ops.constant(1, torch.int64)
        lt_3 = ops.lt(constant_12, constant_13)
        and__1 = ops.and_(ge_2, lt_3)
        masked_subblock5 = self.masked_subblock5(and__1, 0.0)
        add_2 = ops.add(masked_subblock4, masked_subblock5)
        constant_14 = ops.constant(-1, torch.int64)
        constant_15 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(constant_14, constant_15)
        masked_subblock6 = self.masked_subblock6(ge_3, 0.0)
        add_3 = ops.add(add_2, masked_subblock6)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('arg1_1', get_index_1)
        mul_1 = ops.mul(add_3, load_1)
        add_4 = ops.add(mul, mul_1)
        constant_16 = ops.constant(2, torch.int64)
        constant_17 = ops.constant(1, torch.int64)
        lt_4 = ops.lt(constant_16, constant_17)
        masked_subblock7 = self.masked_subblock7(lt_4, 0.0)
        constant_18 = ops.constant(1, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(constant_18, constant_19)
        constant_20 = ops.constant(1, torch.int64)
        constant_21 = ops.constant(1, torch.int64)
        lt_5 = ops.lt(constant_20, constant_21)
        and__2 = ops.and_(ge_4, lt_5)
        masked_subblock8 = self.masked_subblock8(and__2, 0.0)
        add_5 = ops.add(masked_subblock7, masked_subblock8)
        constant_22 = ops.constant(0, torch.int64)
        constant_23 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(constant_22, constant_23)
        masked_subblock9 = self.masked_subblock9(ge_5, 0.0)
        add_6 = ops.add(add_5, masked_subblock9)
        get_index_2 = self.get_index('index6')
        load_2 = ops.load('arg1_1', get_index_2)
        mul_2 = ops.mul(add_6, load_2)
        add_7 = ops.add(add_4, mul_2)
        get_index_3 = self.get_index('index7')
        store = ops.store('buf1', get_index_3, add_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32)
        constant = ops.constant(228.0, torch.float32)
        lt = ops.lt(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32)
        constant_1 = ops.constant(0.004385964912280702, torch.float32)
        mul = ops.mul(to_dtype_1, constant_1)
        constant_2 = ops.constant(-0.9978070175438597, torch.float32)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32)
        constant_3 = ops.constant(0.004385964912280702, torch.float32)
        mul_1 = ops.mul(to_dtype_2, constant_3)
        constant_4 = ops.constant(0.9978070175438597, torch.float32)
        sub = ops.sub(constant_4, mul_1)
        where = ops.where(lt, add, sub)
        return where
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32)
        constant = ops.constant(172.5, torch.float32)
        lt = ops.lt(to_dtype, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32)
        constant_1 = ops.constant(0.005797101449275362, torch.float32)
        mul = ops.mul(to_dtype_1, constant_1)
        constant_2 = ops.constant(-0.9971014492753624, torch.float32)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32)
        constant_3 = ops.constant(0.005797101449275362, torch.float32)
        mul_1 = ops.mul(to_dtype_2, constant_3)
        constant_4 = ops.constant(0.9971014492753624, torch.float32)
        sub = ops.sub(constant_4, mul_1)
        where = ops.where(lt, add, sub)
        return where
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock4(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32)
        constant = ops.constant(228.0, torch.float32)
        lt = ops.lt(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32)
        constant_1 = ops.constant(0.004385964912280702, torch.float32)
        mul = ops.mul(to_dtype_1, constant_1)
        constant_2 = ops.constant(-0.9978070175438597, torch.float32)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32)
        constant_3 = ops.constant(0.004385964912280702, torch.float32)
        mul_1 = ops.mul(to_dtype_2, constant_3)
        constant_4 = ops.constant(0.9978070175438597, torch.float32)
        sub = ops.sub(constant_4, mul_1)
        where = ops.where(lt, add, sub)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32)
        constant = ops.constant(172.5, torch.float32)
        lt = ops.lt(to_dtype, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32)
        constant_1 = ops.constant(0.005797101449275362, torch.float32)
        mul = ops.mul(to_dtype_1, constant_1)
        constant_2 = ops.constant(-0.9971014492753624, torch.float32)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32)
        constant_3 = ops.constant(0.005797101449275362, torch.float32)
        mul_1 = ops.mul(to_dtype_2, constant_3)
        constant_4 = ops.constant(0.9971014492753624, torch.float32)
        sub = ops.sub(constant_4, mul_1)
        where = ops.where(lt, add, sub)
        return where
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock7(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32)
        constant = ops.constant(228.0, torch.float32)
        lt = ops.lt(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32)
        constant_1 = ops.constant(0.004385964912280702, torch.float32)
        mul = ops.mul(to_dtype_1, constant_1)
        constant_2 = ops.constant(-0.9978070175438597, torch.float32)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32)
        constant_3 = ops.constant(0.004385964912280702, torch.float32)
        mul_1 = ops.mul(to_dtype_2, constant_3)
        constant_4 = ops.constant(0.9978070175438597, torch.float32)
        sub = ops.sub(constant_4, mul_1)
        where = ops.where(lt, add, sub)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32)
        constant = ops.constant(172.5, torch.float32)
        lt = ops.lt(to_dtype, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32)
        constant_1 = ops.constant(0.005797101449275362, torch.float32)
        mul = ops.mul(to_dtype_1, constant_1)
        constant_2 = ops.constant(-0.9971014492753624, torch.float32)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32)
        constant_3 = ops.constant(0.005797101449275362, torch.float32)
        mul_1 = ops.mul(to_dtype_2, constant_3)
        constant_4 = ops.constant(0.9971014492753624, torch.float32)
        sub = ops.sub(constant_4, mul_1)
        where = ops.where(lt, add, sub)
        return where
    def masked_subblock9(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep('buf2', c0, {c0: 943920})]
buf2.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf2.met_dependencies = []
buf2.users = [NodeUser(node=SchedulerNode(name='buf4'), can_inplace=True)]
buf2.group.device = cuda:0
buf2.group.iteration = (943920, 1)
buf2.sizes = ([2, 3, 157320], [])
class buf2_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        sub = ops.sub(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(sub, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_1)
        constant_6 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(sub_1, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_2)
        constant_10 = ops.constant(-1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_4)
        constant_14 = ops.constant(-1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_6)
        constant_18 = ops.constant(-1.0, torch.float32)
        add_7 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_7, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf2', get_index_5, where, None)
        return store


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = [MemoryDep('buf3', c0, {c0: 943920})]
buf3.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf3.met_dependencies = []
buf3.users = [NodeUser(node=SchedulerNode(name='buf4'), can_inplace=True)]
buf3.group.device = cuda:0
buf3.group.iteration = (943920, 1)
buf3.sizes = ([2, 3, 157320], [])
class buf3_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        sub = ops.sub(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(sub, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_1)
        constant_6 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(sub_1, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_2)
        constant_10 = ops.constant(-1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_4)
        constant_14 = ops.constant(-1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_6)
        constant_18 = ops.constant(1.0, torch.float32)
        sub_2 = ops.sub(floor_4, constant_18)
        to_dtype = ops.to_dtype(sub_2, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf3', get_index_5, where, None)
        return store


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = [MemoryDep('buf4', c0, {c0: 943920})]
buf4.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf2', c0, {c0: 943920}),
        MemoryDep('buf3', c0, {c0: 943920})]
buf4.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp0) + 3*(tmp1) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf4.users = [NodeUser(node=SchedulerNode(name='buf5'), can_inplace=True)]
buf4.group.device = cuda:0
buf4.group.iteration = (943920, 1)
buf4.sizes = ([2, 3, 157320], [])
class buf4_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index2 = 314640*z0 + 2*z2
    index3 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf3', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_3, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        sub = ops.sub(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(sub, constant_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_1)
        constant_6 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(sub_1, constant_7)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf1', get_index_5)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_5, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_2)
        constant_10 = ops.constant(-1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_11)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('buf1', get_index_6)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_4)
        constant_14 = ops.constant(-1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_16 = ops.constant(1, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_16, constant_17)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load_2, to_dtype)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf4', get_index_7, mul_4, None)
        return store


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = [MemoryDep('buf5', c0, {c0: 943920})]
buf5.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf4', c0, {c0: 943920})]
buf5.met_dependencies = []
buf5.users = [NodeUser(node=SchedulerNode(name='buf16'), can_inplace=True)]
buf5.group.device = cuda:0
buf5.group.iteration = (943920, 1)
buf5.sizes = ([2, 3, 157320], [])
class buf5_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_2 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_2)
        constant_3 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_1)
        sub = ops.sub(add, floor)
        constant_4 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(sub, constant_4)
        constant_5 = ops.constant(-0.75, torch.float32)
        mul_2 = ops.mul(add_2, constant_5)
        constant_6 = ops.constant(-3.75, torch.float32)
        sub_1 = ops.sub(mul_2, constant_6)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_7 = ops.constant(228.0, torch.float32)
        mul_3 = ops.mul(load_3, constant_7)
        constant_8 = ops.constant(227.5, torch.float32)
        add_3 = ops.add(mul_3, constant_8)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_9 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_9)
        constant_10 = ops.constant(227.5, torch.float32)
        add_4 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_4)
        sub_2 = ops.sub(add_3, floor_1)
        constant_11 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(sub_2, constant_11)
        mul_5 = ops.mul(sub_1, add_5)
        constant_12 = ops.constant(-6.0, torch.float32)
        add_6 = ops.add(mul_5, constant_12)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_13 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_5, constant_13)
        constant_14 = ops.constant(227.5, torch.float32)
        add_7 = ops.add(mul_6, constant_14)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_15 = ops.constant(228.0, torch.float32)
        mul_7 = ops.mul(load_6, constant_15)
        constant_16 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_7, constant_16)
        floor_2 = ops.floor(add_8)
        sub_3 = ops.sub(add_7, floor_2)
        constant_17 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(sub_3, constant_17)
        mul_8 = ops.mul(add_6, add_9)
        constant_18 = ops.constant(-3.0, torch.float32)
        sub_4 = ops.sub(mul_8, constant_18)
        mul_9 = ops.mul(load, sub_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf5', get_index_7, mul_9, None)
        return store


buf6: SchedulerNode(ComputedBuffer)
buf6.writes = [MemoryDep('buf6', c0, {c0: 943920})]
buf6.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf6.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp49) + 3*(tmp97) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf6.users = [NodeUser(node=SchedulerNode(name='buf7'), can_inplace=True)]
buf6.group.device = cuda:0
buf6.group.iteration = (943920, 1)
buf6.sizes = ([2, 3, 157320], [])
class buf6_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index3 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_3 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_3)
        constant_4 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_4)
        floor_1 = ops.floor(add_1)
        constant_5 = ops.constant(456.0, torch.float32)
        lt = ops.lt(floor_1, constant_5)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_6 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_6)
        constant_7 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_7)
        floor_2 = ops.floor(add_2)
        constant_8 = ops.constant(-1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_8)
        constant_9 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_9)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_10 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_10)
        constant_11 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_11)
        floor_3 = ops.floor(add_4)
        constant_12 = ops.constant(-1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_12)
        constant_13 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_13)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_14 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_14)
        constant_15 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_4, constant_15)
        floor_4 = ops.floor(add_6)
        constant_16 = ops.constant(-1.0, torch.float32)
        add_7 = ops.add(floor_4, constant_16)
        to_dtype = ops.to_dtype(add_7, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_17)
        set_indirect0 = self.set_indirect0(where)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1', get_index_5)
        constant_18 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_18)
        constant_19 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_5, constant_19)
        floor_5 = ops.floor(add_8)
        constant_20 = ops.constant(0.0, torch.float32)
        ge_2 = ops.ge(floor_5, constant_20)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1', get_index_6)
        constant_21 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_6, constant_21)
        constant_22 = ops.constant(227.5, torch.float32)
        add_9 = ops.add(mul_6, constant_22)
        floor_6 = ops.floor(add_9)
        constant_23 = ops.constant(456.0, torch.float32)
        lt_2 = ops.lt(floor_6, constant_23)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_24 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_7, constant_24)
        constant_25 = ops.constant(172.0, torch.float32)
        add_10 = ops.add(mul_7, constant_25)
        floor_7 = ops.floor(add_10)
        constant_26 = ops.constant(-1.0, torch.float32)
        add_11 = ops.add(floor_7, constant_26)
        constant_27 = ops.constant(0.0, torch.float32)
        ge_3 = ops.ge(add_11, constant_27)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_28 = ops.constant(172.5, torch.float32)
        mul_8 = ops.mul(load_8, constant_28)
        constant_29 = ops.constant(172.0, torch.float32)
        add_12 = ops.add(mul_8, constant_29)
        floor_8 = ops.floor(add_12)
        constant_30 = ops.constant(-1.0, torch.float32)
        add_13 = ops.add(floor_8, constant_30)
        constant_31 = ops.constant(345.0, torch.float32)
        lt_3 = ops.lt(add_13, constant_31)
        logical_and_3 = ops.logical_and(ge_3, lt_3)
        logical_and_4 = ops.logical_and(lt_2, logical_and_3)
        logical_and_5 = ops.logical_and(ge_2, logical_and_4)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf1', get_index_9)
        constant_32 = ops.constant(228.0, torch.float32)
        mul_9 = ops.mul(load_9, constant_32)
        constant_33 = ops.constant(227.5, torch.float32)
        add_14 = ops.add(mul_9, constant_33)
        floor_9 = ops.floor(add_14)
        to_dtype_1 = ops.to_dtype(floor_9, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        where_1 = ops.where(logical_and_5, to_dtype_1, constant_34)
        set_indirect1 = self.set_indirect1(where_1)
        get_index_10 = self.get_index('index2')
        load_10 = ops.load('arg0_1', get_index_10)
        get_index_11 = self.get_index('index3')
        store = ops.store('buf6', get_index_11, load_10, None)
        return store


buf7: SchedulerNode(ComputedBuffer)
buf7.writes = [MemoryDep('buf7', c0, {c0: 943920})]
buf7.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf6', c0, {c0: 943920})]
buf7.met_dependencies = []
buf7.users = [NodeUser(node=SchedulerNode(name='buf16'), can_inplace=True)]
buf7.group.device = cuda:0
buf7.group.iteration = (943920, 1)
buf7.sizes = ([2, 3, 157320], [])
class buf7_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    index2 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_2)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_3 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_3)
        constant_4 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_4)
        floor_1 = ops.floor(add_1)
        constant_5 = ops.constant(456.0, torch.float32)
        lt = ops.lt(floor_1, constant_5)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant_6 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_3, constant_6)
        constant_7 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_7)
        floor_2 = ops.floor(add_2)
        constant_8 = ops.constant(-1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_8)
        constant_9 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_9)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_10 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_4, constant_10)
        constant_11 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_11)
        floor_3 = ops.floor(add_4)
        constant_12 = ops.constant(-1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_12)
        constant_13 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_13)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_14 = ops.constant(1, torch.int64)
        constant_15 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_14, constant_15)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load, to_dtype)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_5, constant_17)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_18 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_6, constant_18)
        constant_19 = ops.constant(227.5, torch.float32)
        add_7 = ops.add(mul_6, constant_19)
        floor_4 = ops.floor(add_7)
        sub = ops.sub(add_6, floor_4)
        constant_20 = ops.constant(1.25, torch.float32)
        mul_7 = ops.mul(sub, constant_20)
        constant_21 = ops.constant(2.25, torch.float32)
        sub_1 = ops.sub(mul_7, constant_21)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_22 = ops.constant(228.0, torch.float32)
        mul_8 = ops.mul(load_7, constant_22)
        constant_23 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_8, constant_23)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_24 = ops.constant(228.0, torch.float32)
        mul_9 = ops.mul(load_8, constant_24)
        constant_25 = ops.constant(227.5, torch.float32)
        add_9 = ops.add(mul_9, constant_25)
        floor_5 = ops.floor(add_9)
        sub_2 = ops.sub(add_8, floor_5)
        mul_10 = ops.mul(sub_1, sub_2)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('buf1', get_index_9)
        constant_26 = ops.constant(228.0, torch.float32)
        mul_11 = ops.mul(load_9, constant_26)
        constant_27 = ops.constant(227.5, torch.float32)
        add_10 = ops.add(mul_11, constant_27)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('buf1', get_index_10)
        constant_28 = ops.constant(228.0, torch.float32)
        mul_12 = ops.mul(load_10, constant_28)
        constant_29 = ops.constant(227.5, torch.float32)
        add_11 = ops.add(mul_12, constant_29)
        floor_6 = ops.floor(add_11)
        sub_3 = ops.sub(add_10, floor_6)
        mul_13 = ops.mul(mul_10, sub_3)
        constant_30 = ops.constant(1.0, torch.float32)
        add_12 = ops.add(mul_13, constant_30)
        mul_14 = ops.mul(mul_4, add_12)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf7', get_index_11, mul_14, None)
        return store


buf8: SchedulerNode(ComputedBuffer)
buf8.writes = [MemoryDep('buf8', c0, {c0: 943920})]
buf8.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf8.met_dependencies = []
buf8.users = [NodeUser(node=SchedulerNode(name='buf10'), can_inplace=True)]
buf8.group.device = cuda:0
buf8.group.iteration = (943920, 1)
buf8.sizes = ([2, 3, 157320], [])
class buf8_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(-1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(-1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(172.0, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(-1.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf8', get_index_5, where, None)
        return store


buf9: SchedulerNode(ComputedBuffer)
buf9.writes = [MemoryDep('buf9', c0, {c0: 943920})]
buf9.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf9.met_dependencies = []
buf9.users = [NodeUser(node=SchedulerNode(name='buf10'), can_inplace=True)]
buf9.group.device = cuda:0
buf9.group.iteration = (943920, 1)
buf9.sizes = ([2, 3, 157320], [])
class buf9_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(-1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(-1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf9', get_index_5, where, None)
        return store


buf10: SchedulerNode(ComputedBuffer)
buf10.writes = [MemoryDep('buf10', c0, {c0: 943920})]
buf10.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf8', c0, {c0: 943920}),
        MemoryDep('buf9', c0, {c0: 943920})]
buf10.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp0) + 3*(tmp1) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf10.users = [NodeUser(node=SchedulerNode(name='buf11'), can_inplace=True)]
buf10.group.device = cuda:0
buf10.group.iteration = (943920, 1)
buf10.sizes = ([2, 3, 157320], [])
class buf10_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index2 = 314640*z0 + 2*z2
    index3 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf9', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_3, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf1', get_index_5)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_5, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(-1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('buf1', get_index_6)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(-1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_16 = ops.constant(1, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_16, constant_17)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load_2, to_dtype)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf10', get_index_7, mul_4, None)
        return store


buf11: SchedulerNode(ComputedBuffer)
buf11.writes = [MemoryDep('buf11', c0, {c0: 943920})]
buf11.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf10', c0, {c0: 943920})]
buf11.met_dependencies = []
buf11.users = [NodeUser(node=SchedulerNode(name='buf16'), can_inplace=True)]
buf11.group.device = cuda:0
buf11.group.iteration = (943920, 1)
buf11.sizes = ([2, 3, 157320], [])
class buf11_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_2 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_2)
        constant_3 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_1)
        sub = ops.sub(add, floor)
        constant_4 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_4, sub)
        constant_5 = ops.constant(1.25, torch.float32)
        mul_2 = ops.mul(sub_1, constant_5)
        constant_6 = ops.constant(2.25, torch.float32)
        sub_2 = ops.sub(mul_2, constant_6)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_7 = ops.constant(228.0, torch.float32)
        mul_3 = ops.mul(load_3, constant_7)
        constant_8 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_3, constant_8)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_9 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_9)
        constant_10 = ops.constant(227.5, torch.float32)
        add_3 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_3)
        sub_3 = ops.sub(add_2, floor_1)
        constant_11 = ops.constant(1.0, torch.float32)
        sub_4 = ops.sub(constant_11, sub_3)
        mul_5 = ops.mul(sub_2, sub_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_12 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_5, constant_12)
        constant_13 = ops.constant(227.5, torch.float32)
        add_4 = ops.add(mul_6, constant_13)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_14 = ops.constant(228.0, torch.float32)
        mul_7 = ops.mul(load_6, constant_14)
        constant_15 = ops.constant(227.5, torch.float32)
        add_5 = ops.add(mul_7, constant_15)
        floor_2 = ops.floor(add_5)
        sub_5 = ops.sub(add_4, floor_2)
        constant_16 = ops.constant(1.0, torch.float32)
        sub_6 = ops.sub(constant_16, sub_5)
        mul_8 = ops.mul(mul_5, sub_6)
        constant_17 = ops.constant(1.0, torch.float32)
        add_6 = ops.add(mul_8, constant_17)
        mul_9 = ops.mul(load, add_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf11', get_index_7, mul_9, None)
        return store


buf12: SchedulerNode(ComputedBuffer)
buf12.writes = [MemoryDep('buf12', c0, {c0: 943920})]
buf12.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf12.met_dependencies = []
buf12.users = [NodeUser(node=SchedulerNode(name='buf14'), can_inplace=True)]
buf12.group.device = cuda:0
buf12.group.iteration = (943920, 1)
buf12.sizes = ([2, 3, 157320], [])
class buf12_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(2.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(-1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(-1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(172.0, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(-1.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf12', get_index_5, where, None)
        return store


buf13: SchedulerNode(ComputedBuffer)
buf13.writes = [MemoryDep('buf13', c0, {c0: 943920})]
buf13.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf13.met_dependencies = []
buf13.users = [NodeUser(node=SchedulerNode(name='buf14'), can_inplace=True)]
buf13.group.device = cuda:0
buf13.group.iteration = (943920, 1)
buf13.sizes = ([2, 3, 157320], [])
class buf13_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(2.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(-1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(-1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(2.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf13', get_index_5, where, None)
        return store


buf14: SchedulerNode(ComputedBuffer)
buf14.writes = [MemoryDep('buf14', c0, {c0: 943920})]
buf14.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf12', c0, {c0: 943920}),
        MemoryDep('buf13', c0, {c0: 943920})]
buf14.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp0) + 3*(tmp1) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf14.users = [NodeUser(node=SchedulerNode(name='buf15'), can_inplace=True)]
buf14.group.device = cuda:0
buf14.group.iteration = (943920, 1)
buf14.sizes = ([2, 3, 157320], [])
class buf14_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index2 = 314640*z0 + 2*z2
    index3 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf13', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_3, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(2.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf1', get_index_5)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_5, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(-1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('buf1', get_index_6)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(-1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_16 = ops.constant(1, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_16, constant_17)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load_2, to_dtype)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf14', get_index_7, mul_4, None)
        return store


buf15: SchedulerNode(ComputedBuffer)
buf15.writes = [MemoryDep('buf15', c0, {c0: 943920})]
buf15.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf14', c0, {c0: 943920})]
buf15.met_dependencies = []
buf15.users = [NodeUser(node=SchedulerNode(name='buf16'), can_inplace=True)]
buf15.group.device = cuda:0
buf15.group.iteration = (943920, 1)
buf15.sizes = ([2, 3, 157320], [])
class buf15_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_2 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_2)
        constant_3 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_1)
        sub = ops.sub(add, floor)
        constant_4 = ops.constant(2.0, torch.float32)
        sub_1 = ops.sub(constant_4, sub)
        constant_5 = ops.constant(-0.75, torch.float32)
        mul_2 = ops.mul(sub_1, constant_5)
        constant_6 = ops.constant(-3.75, torch.float32)
        sub_2 = ops.sub(mul_2, constant_6)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_7 = ops.constant(228.0, torch.float32)
        mul_3 = ops.mul(load_3, constant_7)
        constant_8 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_3, constant_8)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_9 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_9)
        constant_10 = ops.constant(227.5, torch.float32)
        add_3 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_3)
        sub_3 = ops.sub(add_2, floor_1)
        constant_11 = ops.constant(2.0, torch.float32)
        sub_4 = ops.sub(constant_11, sub_3)
        mul_5 = ops.mul(sub_2, sub_4)
        constant_12 = ops.constant(-6.0, torch.float32)
        add_4 = ops.add(mul_5, constant_12)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_13 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_5, constant_13)
        constant_14 = ops.constant(227.5, torch.float32)
        add_5 = ops.add(mul_6, constant_14)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_15 = ops.constant(228.0, torch.float32)
        mul_7 = ops.mul(load_6, constant_15)
        constant_16 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_7, constant_16)
        floor_2 = ops.floor(add_6)
        sub_5 = ops.sub(add_5, floor_2)
        constant_17 = ops.constant(2.0, torch.float32)
        sub_6 = ops.sub(constant_17, sub_5)
        mul_8 = ops.mul(add_4, sub_6)
        constant_18 = ops.constant(-3.0, torch.float32)
        sub_7 = ops.sub(mul_8, constant_18)
        mul_9 = ops.mul(load, sub_7)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf15', get_index_7, mul_9, None)
        return store


buf16: SchedulerNode(ComputedBuffer)
buf16.writes = [MemoryDep('buf16', c0, {c0: 943920})]
buf16.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf11', c0, {c0: 943920}),
        MemoryDep('buf15', c0, {c0: 943920}),
        MemoryDep('buf5', c0, {c0: 943920}),
        MemoryDep('buf7', c0, {c0: 943920})]
buf16.met_dependencies = []
buf16.users = [NodeUser(node=SchedulerNode(name='buf62'), can_inplace=True)]
buf16.group.device = cuda:0
buf16.group.iteration = (943920, 1)
buf16.sizes = ([2, 3, 157320], [])
class buf16_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf7', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf11', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf15', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant = ops.constant(172.5, torch.float32)
        mul = ops.mul(load_4, constant)
        constant_1 = ops.constant(172.0, torch.float32)
        add_3 = ops.add(mul, constant_1)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_2 = ops.constant(172.5, torch.float32)
        mul_1 = ops.mul(load_5, constant_2)
        constant_3 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_4)
        sub = ops.sub(add_3, floor)
        constant_4 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(sub, constant_4)
        constant_5 = ops.constant(-0.75, torch.float32)
        mul_2 = ops.mul(add_5, constant_5)
        constant_6 = ops.constant(-3.75, torch.float32)
        sub_1 = ops.sub(mul_2, constant_6)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_7 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_7)
        constant_8 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_8)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_9 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_7, constant_9)
        constant_10 = ops.constant(172.0, torch.float32)
        add_7 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_7)
        sub_2 = ops.sub(add_6, floor_1)
        constant_11 = ops.constant(1.0, torch.float32)
        add_8 = ops.add(sub_2, constant_11)
        mul_5 = ops.mul(sub_1, add_8)
        constant_12 = ops.constant(-6.0, torch.float32)
        add_9 = ops.add(mul_5, constant_12)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_13 = ops.constant(172.5, torch.float32)
        mul_6 = ops.mul(load_8, constant_13)
        constant_14 = ops.constant(172.0, torch.float32)
        add_10 = ops.add(mul_6, constant_14)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('buf1', get_index_9)
        constant_15 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_9, constant_15)
        constant_16 = ops.constant(172.0, torch.float32)
        add_11 = ops.add(mul_7, constant_16)
        floor_2 = ops.floor(add_11)
        sub_3 = ops.sub(add_10, floor_2)
        constant_17 = ops.constant(1.0, torch.float32)
        add_12 = ops.add(sub_3, constant_17)
        mul_8 = ops.mul(add_9, add_12)
        constant_18 = ops.constant(-3.0, torch.float32)
        sub_4 = ops.sub(mul_8, constant_18)
        mul_9 = ops.mul(add_2, sub_4)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf16', get_index_10, mul_9, None)
        return store


buf17: SchedulerNode(ComputedBuffer)
buf17.writes = [MemoryDep('buf17', c0, {c0: 943920})]
buf17.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf17.met_dependencies = []
buf17.users = [NodeUser(node=SchedulerNode(name='buf19'), can_inplace=True)]
buf17.group.device = cuda:0
buf17.group.iteration = (943920, 1)
buf17.sizes = ([2, 3, 157320], [])
class buf17_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        sub = ops.sub(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(sub, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_1)
        constant_6 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(sub_1, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_2)
        constant_10 = ops.constant(0.0, torch.float32)
        add_3 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_4)
        constant_14 = ops.constant(0.0, torch.float32)
        add_5 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_6)
        constant_18 = ops.constant(0.0, torch.float32)
        add_7 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_7, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf17', get_index_5, where, None)
        return store


buf18: SchedulerNode(ComputedBuffer)
buf18.writes = [MemoryDep('buf18', c0, {c0: 943920})]
buf18.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf18.met_dependencies = []
buf18.users = [NodeUser(node=SchedulerNode(name='buf19'), can_inplace=True)]
buf18.group.device = cuda:0
buf18.group.iteration = (943920, 1)
buf18.sizes = ([2, 3, 157320], [])
class buf18_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        sub = ops.sub(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(sub, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_1)
        constant_6 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(sub_1, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_2)
        constant_10 = ops.constant(0.0, torch.float32)
        add_3 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_4)
        constant_14 = ops.constant(0.0, torch.float32)
        add_5 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_6)
        constant_18 = ops.constant(1.0, torch.float32)
        sub_2 = ops.sub(floor_4, constant_18)
        to_dtype = ops.to_dtype(sub_2, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf18', get_index_5, where, None)
        return store


buf19: SchedulerNode(ComputedBuffer)
buf19.writes = [MemoryDep('buf19', c0, {c0: 943920})]
buf19.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf17', c0, {c0: 943920}),
        MemoryDep('buf18', c0, {c0: 943920})]
buf19.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp0) + 3*(tmp1) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf19.users = [NodeUser(node=SchedulerNode(name='buf20'), can_inplace=True)]
buf19.group.device = cuda:0
buf19.group.iteration = (943920, 1)
buf19.sizes = ([2, 3, 157320], [])
class buf19_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index2 = 314640*z0 + 2*z2
    index3 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf18', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_3, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        sub = ops.sub(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(sub, constant_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_1)
        constant_6 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(sub_1, constant_7)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf1', get_index_5)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_5, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_2)
        constant_10 = ops.constant(0.0, torch.float32)
        add_3 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_11)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('buf1', get_index_6)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_4)
        constant_14 = ops.constant(0.0, torch.float32)
        add_5 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_16 = ops.constant(1, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_16, constant_17)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load_2, to_dtype)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf19', get_index_7, mul_4, None)
        return store


buf20: SchedulerNode(ComputedBuffer)
buf20.writes = [MemoryDep('buf20', c0, {c0: 943920})]
buf20.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf19', c0, {c0: 943920})]
buf20.met_dependencies = []
buf20.users = [NodeUser(node=SchedulerNode(name='buf31'), can_inplace=True)]
buf20.group.device = cuda:0
buf20.group.iteration = (943920, 1)
buf20.sizes = ([2, 3, 157320], [])
class buf20_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_2 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_2)
        constant_3 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_1)
        sub = ops.sub(add, floor)
        constant_4 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(sub, constant_4)
        constant_5 = ops.constant(-0.75, torch.float32)
        mul_2 = ops.mul(add_2, constant_5)
        constant_6 = ops.constant(-3.75, torch.float32)
        sub_1 = ops.sub(mul_2, constant_6)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_7 = ops.constant(228.0, torch.float32)
        mul_3 = ops.mul(load_3, constant_7)
        constant_8 = ops.constant(227.5, torch.float32)
        add_3 = ops.add(mul_3, constant_8)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_9 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_9)
        constant_10 = ops.constant(227.5, torch.float32)
        add_4 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_4)
        sub_2 = ops.sub(add_3, floor_1)
        constant_11 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(sub_2, constant_11)
        mul_5 = ops.mul(sub_1, add_5)
        constant_12 = ops.constant(-6.0, torch.float32)
        add_6 = ops.add(mul_5, constant_12)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_13 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_5, constant_13)
        constant_14 = ops.constant(227.5, torch.float32)
        add_7 = ops.add(mul_6, constant_14)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_15 = ops.constant(228.0, torch.float32)
        mul_7 = ops.mul(load_6, constant_15)
        constant_16 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_7, constant_16)
        floor_2 = ops.floor(add_8)
        sub_3 = ops.sub(add_7, floor_2)
        constant_17 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(sub_3, constant_17)
        mul_8 = ops.mul(add_6, add_9)
        constant_18 = ops.constant(-3.0, torch.float32)
        sub_4 = ops.sub(mul_8, constant_18)
        mul_9 = ops.mul(load, sub_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf20', get_index_7, mul_9, None)
        return store


buf21: SchedulerNode(ComputedBuffer)
buf21.writes = [MemoryDep('buf21', c0, {c0: 943920})]
buf21.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf21.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp49) + 3*(tmp97) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf21.users = [NodeUser(node=SchedulerNode(name='buf22'), can_inplace=True)]
buf21.group.device = cuda:0
buf21.group.iteration = (943920, 1)
buf21.sizes = ([2, 3, 157320], [])
class buf21_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index3 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_3 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_3)
        constant_4 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_4)
        floor_1 = ops.floor(add_1)
        constant_5 = ops.constant(456.0, torch.float32)
        lt = ops.lt(floor_1, constant_5)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_6 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_6)
        constant_7 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_7)
        floor_2 = ops.floor(add_2)
        constant_8 = ops.constant(0.0, torch.float32)
        add_3 = ops.add(floor_2, constant_8)
        constant_9 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_9)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_10 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_10)
        constant_11 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_11)
        floor_3 = ops.floor(add_4)
        constant_12 = ops.constant(0.0, torch.float32)
        add_5 = ops.add(floor_3, constant_12)
        constant_13 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_13)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_14 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_14)
        constant_15 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_4, constant_15)
        floor_4 = ops.floor(add_6)
        constant_16 = ops.constant(0.0, torch.float32)
        add_7 = ops.add(floor_4, constant_16)
        to_dtype = ops.to_dtype(add_7, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_17)
        set_indirect0 = self.set_indirect0(where)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1', get_index_5)
        constant_18 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_18)
        constant_19 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_5, constant_19)
        floor_5 = ops.floor(add_8)
        constant_20 = ops.constant(0.0, torch.float32)
        ge_2 = ops.ge(floor_5, constant_20)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1', get_index_6)
        constant_21 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_6, constant_21)
        constant_22 = ops.constant(227.5, torch.float32)
        add_9 = ops.add(mul_6, constant_22)
        floor_6 = ops.floor(add_9)
        constant_23 = ops.constant(456.0, torch.float32)
        lt_2 = ops.lt(floor_6, constant_23)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_24 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_7, constant_24)
        constant_25 = ops.constant(172.0, torch.float32)
        add_10 = ops.add(mul_7, constant_25)
        floor_7 = ops.floor(add_10)
        constant_26 = ops.constant(0.0, torch.float32)
        add_11 = ops.add(floor_7, constant_26)
        constant_27 = ops.constant(0.0, torch.float32)
        ge_3 = ops.ge(add_11, constant_27)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_28 = ops.constant(172.5, torch.float32)
        mul_8 = ops.mul(load_8, constant_28)
        constant_29 = ops.constant(172.0, torch.float32)
        add_12 = ops.add(mul_8, constant_29)
        floor_8 = ops.floor(add_12)
        constant_30 = ops.constant(0.0, torch.float32)
        add_13 = ops.add(floor_8, constant_30)
        constant_31 = ops.constant(345.0, torch.float32)
        lt_3 = ops.lt(add_13, constant_31)
        logical_and_3 = ops.logical_and(ge_3, lt_3)
        logical_and_4 = ops.logical_and(lt_2, logical_and_3)
        logical_and_5 = ops.logical_and(ge_2, logical_and_4)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf1', get_index_9)
        constant_32 = ops.constant(228.0, torch.float32)
        mul_9 = ops.mul(load_9, constant_32)
        constant_33 = ops.constant(227.5, torch.float32)
        add_14 = ops.add(mul_9, constant_33)
        floor_9 = ops.floor(add_14)
        to_dtype_1 = ops.to_dtype(floor_9, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        where_1 = ops.where(logical_and_5, to_dtype_1, constant_34)
        set_indirect1 = self.set_indirect1(where_1)
        get_index_10 = self.get_index('index2')
        load_10 = ops.load('arg0_1', get_index_10)
        get_index_11 = self.get_index('index3')
        store = ops.store('buf21', get_index_11, load_10, None)
        return store


buf22: SchedulerNode(ComputedBuffer)
buf22.writes = [MemoryDep('buf22', c0, {c0: 943920})]
buf22.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf21', c0, {c0: 943920})]
buf22.met_dependencies = []
buf22.users = [NodeUser(node=SchedulerNode(name='buf31'), can_inplace=True)]
buf22.group.device = cuda:0
buf22.group.iteration = (943920, 1)
buf22.sizes = ([2, 3, 157320], [])
class buf22_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    index2 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_2)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_3 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_3)
        constant_4 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_4)
        floor_1 = ops.floor(add_1)
        constant_5 = ops.constant(456.0, torch.float32)
        lt = ops.lt(floor_1, constant_5)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant_6 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_3, constant_6)
        constant_7 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_7)
        floor_2 = ops.floor(add_2)
        constant_8 = ops.constant(0.0, torch.float32)
        add_3 = ops.add(floor_2, constant_8)
        constant_9 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_9)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_10 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_4, constant_10)
        constant_11 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_11)
        floor_3 = ops.floor(add_4)
        constant_12 = ops.constant(0.0, torch.float32)
        add_5 = ops.add(floor_3, constant_12)
        constant_13 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_13)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_14 = ops.constant(1, torch.int64)
        constant_15 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_14, constant_15)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load, to_dtype)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_5, constant_17)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_18 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_6, constant_18)
        constant_19 = ops.constant(227.5, torch.float32)
        add_7 = ops.add(mul_6, constant_19)
        floor_4 = ops.floor(add_7)
        sub = ops.sub(add_6, floor_4)
        constant_20 = ops.constant(1.25, torch.float32)
        mul_7 = ops.mul(sub, constant_20)
        constant_21 = ops.constant(2.25, torch.float32)
        sub_1 = ops.sub(mul_7, constant_21)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_22 = ops.constant(228.0, torch.float32)
        mul_8 = ops.mul(load_7, constant_22)
        constant_23 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_8, constant_23)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_24 = ops.constant(228.0, torch.float32)
        mul_9 = ops.mul(load_8, constant_24)
        constant_25 = ops.constant(227.5, torch.float32)
        add_9 = ops.add(mul_9, constant_25)
        floor_5 = ops.floor(add_9)
        sub_2 = ops.sub(add_8, floor_5)
        mul_10 = ops.mul(sub_1, sub_2)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('buf1', get_index_9)
        constant_26 = ops.constant(228.0, torch.float32)
        mul_11 = ops.mul(load_9, constant_26)
        constant_27 = ops.constant(227.5, torch.float32)
        add_10 = ops.add(mul_11, constant_27)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('buf1', get_index_10)
        constant_28 = ops.constant(228.0, torch.float32)
        mul_12 = ops.mul(load_10, constant_28)
        constant_29 = ops.constant(227.5, torch.float32)
        add_11 = ops.add(mul_12, constant_29)
        floor_6 = ops.floor(add_11)
        sub_3 = ops.sub(add_10, floor_6)
        mul_13 = ops.mul(mul_10, sub_3)
        constant_30 = ops.constant(1.0, torch.float32)
        add_12 = ops.add(mul_13, constant_30)
        mul_14 = ops.mul(mul_4, add_12)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf22', get_index_11, mul_14, None)
        return store


buf23: SchedulerNode(ComputedBuffer)
buf23.writes = [MemoryDep('buf23', c0, {c0: 943920})]
buf23.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf23.met_dependencies = []
buf23.users = [NodeUser(node=SchedulerNode(name='buf25'), can_inplace=True)]
buf23.group.device = cuda:0
buf23.group.iteration = (943920, 1)
buf23.sizes = ([2, 3, 157320], [])
class buf23_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(0.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(0.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(172.0, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(0.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf23', get_index_5, where, None)
        return store


buf24: SchedulerNode(ComputedBuffer)
buf24.writes = [MemoryDep('buf24', c0, {c0: 943920})]
buf24.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf24.met_dependencies = []
buf24.users = [NodeUser(node=SchedulerNode(name='buf25'), can_inplace=True)]
buf24.group.device = cuda:0
buf24.group.iteration = (943920, 1)
buf24.sizes = ([2, 3, 157320], [])
class buf24_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(0.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(0.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf24', get_index_5, where, None)
        return store


buf25: SchedulerNode(ComputedBuffer)
buf25.writes = [MemoryDep('buf25', c0, {c0: 943920})]
buf25.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf23', c0, {c0: 943920}),
        MemoryDep('buf24', c0, {c0: 943920})]
buf25.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp0) + 3*(tmp1) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf25.users = [NodeUser(node=SchedulerNode(name='buf26'), can_inplace=True)]
buf25.group.device = cuda:0
buf25.group.iteration = (943920, 1)
buf25.sizes = ([2, 3, 157320], [])
class buf25_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index2 = 314640*z0 + 2*z2
    index3 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_3, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf1', get_index_5)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_5, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(0.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('buf1', get_index_6)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(0.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_16 = ops.constant(1, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_16, constant_17)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load_2, to_dtype)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf25', get_index_7, mul_4, None)
        return store


buf26: SchedulerNode(ComputedBuffer)
buf26.writes = [MemoryDep('buf26', c0, {c0: 943920})]
buf26.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf25', c0, {c0: 943920})]
buf26.met_dependencies = []
buf26.users = [NodeUser(node=SchedulerNode(name='buf31'), can_inplace=True)]
buf26.group.device = cuda:0
buf26.group.iteration = (943920, 1)
buf26.sizes = ([2, 3, 157320], [])
class buf26_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_2 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_2)
        constant_3 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_1)
        sub = ops.sub(add, floor)
        constant_4 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_4, sub)
        constant_5 = ops.constant(1.25, torch.float32)
        mul_2 = ops.mul(sub_1, constant_5)
        constant_6 = ops.constant(2.25, torch.float32)
        sub_2 = ops.sub(mul_2, constant_6)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_7 = ops.constant(228.0, torch.float32)
        mul_3 = ops.mul(load_3, constant_7)
        constant_8 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_3, constant_8)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_9 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_9)
        constant_10 = ops.constant(227.5, torch.float32)
        add_3 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_3)
        sub_3 = ops.sub(add_2, floor_1)
        constant_11 = ops.constant(1.0, torch.float32)
        sub_4 = ops.sub(constant_11, sub_3)
        mul_5 = ops.mul(sub_2, sub_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_12 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_5, constant_12)
        constant_13 = ops.constant(227.5, torch.float32)
        add_4 = ops.add(mul_6, constant_13)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_14 = ops.constant(228.0, torch.float32)
        mul_7 = ops.mul(load_6, constant_14)
        constant_15 = ops.constant(227.5, torch.float32)
        add_5 = ops.add(mul_7, constant_15)
        floor_2 = ops.floor(add_5)
        sub_5 = ops.sub(add_4, floor_2)
        constant_16 = ops.constant(1.0, torch.float32)
        sub_6 = ops.sub(constant_16, sub_5)
        mul_8 = ops.mul(mul_5, sub_6)
        constant_17 = ops.constant(1.0, torch.float32)
        add_6 = ops.add(mul_8, constant_17)
        mul_9 = ops.mul(load, add_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf26', get_index_7, mul_9, None)
        return store


buf27: SchedulerNode(ComputedBuffer)
buf27.writes = [MemoryDep('buf27', c0, {c0: 943920})]
buf27.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf27.met_dependencies = []
buf27.users = [NodeUser(node=SchedulerNode(name='buf29'), can_inplace=True)]
buf27.group.device = cuda:0
buf27.group.iteration = (943920, 1)
buf27.sizes = ([2, 3, 157320], [])
class buf27_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(2.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(0.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(0.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(172.0, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(0.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf27', get_index_5, where, None)
        return store


buf28: SchedulerNode(ComputedBuffer)
buf28.writes = [MemoryDep('buf28', c0, {c0: 943920})]
buf28.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf28.met_dependencies = []
buf28.users = [NodeUser(node=SchedulerNode(name='buf29'), can_inplace=True)]
buf28.group.device = cuda:0
buf28.group.iteration = (943920, 1)
buf28.sizes = ([2, 3, 157320], [])
class buf28_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(2.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(0.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(0.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(2.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf28', get_index_5, where, None)
        return store


buf29: SchedulerNode(ComputedBuffer)
buf29.writes = [MemoryDep('buf29', c0, {c0: 943920})]
buf29.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf27', c0, {c0: 943920}),
        MemoryDep('buf28', c0, {c0: 943920})]
buf29.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp0) + 3*(tmp1) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf29.users = [NodeUser(node=SchedulerNode(name='buf30'), can_inplace=True)]
buf29.group.device = cuda:0
buf29.group.iteration = (943920, 1)
buf29.sizes = ([2, 3, 157320], [])
class buf29_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index2 = 314640*z0 + 2*z2
    index3 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf28', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_3, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(2.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf1', get_index_5)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_5, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(0.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('buf1', get_index_6)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(0.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_16 = ops.constant(1, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_16, constant_17)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load_2, to_dtype)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf29', get_index_7, mul_4, None)
        return store


buf30: SchedulerNode(ComputedBuffer)
buf30.writes = [MemoryDep('buf30', c0, {c0: 943920})]
buf30.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf29', c0, {c0: 943920})]
buf30.met_dependencies = []
buf30.users = [NodeUser(node=SchedulerNode(name='buf31'), can_inplace=True)]
buf30.group.device = cuda:0
buf30.group.iteration = (943920, 1)
buf30.sizes = ([2, 3, 157320], [])
class buf30_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_2 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_2)
        constant_3 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_1)
        sub = ops.sub(add, floor)
        constant_4 = ops.constant(2.0, torch.float32)
        sub_1 = ops.sub(constant_4, sub)
        constant_5 = ops.constant(-0.75, torch.float32)
        mul_2 = ops.mul(sub_1, constant_5)
        constant_6 = ops.constant(-3.75, torch.float32)
        sub_2 = ops.sub(mul_2, constant_6)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_7 = ops.constant(228.0, torch.float32)
        mul_3 = ops.mul(load_3, constant_7)
        constant_8 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_3, constant_8)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_9 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_9)
        constant_10 = ops.constant(227.5, torch.float32)
        add_3 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_3)
        sub_3 = ops.sub(add_2, floor_1)
        constant_11 = ops.constant(2.0, torch.float32)
        sub_4 = ops.sub(constant_11, sub_3)
        mul_5 = ops.mul(sub_2, sub_4)
        constant_12 = ops.constant(-6.0, torch.float32)
        add_4 = ops.add(mul_5, constant_12)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_13 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_5, constant_13)
        constant_14 = ops.constant(227.5, torch.float32)
        add_5 = ops.add(mul_6, constant_14)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_15 = ops.constant(228.0, torch.float32)
        mul_7 = ops.mul(load_6, constant_15)
        constant_16 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_7, constant_16)
        floor_2 = ops.floor(add_6)
        sub_5 = ops.sub(add_5, floor_2)
        constant_17 = ops.constant(2.0, torch.float32)
        sub_6 = ops.sub(constant_17, sub_5)
        mul_8 = ops.mul(add_4, sub_6)
        constant_18 = ops.constant(-3.0, torch.float32)
        sub_7 = ops.sub(mul_8, constant_18)
        mul_9 = ops.mul(load, sub_7)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf30', get_index_7, mul_9, None)
        return store


buf31: SchedulerNode(ComputedBuffer)
buf31.writes = [MemoryDep('buf31', c0, {c0: 943920})]
buf31.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf20', c0, {c0: 943920}),
        MemoryDep('buf22', c0, {c0: 943920}),
        MemoryDep('buf26', c0, {c0: 943920}),
        MemoryDep('buf30', c0, {c0: 943920})]
buf31.met_dependencies = []
buf31.users = [NodeUser(node=SchedulerNode(name='buf62'), can_inplace=True)]
buf31.group.device = cuda:0
buf31.group.iteration = (943920, 1)
buf31.sizes = ([2, 3, 157320], [])
class buf31_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf26', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf30', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant = ops.constant(172.5, torch.float32)
        mul = ops.mul(load_4, constant)
        constant_1 = ops.constant(172.0, torch.float32)
        add_3 = ops.add(mul, constant_1)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_2 = ops.constant(172.5, torch.float32)
        mul_1 = ops.mul(load_5, constant_2)
        constant_3 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_4)
        sub = ops.sub(add_3, floor)
        constant_4 = ops.constant(1.25, torch.float32)
        mul_2 = ops.mul(sub, constant_4)
        constant_5 = ops.constant(2.25, torch.float32)
        sub_1 = ops.sub(mul_2, constant_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_6 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_6)
        constant_7 = ops.constant(172.0, torch.float32)
        add_5 = ops.add(mul_3, constant_7)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_7, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_4, constant_9)
        floor_1 = ops.floor(add_6)
        sub_2 = ops.sub(add_5, floor_1)
        mul_5 = ops.mul(sub_1, sub_2)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_10 = ops.constant(172.5, torch.float32)
        mul_6 = ops.mul(load_8, constant_10)
        constant_11 = ops.constant(172.0, torch.float32)
        add_7 = ops.add(mul_6, constant_11)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('buf1', get_index_9)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_9, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_8 = ops.add(mul_7, constant_13)
        floor_2 = ops.floor(add_8)
        sub_3 = ops.sub(add_7, floor_2)
        mul_8 = ops.mul(mul_5, sub_3)
        constant_14 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(mul_8, constant_14)
        mul_9 = ops.mul(add_2, add_9)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf31', get_index_10, mul_9, None)
        return store


buf32: SchedulerNode(ComputedBuffer)
buf32.writes = [MemoryDep('buf32', c0, {c0: 943920})]
buf32.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf32.met_dependencies = []
buf32.users = [NodeUser(node=SchedulerNode(name='buf34'), can_inplace=True)]
buf32.group.device = cuda:0
buf32.group.iteration = (943920, 1)
buf32.sizes = ([2, 3, 157320], [])
class buf32_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        sub = ops.sub(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(sub, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_1)
        constant_6 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(sub_1, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_2)
        constant_10 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_4)
        constant_14 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_6)
        constant_18 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_7, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf32', get_index_5, where, None)
        return store


buf33: SchedulerNode(ComputedBuffer)
buf33.writes = [MemoryDep('buf33', c0, {c0: 943920})]
buf33.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf33.met_dependencies = []
buf33.users = [NodeUser(node=SchedulerNode(name='buf34'), can_inplace=True)]
buf33.group.device = cuda:0
buf33.group.iteration = (943920, 1)
buf33.sizes = ([2, 3, 157320], [])
class buf33_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        sub = ops.sub(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(sub, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_1)
        constant_6 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(sub_1, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_2)
        constant_10 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_4)
        constant_14 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_6)
        constant_18 = ops.constant(1.0, torch.float32)
        sub_2 = ops.sub(floor_4, constant_18)
        to_dtype = ops.to_dtype(sub_2, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf33', get_index_5, where, None)
        return store


buf34: SchedulerNode(ComputedBuffer)
buf34.writes = [MemoryDep('buf34', c0, {c0: 943920})]
buf34.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf32', c0, {c0: 943920}),
        MemoryDep('buf33', c0, {c0: 943920})]
buf34.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp0) + 3*(tmp1) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf34.users = [NodeUser(node=SchedulerNode(name='buf35'), can_inplace=True)]
buf34.group.device = cuda:0
buf34.group.iteration = (943920, 1)
buf34.sizes = ([2, 3, 157320], [])
class buf34_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index2 = 314640*z0 + 2*z2
    index3 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf33', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_3, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        sub = ops.sub(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(sub, constant_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_1)
        constant_6 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(sub_1, constant_7)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf1', get_index_5)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_5, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_2)
        constant_10 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_11)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('buf1', get_index_6)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_4)
        constant_14 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_16 = ops.constant(1, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_16, constant_17)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load_2, to_dtype)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf34', get_index_7, mul_4, None)
        return store


buf35: SchedulerNode(ComputedBuffer)
buf35.writes = [MemoryDep('buf35', c0, {c0: 943920})]
buf35.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf34', c0, {c0: 943920})]
buf35.met_dependencies = []
buf35.users = [NodeUser(node=SchedulerNode(name='buf46'), can_inplace=True)]
buf35.group.device = cuda:0
buf35.group.iteration = (943920, 1)
buf35.sizes = ([2, 3, 157320], [])
class buf35_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_2 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_2)
        constant_3 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_1)
        sub = ops.sub(add, floor)
        constant_4 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(sub, constant_4)
        constant_5 = ops.constant(-0.75, torch.float32)
        mul_2 = ops.mul(add_2, constant_5)
        constant_6 = ops.constant(-3.75, torch.float32)
        sub_1 = ops.sub(mul_2, constant_6)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_7 = ops.constant(228.0, torch.float32)
        mul_3 = ops.mul(load_3, constant_7)
        constant_8 = ops.constant(227.5, torch.float32)
        add_3 = ops.add(mul_3, constant_8)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_9 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_9)
        constant_10 = ops.constant(227.5, torch.float32)
        add_4 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_4)
        sub_2 = ops.sub(add_3, floor_1)
        constant_11 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(sub_2, constant_11)
        mul_5 = ops.mul(sub_1, add_5)
        constant_12 = ops.constant(-6.0, torch.float32)
        add_6 = ops.add(mul_5, constant_12)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_13 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_5, constant_13)
        constant_14 = ops.constant(227.5, torch.float32)
        add_7 = ops.add(mul_6, constant_14)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_15 = ops.constant(228.0, torch.float32)
        mul_7 = ops.mul(load_6, constant_15)
        constant_16 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_7, constant_16)
        floor_2 = ops.floor(add_8)
        sub_3 = ops.sub(add_7, floor_2)
        constant_17 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(sub_3, constant_17)
        mul_8 = ops.mul(add_6, add_9)
        constant_18 = ops.constant(-3.0, torch.float32)
        sub_4 = ops.sub(mul_8, constant_18)
        mul_9 = ops.mul(load, sub_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf35', get_index_7, mul_9, None)
        return store


buf36: SchedulerNode(ComputedBuffer)
buf36.writes = [MemoryDep('buf36', c0, {c0: 943920})]
buf36.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf36.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp49) + 3*(tmp97) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf36.users = [NodeUser(node=SchedulerNode(name='buf37'), can_inplace=True)]
buf36.group.device = cuda:0
buf36.group.iteration = (943920, 1)
buf36.sizes = ([2, 3, 157320], [])
class buf36_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index3 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_3 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_3)
        constant_4 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_4)
        floor_1 = ops.floor(add_1)
        constant_5 = ops.constant(456.0, torch.float32)
        lt = ops.lt(floor_1, constant_5)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_6 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_6)
        constant_7 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_7)
        floor_2 = ops.floor(add_2)
        constant_8 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_8)
        constant_9 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_9)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_10 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_10)
        constant_11 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_11)
        floor_3 = ops.floor(add_4)
        constant_12 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_12)
        constant_13 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_13)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_14 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_14)
        constant_15 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_4, constant_15)
        floor_4 = ops.floor(add_6)
        constant_16 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_4, constant_16)
        to_dtype = ops.to_dtype(add_7, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_17)
        set_indirect0 = self.set_indirect0(where)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1', get_index_5)
        constant_18 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_18)
        constant_19 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_5, constant_19)
        floor_5 = ops.floor(add_8)
        constant_20 = ops.constant(0.0, torch.float32)
        ge_2 = ops.ge(floor_5, constant_20)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1', get_index_6)
        constant_21 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_6, constant_21)
        constant_22 = ops.constant(227.5, torch.float32)
        add_9 = ops.add(mul_6, constant_22)
        floor_6 = ops.floor(add_9)
        constant_23 = ops.constant(456.0, torch.float32)
        lt_2 = ops.lt(floor_6, constant_23)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_24 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_7, constant_24)
        constant_25 = ops.constant(172.0, torch.float32)
        add_10 = ops.add(mul_7, constant_25)
        floor_7 = ops.floor(add_10)
        constant_26 = ops.constant(1.0, torch.float32)
        add_11 = ops.add(floor_7, constant_26)
        constant_27 = ops.constant(0.0, torch.float32)
        ge_3 = ops.ge(add_11, constant_27)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_28 = ops.constant(172.5, torch.float32)
        mul_8 = ops.mul(load_8, constant_28)
        constant_29 = ops.constant(172.0, torch.float32)
        add_12 = ops.add(mul_8, constant_29)
        floor_8 = ops.floor(add_12)
        constant_30 = ops.constant(1.0, torch.float32)
        add_13 = ops.add(floor_8, constant_30)
        constant_31 = ops.constant(345.0, torch.float32)
        lt_3 = ops.lt(add_13, constant_31)
        logical_and_3 = ops.logical_and(ge_3, lt_3)
        logical_and_4 = ops.logical_and(lt_2, logical_and_3)
        logical_and_5 = ops.logical_and(ge_2, logical_and_4)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf1', get_index_9)
        constant_32 = ops.constant(228.0, torch.float32)
        mul_9 = ops.mul(load_9, constant_32)
        constant_33 = ops.constant(227.5, torch.float32)
        add_14 = ops.add(mul_9, constant_33)
        floor_9 = ops.floor(add_14)
        to_dtype_1 = ops.to_dtype(floor_9, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        where_1 = ops.where(logical_and_5, to_dtype_1, constant_34)
        set_indirect1 = self.set_indirect1(where_1)
        get_index_10 = self.get_index('index2')
        load_10 = ops.load('arg0_1', get_index_10)
        get_index_11 = self.get_index('index3')
        store = ops.store('buf36', get_index_11, load_10, None)
        return store


buf37: SchedulerNode(ComputedBuffer)
buf37.writes = [MemoryDep('buf37', c0, {c0: 943920})]
buf37.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf36', c0, {c0: 943920})]
buf37.met_dependencies = []
buf37.users = [NodeUser(node=SchedulerNode(name='buf46'), can_inplace=True)]
buf37.group.device = cuda:0
buf37.group.iteration = (943920, 1)
buf37.sizes = ([2, 3, 157320], [])
class buf37_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    index2 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_2)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_3 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_3)
        constant_4 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_4)
        floor_1 = ops.floor(add_1)
        constant_5 = ops.constant(456.0, torch.float32)
        lt = ops.lt(floor_1, constant_5)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant_6 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_3, constant_6)
        constant_7 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_7)
        floor_2 = ops.floor(add_2)
        constant_8 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_8)
        constant_9 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_9)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_10 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_4, constant_10)
        constant_11 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_11)
        floor_3 = ops.floor(add_4)
        constant_12 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_12)
        constant_13 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_13)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_14 = ops.constant(1, torch.int64)
        constant_15 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_14, constant_15)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load, to_dtype)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_5, constant_17)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_18 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_6, constant_18)
        constant_19 = ops.constant(227.5, torch.float32)
        add_7 = ops.add(mul_6, constant_19)
        floor_4 = ops.floor(add_7)
        sub = ops.sub(add_6, floor_4)
        constant_20 = ops.constant(1.25, torch.float32)
        mul_7 = ops.mul(sub, constant_20)
        constant_21 = ops.constant(2.25, torch.float32)
        sub_1 = ops.sub(mul_7, constant_21)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_22 = ops.constant(228.0, torch.float32)
        mul_8 = ops.mul(load_7, constant_22)
        constant_23 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_8, constant_23)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_24 = ops.constant(228.0, torch.float32)
        mul_9 = ops.mul(load_8, constant_24)
        constant_25 = ops.constant(227.5, torch.float32)
        add_9 = ops.add(mul_9, constant_25)
        floor_5 = ops.floor(add_9)
        sub_2 = ops.sub(add_8, floor_5)
        mul_10 = ops.mul(sub_1, sub_2)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('buf1', get_index_9)
        constant_26 = ops.constant(228.0, torch.float32)
        mul_11 = ops.mul(load_9, constant_26)
        constant_27 = ops.constant(227.5, torch.float32)
        add_10 = ops.add(mul_11, constant_27)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('buf1', get_index_10)
        constant_28 = ops.constant(228.0, torch.float32)
        mul_12 = ops.mul(load_10, constant_28)
        constant_29 = ops.constant(227.5, torch.float32)
        add_11 = ops.add(mul_12, constant_29)
        floor_6 = ops.floor(add_11)
        sub_3 = ops.sub(add_10, floor_6)
        mul_13 = ops.mul(mul_10, sub_3)
        constant_30 = ops.constant(1.0, torch.float32)
        add_12 = ops.add(mul_13, constant_30)
        mul_14 = ops.mul(mul_4, add_12)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf37', get_index_11, mul_14, None)
        return store


buf38: SchedulerNode(ComputedBuffer)
buf38.writes = [MemoryDep('buf38', c0, {c0: 943920})]
buf38.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf38.met_dependencies = []
buf38.users = [NodeUser(node=SchedulerNode(name='buf40'), can_inplace=True)]
buf38.group.device = cuda:0
buf38.group.iteration = (943920, 1)
buf38.sizes = ([2, 3, 157320], [])
class buf38_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(172.0, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf38', get_index_5, where, None)
        return store


buf39: SchedulerNode(ComputedBuffer)
buf39.writes = [MemoryDep('buf39', c0, {c0: 943920})]
buf39.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf39.met_dependencies = []
buf39.users = [NodeUser(node=SchedulerNode(name='buf40'), can_inplace=True)]
buf39.group.device = cuda:0
buf39.group.iteration = (943920, 1)
buf39.sizes = ([2, 3, 157320], [])
class buf39_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf39', get_index_5, where, None)
        return store


buf40: SchedulerNode(ComputedBuffer)
buf40.writes = [MemoryDep('buf40', c0, {c0: 943920})]
buf40.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf38', c0, {c0: 943920}),
        MemoryDep('buf39', c0, {c0: 943920})]
buf40.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp0) + 3*(tmp1) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf40.users = [NodeUser(node=SchedulerNode(name='buf41'), can_inplace=True)]
buf40.group.device = cuda:0
buf40.group.iteration = (943920, 1)
buf40.sizes = ([2, 3, 157320], [])
class buf40_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index2 = 314640*z0 + 2*z2
    index3 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_3, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf1', get_index_5)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_5, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('buf1', get_index_6)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_16 = ops.constant(1, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_16, constant_17)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load_2, to_dtype)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf40', get_index_7, mul_4, None)
        return store


buf41: SchedulerNode(ComputedBuffer)
buf41.writes = [MemoryDep('buf41', c0, {c0: 943920})]
buf41.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf40', c0, {c0: 943920})]
buf41.met_dependencies = []
buf41.users = [NodeUser(node=SchedulerNode(name='buf46'), can_inplace=True)]
buf41.group.device = cuda:0
buf41.group.iteration = (943920, 1)
buf41.sizes = ([2, 3, 157320], [])
class buf41_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_2 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_2)
        constant_3 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_1)
        sub = ops.sub(add, floor)
        constant_4 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_4, sub)
        constant_5 = ops.constant(1.25, torch.float32)
        mul_2 = ops.mul(sub_1, constant_5)
        constant_6 = ops.constant(2.25, torch.float32)
        sub_2 = ops.sub(mul_2, constant_6)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_7 = ops.constant(228.0, torch.float32)
        mul_3 = ops.mul(load_3, constant_7)
        constant_8 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_3, constant_8)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_9 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_9)
        constant_10 = ops.constant(227.5, torch.float32)
        add_3 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_3)
        sub_3 = ops.sub(add_2, floor_1)
        constant_11 = ops.constant(1.0, torch.float32)
        sub_4 = ops.sub(constant_11, sub_3)
        mul_5 = ops.mul(sub_2, sub_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_12 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_5, constant_12)
        constant_13 = ops.constant(227.5, torch.float32)
        add_4 = ops.add(mul_6, constant_13)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_14 = ops.constant(228.0, torch.float32)
        mul_7 = ops.mul(load_6, constant_14)
        constant_15 = ops.constant(227.5, torch.float32)
        add_5 = ops.add(mul_7, constant_15)
        floor_2 = ops.floor(add_5)
        sub_5 = ops.sub(add_4, floor_2)
        constant_16 = ops.constant(1.0, torch.float32)
        sub_6 = ops.sub(constant_16, sub_5)
        mul_8 = ops.mul(mul_5, sub_6)
        constant_17 = ops.constant(1.0, torch.float32)
        add_6 = ops.add(mul_8, constant_17)
        mul_9 = ops.mul(load, add_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf41', get_index_7, mul_9, None)
        return store


buf42: SchedulerNode(ComputedBuffer)
buf42.writes = [MemoryDep('buf42', c0, {c0: 943920})]
buf42.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf42.met_dependencies = []
buf42.users = [NodeUser(node=SchedulerNode(name='buf44'), can_inplace=True)]
buf42.group.device = cuda:0
buf42.group.iteration = (943920, 1)
buf42.sizes = ([2, 3, 157320], [])
class buf42_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(2.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(172.0, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf42', get_index_5, where, None)
        return store


buf43: SchedulerNode(ComputedBuffer)
buf43.writes = [MemoryDep('buf43', c0, {c0: 943920})]
buf43.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf43.met_dependencies = []
buf43.users = [NodeUser(node=SchedulerNode(name='buf44'), can_inplace=True)]
buf43.group.device = cuda:0
buf43.group.iteration = (943920, 1)
buf43.sizes = ([2, 3, 157320], [])
class buf43_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(2.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(2.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf43', get_index_5, where, None)
        return store


buf44: SchedulerNode(ComputedBuffer)
buf44.writes = [MemoryDep('buf44', c0, {c0: 943920})]
buf44.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf42', c0, {c0: 943920}),
        MemoryDep('buf43', c0, {c0: 943920})]
buf44.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp0) + 3*(tmp1) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf44.users = [NodeUser(node=SchedulerNode(name='buf45'), can_inplace=True)]
buf44.group.device = cuda:0
buf44.group.iteration = (943920, 1)
buf44.sizes = ([2, 3, 157320], [])
class buf44_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index2 = 314640*z0 + 2*z2
    index3 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_3, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(2.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf1', get_index_5)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_5, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('buf1', get_index_6)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_16 = ops.constant(1, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_16, constant_17)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load_2, to_dtype)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf44', get_index_7, mul_4, None)
        return store


buf45: SchedulerNode(ComputedBuffer)
buf45.writes = [MemoryDep('buf45', c0, {c0: 943920})]
buf45.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf44', c0, {c0: 943920})]
buf45.met_dependencies = []
buf45.users = [NodeUser(node=SchedulerNode(name='buf46'), can_inplace=True)]
buf45.group.device = cuda:0
buf45.group.iteration = (943920, 1)
buf45.sizes = ([2, 3, 157320], [])
class buf45_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_2 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_2)
        constant_3 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_1)
        sub = ops.sub(add, floor)
        constant_4 = ops.constant(2.0, torch.float32)
        sub_1 = ops.sub(constant_4, sub)
        constant_5 = ops.constant(-0.75, torch.float32)
        mul_2 = ops.mul(sub_1, constant_5)
        constant_6 = ops.constant(-3.75, torch.float32)
        sub_2 = ops.sub(mul_2, constant_6)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_7 = ops.constant(228.0, torch.float32)
        mul_3 = ops.mul(load_3, constant_7)
        constant_8 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_3, constant_8)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_9 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_9)
        constant_10 = ops.constant(227.5, torch.float32)
        add_3 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_3)
        sub_3 = ops.sub(add_2, floor_1)
        constant_11 = ops.constant(2.0, torch.float32)
        sub_4 = ops.sub(constant_11, sub_3)
        mul_5 = ops.mul(sub_2, sub_4)
        constant_12 = ops.constant(-6.0, torch.float32)
        add_4 = ops.add(mul_5, constant_12)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_13 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_5, constant_13)
        constant_14 = ops.constant(227.5, torch.float32)
        add_5 = ops.add(mul_6, constant_14)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_15 = ops.constant(228.0, torch.float32)
        mul_7 = ops.mul(load_6, constant_15)
        constant_16 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_7, constant_16)
        floor_2 = ops.floor(add_6)
        sub_5 = ops.sub(add_5, floor_2)
        constant_17 = ops.constant(2.0, torch.float32)
        sub_6 = ops.sub(constant_17, sub_5)
        mul_8 = ops.mul(add_4, sub_6)
        constant_18 = ops.constant(-3.0, torch.float32)
        sub_7 = ops.sub(mul_8, constant_18)
        mul_9 = ops.mul(load, sub_7)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf45', get_index_7, mul_9, None)
        return store


buf46: SchedulerNode(ComputedBuffer)
buf46.writes = [MemoryDep('buf46', c0, {c0: 943920})]
buf46.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf35', c0, {c0: 943920}),
        MemoryDep('buf37', c0, {c0: 943920}),
        MemoryDep('buf41', c0, {c0: 943920}),
        MemoryDep('buf45', c0, {c0: 943920})]
buf46.met_dependencies = []
buf46.users = [NodeUser(node=SchedulerNode(name='buf62'), can_inplace=True)]
buf46.group.device = cuda:0
buf46.group.iteration = (943920, 1)
buf46.sizes = ([2, 3, 157320], [])
class buf46_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf41', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf45', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant = ops.constant(172.5, torch.float32)
        mul = ops.mul(load_4, constant)
        constant_1 = ops.constant(172.0, torch.float32)
        add_3 = ops.add(mul, constant_1)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_2 = ops.constant(172.5, torch.float32)
        mul_1 = ops.mul(load_5, constant_2)
        constant_3 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_4)
        sub = ops.sub(add_3, floor)
        constant_4 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_4, sub)
        constant_5 = ops.constant(1.25, torch.float32)
        mul_2 = ops.mul(sub_1, constant_5)
        constant_6 = ops.constant(2.25, torch.float32)
        sub_2 = ops.sub(mul_2, constant_6)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_7 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_7)
        constant_8 = ops.constant(172.0, torch.float32)
        add_5 = ops.add(mul_3, constant_8)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_9 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_7, constant_9)
        constant_10 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_6)
        sub_3 = ops.sub(add_5, floor_1)
        constant_11 = ops.constant(1.0, torch.float32)
        sub_4 = ops.sub(constant_11, sub_3)
        mul_5 = ops.mul(sub_2, sub_4)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_6 = ops.mul(load_8, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_7 = ops.add(mul_6, constant_13)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('buf1', get_index_9)
        constant_14 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_9, constant_14)
        constant_15 = ops.constant(172.0, torch.float32)
        add_8 = ops.add(mul_7, constant_15)
        floor_2 = ops.floor(add_8)
        sub_5 = ops.sub(add_7, floor_2)
        constant_16 = ops.constant(1.0, torch.float32)
        sub_6 = ops.sub(constant_16, sub_5)
        mul_8 = ops.mul(mul_5, sub_6)
        constant_17 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(mul_8, constant_17)
        mul_9 = ops.mul(add_2, add_9)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf46', get_index_10, mul_9, None)
        return store


buf47: SchedulerNode(ComputedBuffer)
buf47.writes = [MemoryDep('buf47', c0, {c0: 943920})]
buf47.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf47.met_dependencies = []
buf47.users = [NodeUser(node=SchedulerNode(name='buf49'), can_inplace=True)]
buf47.group.device = cuda:0
buf47.group.iteration = (943920, 1)
buf47.sizes = ([2, 3, 157320], [])
class buf47_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        sub = ops.sub(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(sub, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_1)
        constant_6 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(sub_1, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_2)
        constant_10 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_4)
        constant_14 = ops.constant(2.0, torch.float32)
        add_5 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_6)
        constant_18 = ops.constant(2.0, torch.float32)
        add_7 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_7, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf47', get_index_5, where, None)
        return store


buf48: SchedulerNode(ComputedBuffer)
buf48.writes = [MemoryDep('buf48', c0, {c0: 943920})]
buf48.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf48.met_dependencies = []
buf48.users = [NodeUser(node=SchedulerNode(name='buf49'), can_inplace=True)]
buf48.group.device = cuda:0
buf48.group.iteration = (943920, 1)
buf48.sizes = ([2, 3, 157320], [])
class buf48_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        sub = ops.sub(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(sub, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_1)
        constant_6 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(sub_1, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_2)
        constant_10 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_4)
        constant_14 = ops.constant(2.0, torch.float32)
        add_5 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_6)
        constant_18 = ops.constant(1.0, torch.float32)
        sub_2 = ops.sub(floor_4, constant_18)
        to_dtype = ops.to_dtype(sub_2, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf48', get_index_5, where, None)
        return store


buf49: SchedulerNode(ComputedBuffer)
buf49.writes = [MemoryDep('buf49', c0, {c0: 943920})]
buf49.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf47', c0, {c0: 943920}),
        MemoryDep('buf48', c0, {c0: 943920})]
buf49.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp0) + 3*(tmp1) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf49.users = [NodeUser(node=SchedulerNode(name='buf50'), can_inplace=True)]
buf49.group.device = cuda:0
buf49.group.iteration = (943920, 1)
buf49.sizes = ([2, 3, 157320], [])
class buf49_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index2 = 314640*z0 + 2*z2
    index3 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_3, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        sub = ops.sub(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(sub, constant_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_1)
        constant_6 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(sub_1, constant_7)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf1', get_index_5)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_5, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_2)
        constant_10 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_11)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('buf1', get_index_6)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_4)
        constant_14 = ops.constant(2.0, torch.float32)
        add_5 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_16 = ops.constant(1, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_16, constant_17)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load_2, to_dtype)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf49', get_index_7, mul_4, None)
        return store


buf50: SchedulerNode(ComputedBuffer)
buf50.writes = [MemoryDep('buf50', c0, {c0: 943920})]
buf50.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf49', c0, {c0: 943920})]
buf50.met_dependencies = []
buf50.users = [NodeUser(node=SchedulerNode(name='buf61'), can_inplace=True)]
buf50.group.device = cuda:0
buf50.group.iteration = (943920, 1)
buf50.sizes = ([2, 3, 157320], [])
class buf50_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_2 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_2)
        constant_3 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_1)
        sub = ops.sub(add, floor)
        constant_4 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(sub, constant_4)
        constant_5 = ops.constant(-0.75, torch.float32)
        mul_2 = ops.mul(add_2, constant_5)
        constant_6 = ops.constant(-3.75, torch.float32)
        sub_1 = ops.sub(mul_2, constant_6)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_7 = ops.constant(228.0, torch.float32)
        mul_3 = ops.mul(load_3, constant_7)
        constant_8 = ops.constant(227.5, torch.float32)
        add_3 = ops.add(mul_3, constant_8)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_9 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_9)
        constant_10 = ops.constant(227.5, torch.float32)
        add_4 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_4)
        sub_2 = ops.sub(add_3, floor_1)
        constant_11 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(sub_2, constant_11)
        mul_5 = ops.mul(sub_1, add_5)
        constant_12 = ops.constant(-6.0, torch.float32)
        add_6 = ops.add(mul_5, constant_12)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_13 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_5, constant_13)
        constant_14 = ops.constant(227.5, torch.float32)
        add_7 = ops.add(mul_6, constant_14)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_15 = ops.constant(228.0, torch.float32)
        mul_7 = ops.mul(load_6, constant_15)
        constant_16 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_7, constant_16)
        floor_2 = ops.floor(add_8)
        sub_3 = ops.sub(add_7, floor_2)
        constant_17 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(sub_3, constant_17)
        mul_8 = ops.mul(add_6, add_9)
        constant_18 = ops.constant(-3.0, torch.float32)
        sub_4 = ops.sub(mul_8, constant_18)
        mul_9 = ops.mul(load, sub_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf50', get_index_7, mul_9, None)
        return store


buf51: SchedulerNode(ComputedBuffer)
buf51.writes = [MemoryDep('buf51', c0, {c0: 943920})]
buf51.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf51.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp49) + 3*(tmp97) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf51.users = [NodeUser(node=SchedulerNode(name='buf52'), can_inplace=True)]
buf51.group.device = cuda:0
buf51.group.iteration = (943920, 1)
buf51.sizes = ([2, 3, 157320], [])
class buf51_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index3 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_3 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_3)
        constant_4 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_4)
        floor_1 = ops.floor(add_1)
        constant_5 = ops.constant(456.0, torch.float32)
        lt = ops.lt(floor_1, constant_5)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_6 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_6)
        constant_7 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_7)
        floor_2 = ops.floor(add_2)
        constant_8 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_2, constant_8)
        constant_9 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_9)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_10 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_10)
        constant_11 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_11)
        floor_3 = ops.floor(add_4)
        constant_12 = ops.constant(2.0, torch.float32)
        add_5 = ops.add(floor_3, constant_12)
        constant_13 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_13)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_14 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_14)
        constant_15 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_4, constant_15)
        floor_4 = ops.floor(add_6)
        constant_16 = ops.constant(2.0, torch.float32)
        add_7 = ops.add(floor_4, constant_16)
        to_dtype = ops.to_dtype(add_7, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_17)
        set_indirect0 = self.set_indirect0(where)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1', get_index_5)
        constant_18 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_18)
        constant_19 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_5, constant_19)
        floor_5 = ops.floor(add_8)
        constant_20 = ops.constant(0.0, torch.float32)
        ge_2 = ops.ge(floor_5, constant_20)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1', get_index_6)
        constant_21 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_6, constant_21)
        constant_22 = ops.constant(227.5, torch.float32)
        add_9 = ops.add(mul_6, constant_22)
        floor_6 = ops.floor(add_9)
        constant_23 = ops.constant(456.0, torch.float32)
        lt_2 = ops.lt(floor_6, constant_23)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_24 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_7, constant_24)
        constant_25 = ops.constant(172.0, torch.float32)
        add_10 = ops.add(mul_7, constant_25)
        floor_7 = ops.floor(add_10)
        constant_26 = ops.constant(2.0, torch.float32)
        add_11 = ops.add(floor_7, constant_26)
        constant_27 = ops.constant(0.0, torch.float32)
        ge_3 = ops.ge(add_11, constant_27)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_28 = ops.constant(172.5, torch.float32)
        mul_8 = ops.mul(load_8, constant_28)
        constant_29 = ops.constant(172.0, torch.float32)
        add_12 = ops.add(mul_8, constant_29)
        floor_8 = ops.floor(add_12)
        constant_30 = ops.constant(2.0, torch.float32)
        add_13 = ops.add(floor_8, constant_30)
        constant_31 = ops.constant(345.0, torch.float32)
        lt_3 = ops.lt(add_13, constant_31)
        logical_and_3 = ops.logical_and(ge_3, lt_3)
        logical_and_4 = ops.logical_and(lt_2, logical_and_3)
        logical_and_5 = ops.logical_and(ge_2, logical_and_4)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf1', get_index_9)
        constant_32 = ops.constant(228.0, torch.float32)
        mul_9 = ops.mul(load_9, constant_32)
        constant_33 = ops.constant(227.5, torch.float32)
        add_14 = ops.add(mul_9, constant_33)
        floor_9 = ops.floor(add_14)
        to_dtype_1 = ops.to_dtype(floor_9, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        where_1 = ops.where(logical_and_5, to_dtype_1, constant_34)
        set_indirect1 = self.set_indirect1(where_1)
        get_index_10 = self.get_index('index2')
        load_10 = ops.load('arg0_1', get_index_10)
        get_index_11 = self.get_index('index3')
        store = ops.store('buf51', get_index_11, load_10, None)
        return store


buf52: SchedulerNode(ComputedBuffer)
buf52.writes = [MemoryDep('buf52', c0, {c0: 943920})]
buf52.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf51', c0, {c0: 943920})]
buf52.met_dependencies = []
buf52.users = [NodeUser(node=SchedulerNode(name='buf61'), can_inplace=True)]
buf52.group.device = cuda:0
buf52.group.iteration = (943920, 1)
buf52.sizes = ([2, 3, 157320], [])
class buf52_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    index2 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_2)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_3 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_3)
        constant_4 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_4)
        floor_1 = ops.floor(add_1)
        constant_5 = ops.constant(456.0, torch.float32)
        lt = ops.lt(floor_1, constant_5)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant_6 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_3, constant_6)
        constant_7 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_7)
        floor_2 = ops.floor(add_2)
        constant_8 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_2, constant_8)
        constant_9 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_9)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_10 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_4, constant_10)
        constant_11 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_11)
        floor_3 = ops.floor(add_4)
        constant_12 = ops.constant(2.0, torch.float32)
        add_5 = ops.add(floor_3, constant_12)
        constant_13 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_13)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_14 = ops.constant(1, torch.int64)
        constant_15 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_14, constant_15)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load, to_dtype)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_5, constant_17)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_18 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_6, constant_18)
        constant_19 = ops.constant(227.5, torch.float32)
        add_7 = ops.add(mul_6, constant_19)
        floor_4 = ops.floor(add_7)
        sub = ops.sub(add_6, floor_4)
        constant_20 = ops.constant(1.25, torch.float32)
        mul_7 = ops.mul(sub, constant_20)
        constant_21 = ops.constant(2.25, torch.float32)
        sub_1 = ops.sub(mul_7, constant_21)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_22 = ops.constant(228.0, torch.float32)
        mul_8 = ops.mul(load_7, constant_22)
        constant_23 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_8, constant_23)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_24 = ops.constant(228.0, torch.float32)
        mul_9 = ops.mul(load_8, constant_24)
        constant_25 = ops.constant(227.5, torch.float32)
        add_9 = ops.add(mul_9, constant_25)
        floor_5 = ops.floor(add_9)
        sub_2 = ops.sub(add_8, floor_5)
        mul_10 = ops.mul(sub_1, sub_2)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('buf1', get_index_9)
        constant_26 = ops.constant(228.0, torch.float32)
        mul_11 = ops.mul(load_9, constant_26)
        constant_27 = ops.constant(227.5, torch.float32)
        add_10 = ops.add(mul_11, constant_27)
        get_index_10 = self.get_index('index1')
        load_10 = ops.load('buf1', get_index_10)
        constant_28 = ops.constant(228.0, torch.float32)
        mul_12 = ops.mul(load_10, constant_28)
        constant_29 = ops.constant(227.5, torch.float32)
        add_11 = ops.add(mul_12, constant_29)
        floor_6 = ops.floor(add_11)
        sub_3 = ops.sub(add_10, floor_6)
        mul_13 = ops.mul(mul_10, sub_3)
        constant_30 = ops.constant(1.0, torch.float32)
        add_12 = ops.add(mul_13, constant_30)
        mul_14 = ops.mul(mul_4, add_12)
        get_index_11 = self.get_index('index0')
        store = ops.store('buf52', get_index_11, mul_14, None)
        return store


buf53: SchedulerNode(ComputedBuffer)
buf53.writes = [MemoryDep('buf53', c0, {c0: 943920})]
buf53.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf53.met_dependencies = []
buf53.users = [NodeUser(node=SchedulerNode(name='buf55'), can_inplace=True)]
buf53.group.device = cuda:0
buf53.group.iteration = (943920, 1)
buf53.sizes = ([2, 3, 157320], [])
class buf53_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(2.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(2.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(172.0, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(2.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf53', get_index_5, where, None)
        return store


buf54: SchedulerNode(ComputedBuffer)
buf54.writes = [MemoryDep('buf54', c0, {c0: 943920})]
buf54.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf54.met_dependencies = []
buf54.users = [NodeUser(node=SchedulerNode(name='buf55'), can_inplace=True)]
buf54.group.device = cuda:0
buf54.group.iteration = (943920, 1)
buf54.sizes = ([2, 3, 157320], [])
class buf54_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(2.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(2.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf54', get_index_5, where, None)
        return store


buf55: SchedulerNode(ComputedBuffer)
buf55.writes = [MemoryDep('buf55', c0, {c0: 943920})]
buf55.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf53', c0, {c0: 943920}),
        MemoryDep('buf54', c0, {c0: 943920})]
buf55.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp0) + 3*(tmp1) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf55.users = [NodeUser(node=SchedulerNode(name='buf56'), can_inplace=True)]
buf55.group.device = cuda:0
buf55.group.iteration = (943920, 1)
buf55.sizes = ([2, 3, 157320], [])
class buf55_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index2 = 314640*z0 + 2*z2
    index3 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf54', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_3, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf1', get_index_5)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_5, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(2.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('buf1', get_index_6)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(2.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_16 = ops.constant(1, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_16, constant_17)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load_2, to_dtype)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf55', get_index_7, mul_4, None)
        return store


buf56: SchedulerNode(ComputedBuffer)
buf56.writes = [MemoryDep('buf56', c0, {c0: 943920})]
buf56.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf55', c0, {c0: 943920})]
buf56.met_dependencies = []
buf56.users = [NodeUser(node=SchedulerNode(name='buf61'), can_inplace=True)]
buf56.group.device = cuda:0
buf56.group.iteration = (943920, 1)
buf56.sizes = ([2, 3, 157320], [])
class buf56_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_2 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_2)
        constant_3 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_1)
        sub = ops.sub(add, floor)
        constant_4 = ops.constant(1.0, torch.float32)
        sub_1 = ops.sub(constant_4, sub)
        constant_5 = ops.constant(1.25, torch.float32)
        mul_2 = ops.mul(sub_1, constant_5)
        constant_6 = ops.constant(2.25, torch.float32)
        sub_2 = ops.sub(mul_2, constant_6)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_7 = ops.constant(228.0, torch.float32)
        mul_3 = ops.mul(load_3, constant_7)
        constant_8 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_3, constant_8)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_9 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_9)
        constant_10 = ops.constant(227.5, torch.float32)
        add_3 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_3)
        sub_3 = ops.sub(add_2, floor_1)
        constant_11 = ops.constant(1.0, torch.float32)
        sub_4 = ops.sub(constant_11, sub_3)
        mul_5 = ops.mul(sub_2, sub_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_12 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_5, constant_12)
        constant_13 = ops.constant(227.5, torch.float32)
        add_4 = ops.add(mul_6, constant_13)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_14 = ops.constant(228.0, torch.float32)
        mul_7 = ops.mul(load_6, constant_14)
        constant_15 = ops.constant(227.5, torch.float32)
        add_5 = ops.add(mul_7, constant_15)
        floor_2 = ops.floor(add_5)
        sub_5 = ops.sub(add_4, floor_2)
        constant_16 = ops.constant(1.0, torch.float32)
        sub_6 = ops.sub(constant_16, sub_5)
        mul_8 = ops.mul(mul_5, sub_6)
        constant_17 = ops.constant(1.0, torch.float32)
        add_6 = ops.add(mul_8, constant_17)
        mul_9 = ops.mul(load, add_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf56', get_index_7, mul_9, None)
        return store


buf57: SchedulerNode(ComputedBuffer)
buf57.writes = [MemoryDep('buf57', c0, {c0: 943920})]
buf57.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf57.met_dependencies = []
buf57.users = [NodeUser(node=SchedulerNode(name='buf59'), can_inplace=True)]
buf57.group.device = cuda:0
buf57.group.iteration = (943920, 1)
buf57.sizes = ([2, 3, 157320], [])
class buf57_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(2.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(2.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(2.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(172.0, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(2.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf57', get_index_5, where, None)
        return store


buf58: SchedulerNode(ComputedBuffer)
buf58.writes = [MemoryDep('buf58', c0, {c0: 943920})]
buf58.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf58.met_dependencies = []
buf58.users = [NodeUser(node=SchedulerNode(name='buf59'), can_inplace=True)]
buf58.group.device = cuda:0
buf58.group.iteration = (943920, 1)
buf58.sizes = ([2, 3, 157320], [])
class buf58_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(2.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(2.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(2.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(2.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf58', get_index_5, where, None)
        return store


buf59: SchedulerNode(ComputedBuffer)
buf59.writes = [MemoryDep('buf59', c0, {c0: 943920})]
buf59.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf57', c0, {c0: 943920}),
        MemoryDep('buf58', c0, {c0: 943920})]
buf59.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp0) + 3*(tmp1) + 471960*c0 + c1, {c0: 2, c1: 3})]
buf59.users = [NodeUser(node=SchedulerNode(name='buf60'), can_inplace=True)]
buf59.group.device = cuda:0
buf59.group.iteration = (943920, 1)
buf59.sizes = ([2, 3, 157320], [])
class buf59_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 1368*indirect0 + 3*indirect1 + 471960*z0 + z1
    index2 = 314640*z0 + 2*z2
    index3 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf58', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf1', get_index_3)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_3, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(2.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf1', get_index_4)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_4, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(2.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf1', get_index_5)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_5, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(2.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('buf1', get_index_6)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(2.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        constant_16 = ops.constant(1, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, constant_16, constant_17)
        to_dtype = ops.to_dtype(where, torch.float32)
        mul_4 = ops.mul(load_2, to_dtype)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf59', get_index_7, mul_4, None)
        return store


buf60: SchedulerNode(ComputedBuffer)
buf60.writes = [MemoryDep('buf60', c0, {c0: 943920})]
buf60.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf59', c0, {c0: 943920})]
buf60.met_dependencies = []
buf60.users = [NodeUser(node=SchedulerNode(name='buf61'), can_inplace=True)]
buf60.group.device = cuda:0
buf60.group.iteration = (943920, 1)
buf60.sizes = ([2, 3, 157320], [])
class buf60_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load_1, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_2 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_2, constant_2)
        constant_3 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_1)
        sub = ops.sub(add, floor)
        constant_4 = ops.constant(2.0, torch.float32)
        sub_1 = ops.sub(constant_4, sub)
        constant_5 = ops.constant(-0.75, torch.float32)
        mul_2 = ops.mul(sub_1, constant_5)
        constant_6 = ops.constant(-3.75, torch.float32)
        sub_2 = ops.sub(mul_2, constant_6)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_7 = ops.constant(228.0, torch.float32)
        mul_3 = ops.mul(load_3, constant_7)
        constant_8 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_3, constant_8)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_9 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_9)
        constant_10 = ops.constant(227.5, torch.float32)
        add_3 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_3)
        sub_3 = ops.sub(add_2, floor_1)
        constant_11 = ops.constant(2.0, torch.float32)
        sub_4 = ops.sub(constant_11, sub_3)
        mul_5 = ops.mul(sub_2, sub_4)
        constant_12 = ops.constant(-6.0, torch.float32)
        add_4 = ops.add(mul_5, constant_12)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_13 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_5, constant_13)
        constant_14 = ops.constant(227.5, torch.float32)
        add_5 = ops.add(mul_6, constant_14)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_15 = ops.constant(228.0, torch.float32)
        mul_7 = ops.mul(load_6, constant_15)
        constant_16 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_7, constant_16)
        floor_2 = ops.floor(add_6)
        sub_5 = ops.sub(add_5, floor_2)
        constant_17 = ops.constant(2.0, torch.float32)
        sub_6 = ops.sub(constant_17, sub_5)
        mul_8 = ops.mul(add_4, sub_6)
        constant_18 = ops.constant(-3.0, torch.float32)
        sub_7 = ops.sub(mul_8, constant_18)
        mul_9 = ops.mul(load, sub_7)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf60', get_index_7, mul_9, None)
        return store


buf61: SchedulerNode(ComputedBuffer)
buf61.writes = [MemoryDep('buf61', c0, {c0: 943920})]
buf61.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf50', c0, {c0: 943920}),
        MemoryDep('buf52', c0, {c0: 943920}),
        MemoryDep('buf56', c0, {c0: 943920}),
        MemoryDep('buf60', c0, {c0: 943920})]
buf61.met_dependencies = []
buf61.users = [NodeUser(node=SchedulerNode(name='buf62'), can_inplace=True)]
buf61.group.device = cuda:0
buf61.group.iteration = (943920, 1)
buf61.sizes = ([2, 3, 157320], [])
class buf61_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 471960*z0 + 157320*z1 + z2
    index1 = 314640*z0 + 2*z2 + 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf52', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf56', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf60', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant = ops.constant(172.5, torch.float32)
        mul = ops.mul(load_4, constant)
        constant_1 = ops.constant(172.0, torch.float32)
        add_3 = ops.add(mul, constant_1)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf1', get_index_5)
        constant_2 = ops.constant(172.5, torch.float32)
        mul_1 = ops.mul(load_5, constant_2)
        constant_3 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_1, constant_3)
        floor = ops.floor(add_4)
        sub = ops.sub(add_3, floor)
        constant_4 = ops.constant(2.0, torch.float32)
        sub_1 = ops.sub(constant_4, sub)
        constant_5 = ops.constant(-0.75, torch.float32)
        mul_2 = ops.mul(sub_1, constant_5)
        constant_6 = ops.constant(-3.75, torch.float32)
        sub_2 = ops.sub(mul_2, constant_6)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_7 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_6, constant_7)
        constant_8 = ops.constant(172.0, torch.float32)
        add_5 = ops.add(mul_3, constant_8)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_9 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_7, constant_9)
        constant_10 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_4, constant_10)
        floor_1 = ops.floor(add_6)
        sub_3 = ops.sub(add_5, floor_1)
        constant_11 = ops.constant(2.0, torch.float32)
        sub_4 = ops.sub(constant_11, sub_3)
        mul_5 = ops.mul(sub_2, sub_4)
        constant_12 = ops.constant(-6.0, torch.float32)
        add_7 = ops.add(mul_5, constant_12)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_13 = ops.constant(172.5, torch.float32)
        mul_6 = ops.mul(load_8, constant_13)
        constant_14 = ops.constant(172.0, torch.float32)
        add_8 = ops.add(mul_6, constant_14)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('buf1', get_index_9)
        constant_15 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_9, constant_15)
        constant_16 = ops.constant(172.0, torch.float32)
        add_9 = ops.add(mul_7, constant_16)
        floor_2 = ops.floor(add_9)
        sub_5 = ops.sub(add_8, floor_2)
        constant_17 = ops.constant(2.0, torch.float32)
        sub_6 = ops.sub(constant_17, sub_5)
        mul_8 = ops.mul(add_7, sub_6)
        constant_18 = ops.constant(-3.0, torch.float32)
        sub_7 = ops.sub(mul_8, constant_18)
        mul_9 = ops.mul(add_2, sub_7)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf61', get_index_10, mul_9, None)
        return store


buf62: SchedulerNode(ComputedBuffer)
buf62.writes = [MemoryDep('buf62', c0, {c0: 943920})]
buf62.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 943920}),
        MemoryDep('buf31', c0, {c0: 943920}),
        MemoryDep('buf46', c0, {c0: 943920}),
        MemoryDep('buf61', c0, {c0: 943920})]
buf62.met_dependencies = []
buf62.users = [NodeUser(node=OUTPUT, can_inplace=False)]
buf62.group.device = cuda:0
buf62.group.iteration = (943920, 1)
buf62.sizes = ([943920], [])
class buf62_loop_body:
    var_ranges = {z0: 943920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf61', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf62', get_index_4, add_2, None)
        return store


