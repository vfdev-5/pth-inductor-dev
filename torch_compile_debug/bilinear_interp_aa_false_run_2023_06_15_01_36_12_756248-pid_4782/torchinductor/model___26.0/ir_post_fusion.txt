buf0: SchedulerNode(ComputedBuffer)
buf0.writes = [MemoryDep('buf0', c0, {c0: 150528})]
buf0.unmet_dependencies = []
buf0.met_dependencies =
    [   MemoryDep('arg0_1', 1368*(tmp15) + 3*(tmp31) + c0, {c0: 3}),
        MemoryDep('arg0_1', 3*(tmp103) + 1368*(tmp87) + c0, {c0: 3})]
buf0.users = [NodeUser(node=SchedulerNode(name='buf2'), can_inplace=True)]
buf0.group.device = cpu
buf0.group.iteration = ((3, 224, 224), ())
buf0.sizes = ([3, 224, 224], [])
class buf0_loop_body:
    var_ranges = {z0: 3, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 1368*indirect0 + 3*indirect1 + z0
    index3 = 1368*indirect2 + 3*indirect3 + z0
    index4 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float64)
        constant = ops.constant(1.0, torch.float64)
        mul = ops.mul(to_dtype, constant)
        constant_1 = ops.constant(0.0, torch.float64)
        add = ops.add(mul, constant_1)
        to_dtype_1 = ops.to_dtype(add, torch.float32)
        constant_2 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(to_dtype_1, constant_2)
        constant_3 = ops.constant(1.5401785714285714, torch.float32)
        mul_1 = ops.mul(add_1, constant_3)
        constant_4 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_5)
        to_dtype_2 = ops.to_dtype(maximum, torch.int64)
        set_indirect0 = self.set_indirect0(to_dtype_2)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_3 = ops.to_dtype(index_expr_1, torch.float64)
        constant_6 = ops.constant(1.0, torch.float64)
        mul_2 = ops.mul(to_dtype_3, constant_6)
        constant_7 = ops.constant(0.0, torch.float64)
        add_2 = ops.add(mul_2, constant_7)
        to_dtype_4 = ops.to_dtype(add_2, torch.float32)
        constant_8 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(to_dtype_4, constant_8)
        constant_9 = ops.constant(2.0357142857142856, torch.float32)
        mul_3 = ops.mul(add_3, constant_9)
        constant_10 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_3, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_11)
        to_dtype_5 = ops.to_dtype(maximum_1, torch.int64)
        set_indirect1 = self.set_indirect1(to_dtype_5)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        to_dtype_6 = ops.to_dtype(index_expr_2, torch.float64)
        constant_12 = ops.constant(1.0, torch.float64)
        mul_4 = ops.mul(to_dtype_6, constant_12)
        constant_13 = ops.constant(0.0, torch.float64)
        add_4 = ops.add(mul_4, constant_13)
        to_dtype_7 = ops.to_dtype(add_4, torch.float32)
        constant_14 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(to_dtype_7, constant_14)
        constant_15 = ops.constant(1.5401785714285714, torch.float32)
        mul_5 = ops.mul(add_5, constant_15)
        constant_16 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_5, constant_16)
        constant_17 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_2, constant_17)
        get_index_4 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        to_dtype_8 = ops.to_dtype(index_expr_3, torch.float64)
        constant_18 = ops.constant(1.0, torch.float64)
        mul_6 = ops.mul(to_dtype_8, constant_18)
        constant_19 = ops.constant(0.0, torch.float64)
        add_6 = ops.add(mul_6, constant_19)
        to_dtype_9 = ops.to_dtype(add_6, torch.float32)
        constant_20 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(to_dtype_9, constant_20)
        constant_21 = ops.constant(1.5401785714285714, torch.float32)
        mul_7 = ops.mul(add_7, constant_21)
        constant_22 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_7, constant_22)
        constant_23 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_3, constant_23)
        to_dtype_10 = ops.to_dtype(maximum_3, torch.int64)
        to_dtype_11 = ops.to_dtype(to_dtype_10, torch.float32)
        sub_4 = ops.sub(maximum_2, to_dtype_11)
        constant_24 = ops.constant(1.0, torch.float32)
        sub_5 = ops.sub(constant_24, sub_4)
        mul_8 = ops.mul(load, sub_5)
        get_index_5 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_5, torch.int64)
        to_dtype_12 = ops.to_dtype(index_expr_4, torch.float64)
        constant_25 = ops.constant(1.0, torch.float64)
        mul_9 = ops.mul(to_dtype_12, constant_25)
        constant_26 = ops.constant(0.0, torch.float64)
        add_8 = ops.add(mul_9, constant_26)
        to_dtype_13 = ops.to_dtype(add_8, torch.float32)
        constant_27 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(to_dtype_13, constant_27)
        constant_28 = ops.constant(1.5401785714285714, torch.float32)
        mul_10 = ops.mul(add_9, constant_28)
        constant_29 = ops.constant(0.5, torch.float32)
        sub_6 = ops.sub(mul_10, constant_29)
        constant_30 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_6, constant_30)
        ceil = ops.ceil(maximum_4)
        constant_31 = ops.constant(344.0, torch.float32)
        minimum = ops.minimum(ceil, constant_31)
        to_dtype_14 = ops.to_dtype(minimum, torch.int64)
        set_indirect2 = self.set_indirect2(to_dtype_14)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.int64)
        to_dtype_15 = ops.to_dtype(index_expr_5, torch.float64)
        constant_32 = ops.constant(1.0, torch.float64)
        mul_11 = ops.mul(to_dtype_15, constant_32)
        constant_33 = ops.constant(0.0, torch.float64)
        add_10 = ops.add(mul_11, constant_33)
        to_dtype_16 = ops.to_dtype(add_10, torch.float32)
        constant_34 = ops.constant(0.5, torch.float32)
        add_11 = ops.add(to_dtype_16, constant_34)
        constant_35 = ops.constant(2.0357142857142856, torch.float32)
        mul_12 = ops.mul(add_11, constant_35)
        constant_36 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_12, constant_36)
        constant_37 = ops.constant(0.0, torch.float32)
        maximum_5 = ops.maximum(sub_7, constant_37)
        to_dtype_17 = ops.to_dtype(maximum_5, torch.int64)
        set_indirect3 = self.set_indirect3(to_dtype_17)
        get_index_7 = self.get_index('index3')
        load_1 = ops.load('arg0_1', get_index_7)
        get_index_8 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_8, torch.int64)
        to_dtype_18 = ops.to_dtype(index_expr_6, torch.float64)
        constant_38 = ops.constant(1.0, torch.float64)
        mul_13 = ops.mul(to_dtype_18, constant_38)
        constant_39 = ops.constant(0.0, torch.float64)
        add_12 = ops.add(mul_13, constant_39)
        to_dtype_19 = ops.to_dtype(add_12, torch.float32)
        constant_40 = ops.constant(0.5, torch.float32)
        add_13 = ops.add(to_dtype_19, constant_40)
        constant_41 = ops.constant(1.5401785714285714, torch.float32)
        mul_14 = ops.mul(add_13, constant_41)
        constant_42 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_14, constant_42)
        constant_43 = ops.constant(0.0, torch.float32)
        maximum_6 = ops.maximum(sub_8, constant_43)
        get_index_9 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_9, torch.int64)
        to_dtype_20 = ops.to_dtype(index_expr_7, torch.float64)
        constant_44 = ops.constant(1.0, torch.float64)
        mul_15 = ops.mul(to_dtype_20, constant_44)
        constant_45 = ops.constant(0.0, torch.float64)
        add_14 = ops.add(mul_15, constant_45)
        to_dtype_21 = ops.to_dtype(add_14, torch.float32)
        constant_46 = ops.constant(0.5, torch.float32)
        add_15 = ops.add(to_dtype_21, constant_46)
        constant_47 = ops.constant(1.5401785714285714, torch.float32)
        mul_16 = ops.mul(add_15, constant_47)
        constant_48 = ops.constant(0.5, torch.float32)
        sub_9 = ops.sub(mul_16, constant_48)
        constant_49 = ops.constant(0.0, torch.float32)
        maximum_7 = ops.maximum(sub_9, constant_49)
        to_dtype_22 = ops.to_dtype(maximum_7, torch.int64)
        to_dtype_23 = ops.to_dtype(to_dtype_22, torch.float32)
        sub_10 = ops.sub(maximum_6, to_dtype_23)
        mul_17 = ops.mul(load_1, sub_10)
        add_16 = ops.add(mul_8, mul_17)
        get_index_10 = self.get_index('index4')
        store = ops.store('buf0', get_index_10, add_16, None)
        return store


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep('buf1', c0, {c0: 150528})]
buf1.unmet_dependencies = []
buf1.met_dependencies =
    [   MemoryDep('arg0_1', 1368*(tmp15) + 3*(tmp34) + c0, {c0: 3}),
        MemoryDep('arg0_1', 3*(tmp109) + 1368*(tmp90) + c0, {c0: 3})]
buf1.users = [NodeUser(node=SchedulerNode(name='buf2'), can_inplace=True)]
buf1.group.device = cpu
buf1.group.iteration = ((3, 224, 224), ())
buf1.sizes = ([3, 224, 224], [])
class buf1_loop_body:
    var_ranges = {z0: 3, z1: 224, z2: 224}
    index0 = z1
    index1 = z2
    index2 = 1368*indirect0 + 3*indirect1 + z0
    index3 = 1368*indirect2 + 3*indirect3 + z0
    index4 = 50176*z0 + 224*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float64)
        constant = ops.constant(1.0, torch.float64)
        mul = ops.mul(to_dtype, constant)
        constant_1 = ops.constant(0.0, torch.float64)
        add = ops.add(mul, constant_1)
        to_dtype_1 = ops.to_dtype(add, torch.float32)
        constant_2 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(to_dtype_1, constant_2)
        constant_3 = ops.constant(1.5401785714285714, torch.float32)
        mul_1 = ops.mul(add_1, constant_3)
        constant_4 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_5)
        to_dtype_2 = ops.to_dtype(maximum, torch.int64)
        set_indirect0 = self.set_indirect0(to_dtype_2)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_3 = ops.to_dtype(index_expr_1, torch.float64)
        constant_6 = ops.constant(1.0, torch.float64)
        mul_2 = ops.mul(to_dtype_3, constant_6)
        constant_7 = ops.constant(0.0, torch.float64)
        add_2 = ops.add(mul_2, constant_7)
        to_dtype_4 = ops.to_dtype(add_2, torch.float32)
        constant_8 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(to_dtype_4, constant_8)
        constant_9 = ops.constant(2.0357142857142856, torch.float32)
        mul_3 = ops.mul(add_3, constant_9)
        constant_10 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_3, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_11)
        ceil = ops.ceil(maximum_1)
        constant_12 = ops.constant(455.0, torch.float32)
        minimum = ops.minimum(ceil, constant_12)
        to_dtype_5 = ops.to_dtype(minimum, torch.int64)
        set_indirect1 = self.set_indirect1(to_dtype_5)
        get_index_2 = self.get_index('index2')
        load = ops.load('arg0_1', get_index_2)
        get_index_3 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        to_dtype_6 = ops.to_dtype(index_expr_2, torch.float64)
        constant_13 = ops.constant(1.0, torch.float64)
        mul_4 = ops.mul(to_dtype_6, constant_13)
        constant_14 = ops.constant(0.0, torch.float64)
        add_4 = ops.add(mul_4, constant_14)
        to_dtype_7 = ops.to_dtype(add_4, torch.float32)
        constant_15 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(to_dtype_7, constant_15)
        constant_16 = ops.constant(1.5401785714285714, torch.float32)
        mul_5 = ops.mul(add_5, constant_16)
        constant_17 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_5, constant_17)
        constant_18 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_2, constant_18)
        get_index_4 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        to_dtype_8 = ops.to_dtype(index_expr_3, torch.float64)
        constant_19 = ops.constant(1.0, torch.float64)
        mul_6 = ops.mul(to_dtype_8, constant_19)
        constant_20 = ops.constant(0.0, torch.float64)
        add_6 = ops.add(mul_6, constant_20)
        to_dtype_9 = ops.to_dtype(add_6, torch.float32)
        constant_21 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(to_dtype_9, constant_21)
        constant_22 = ops.constant(1.5401785714285714, torch.float32)
        mul_7 = ops.mul(add_7, constant_22)
        constant_23 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_7, constant_23)
        constant_24 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_3, constant_24)
        to_dtype_10 = ops.to_dtype(maximum_3, torch.int64)
        to_dtype_11 = ops.to_dtype(to_dtype_10, torch.float32)
        sub_4 = ops.sub(maximum_2, to_dtype_11)
        constant_25 = ops.constant(1.0, torch.float32)
        sub_5 = ops.sub(constant_25, sub_4)
        mul_8 = ops.mul(load, sub_5)
        get_index_5 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_5, torch.int64)
        to_dtype_12 = ops.to_dtype(index_expr_4, torch.float64)
        constant_26 = ops.constant(1.0, torch.float64)
        mul_9 = ops.mul(to_dtype_12, constant_26)
        constant_27 = ops.constant(0.0, torch.float64)
        add_8 = ops.add(mul_9, constant_27)
        to_dtype_13 = ops.to_dtype(add_8, torch.float32)
        constant_28 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(to_dtype_13, constant_28)
        constant_29 = ops.constant(1.5401785714285714, torch.float32)
        mul_10 = ops.mul(add_9, constant_29)
        constant_30 = ops.constant(0.5, torch.float32)
        sub_6 = ops.sub(mul_10, constant_30)
        constant_31 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_6, constant_31)
        ceil_1 = ops.ceil(maximum_4)
        constant_32 = ops.constant(344.0, torch.float32)
        minimum_1 = ops.minimum(ceil_1, constant_32)
        to_dtype_14 = ops.to_dtype(minimum_1, torch.int64)
        set_indirect2 = self.set_indirect2(to_dtype_14)
        get_index_6 = self.get_index('index1')
        index_expr_5 = ops.index_expr(get_index_6, torch.int64)
        to_dtype_15 = ops.to_dtype(index_expr_5, torch.float64)
        constant_33 = ops.constant(1.0, torch.float64)
        mul_11 = ops.mul(to_dtype_15, constant_33)
        constant_34 = ops.constant(0.0, torch.float64)
        add_10 = ops.add(mul_11, constant_34)
        to_dtype_16 = ops.to_dtype(add_10, torch.float32)
        constant_35 = ops.constant(0.5, torch.float32)
        add_11 = ops.add(to_dtype_16, constant_35)
        constant_36 = ops.constant(2.0357142857142856, torch.float32)
        mul_12 = ops.mul(add_11, constant_36)
        constant_37 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_12, constant_37)
        constant_38 = ops.constant(0.0, torch.float32)
        maximum_5 = ops.maximum(sub_7, constant_38)
        ceil_2 = ops.ceil(maximum_5)
        constant_39 = ops.constant(455.0, torch.float32)
        minimum_2 = ops.minimum(ceil_2, constant_39)
        to_dtype_17 = ops.to_dtype(minimum_2, torch.int64)
        set_indirect3 = self.set_indirect3(to_dtype_17)
        get_index_7 = self.get_index('index3')
        load_1 = ops.load('arg0_1', get_index_7)
        get_index_8 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_8, torch.int64)
        to_dtype_18 = ops.to_dtype(index_expr_6, torch.float64)
        constant_40 = ops.constant(1.0, torch.float64)
        mul_13 = ops.mul(to_dtype_18, constant_40)
        constant_41 = ops.constant(0.0, torch.float64)
        add_12 = ops.add(mul_13, constant_41)
        to_dtype_19 = ops.to_dtype(add_12, torch.float32)
        constant_42 = ops.constant(0.5, torch.float32)
        add_13 = ops.add(to_dtype_19, constant_42)
        constant_43 = ops.constant(1.5401785714285714, torch.float32)
        mul_14 = ops.mul(add_13, constant_43)
        constant_44 = ops.constant(0.5, torch.float32)
        sub_8 = ops.sub(mul_14, constant_44)
        constant_45 = ops.constant(0.0, torch.float32)
        maximum_6 = ops.maximum(sub_8, constant_45)
        get_index_9 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_9, torch.int64)
        to_dtype_20 = ops.to_dtype(index_expr_7, torch.float64)
        constant_46 = ops.constant(1.0, torch.float64)
        mul_15 = ops.mul(to_dtype_20, constant_46)
        constant_47 = ops.constant(0.0, torch.float64)
        add_14 = ops.add(mul_15, constant_47)
        to_dtype_21 = ops.to_dtype(add_14, torch.float32)
        constant_48 = ops.constant(0.5, torch.float32)
        add_15 = ops.add(to_dtype_21, constant_48)
        constant_49 = ops.constant(1.5401785714285714, torch.float32)
        mul_16 = ops.mul(add_15, constant_49)
        constant_50 = ops.constant(0.5, torch.float32)
        sub_9 = ops.sub(mul_16, constant_50)
        constant_51 = ops.constant(0.0, torch.float32)
        maximum_7 = ops.maximum(sub_9, constant_51)
        to_dtype_22 = ops.to_dtype(maximum_7, torch.int64)
        to_dtype_23 = ops.to_dtype(to_dtype_22, torch.float32)
        sub_10 = ops.sub(maximum_6, to_dtype_23)
        mul_17 = ops.mul(load_1, sub_10)
        add_16 = ops.add(mul_8, mul_17)
        get_index_10 = self.get_index('index4')
        store = ops.store('buf1', get_index_10, add_16, None)
        return store


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep('buf2', c0, {c0: 150528})]
buf2.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 150528}), MemoryDep('buf1', c0, {c0: 150528})]
buf2.met_dependencies = []
buf2.users = [NodeUser(node=OUTPUT, can_inplace=False)]
buf2.group.device = cpu
buf2.group.iteration = ((672, 224), ())
buf2.sizes = ([672, 224], [])
class buf2_loop_body:
    var_ranges = {z0: 672, z1: 224}
    index0 = 224*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float64)
        constant = ops.constant(1.0, torch.float64)
        mul = ops.mul(to_dtype, constant)
        constant_1 = ops.constant(0.0, torch.float64)
        add = ops.add(mul, constant_1)
        to_dtype_1 = ops.to_dtype(add, torch.float32)
        constant_2 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(to_dtype_1, constant_2)
        constant_3 = ops.constant(2.0357142857142856, torch.float32)
        mul_1 = ops.mul(add_1, constant_3)
        constant_4 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_5)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_1, torch.float64)
        constant_6 = ops.constant(1.0, torch.float64)
        mul_2 = ops.mul(to_dtype_2, constant_6)
        constant_7 = ops.constant(0.0, torch.float64)
        add_2 = ops.add(mul_2, constant_7)
        to_dtype_3 = ops.to_dtype(add_2, torch.float32)
        constant_8 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(to_dtype_3, constant_8)
        constant_9 = ops.constant(2.0357142857142856, torch.float32)
        mul_3 = ops.mul(add_3, constant_9)
        constant_10 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_3, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_11)
        to_dtype_4 = ops.to_dtype(maximum_1, torch.int64)
        to_dtype_5 = ops.to_dtype(to_dtype_4, torch.float32)
        sub_2 = ops.sub(maximum, to_dtype_5)
        constant_12 = ops.constant(1.0, torch.float32)
        sub_3 = ops.sub(constant_12, sub_2)
        mul_4 = ops.mul(load, sub_3)
        get_index_3 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_3)
        get_index_4 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        to_dtype_6 = ops.to_dtype(index_expr_2, torch.float64)
        constant_13 = ops.constant(1.0, torch.float64)
        mul_5 = ops.mul(to_dtype_6, constant_13)
        constant_14 = ops.constant(0.0, torch.float64)
        add_4 = ops.add(mul_5, constant_14)
        to_dtype_7 = ops.to_dtype(add_4, torch.float32)
        constant_15 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(to_dtype_7, constant_15)
        constant_16 = ops.constant(2.0357142857142856, torch.float32)
        mul_6 = ops.mul(add_5, constant_16)
        constant_17 = ops.constant(0.5, torch.float32)
        sub_4 = ops.sub(mul_6, constant_17)
        constant_18 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_4, constant_18)
        get_index_5 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        to_dtype_8 = ops.to_dtype(index_expr_3, torch.float64)
        constant_19 = ops.constant(1.0, torch.float64)
        mul_7 = ops.mul(to_dtype_8, constant_19)
        constant_20 = ops.constant(0.0, torch.float64)
        add_6 = ops.add(mul_7, constant_20)
        to_dtype_9 = ops.to_dtype(add_6, torch.float32)
        constant_21 = ops.constant(0.5, torch.float32)
        add_7 = ops.add(to_dtype_9, constant_21)
        constant_22 = ops.constant(2.0357142857142856, torch.float32)
        mul_8 = ops.mul(add_7, constant_22)
        constant_23 = ops.constant(0.5, torch.float32)
        sub_5 = ops.sub(mul_8, constant_23)
        constant_24 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_5, constant_24)
        to_dtype_10 = ops.to_dtype(maximum_3, torch.int64)
        to_dtype_11 = ops.to_dtype(to_dtype_10, torch.float32)
        sub_6 = ops.sub(maximum_2, to_dtype_11)
        mul_9 = ops.mul(load_1, sub_6)
        add_8 = ops.add(mul_4, mul_9)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf2', get_index_6, add_8, None)
        return store


