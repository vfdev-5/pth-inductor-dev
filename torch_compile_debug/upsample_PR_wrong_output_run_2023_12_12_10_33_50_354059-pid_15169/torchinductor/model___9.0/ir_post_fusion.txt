buf0_buf1_buf2_buf3_buf4: FusedSchedulerNode(NoneType)
buf0_buf1_buf2_buf3_buf4.writes = 
    [   MemoryDep('buf0', c0, {c0: s0*s3*s4}),
        MemoryDep('buf1', c0, {c0: s0*s3*s4}),
        MemoryDep('buf2', c0, {c0: s0*s3*s4}),
        MemoryDep('buf3', c0, {c0: s0*s3*s4}),
        MemoryDep('buf4', c0, {c0: s0*s3*s4})]
buf0_buf1_buf2_buf3_buf4.unmet_dependencies = []
buf0_buf1_buf2_buf3_buf4.met_dependencies = 
    [   MemoryDep('arg3_1', (tmp13) + (tmp6)*s2 + c0*s1*s2, {c0: s0}),
        MemoryDep('arg3_1', (tmp25)*s2 + (tmp32) + c0*s1*s2, {c0: s0}),
        MemoryDep('arg3_1', (tmp25)*s2 + (tmp51) + c0*s1*s2, {c0: s0}),
        MemoryDep('arg3_1', (tmp26)*s2 + (tmp33) + c0*s1*s2, {c0: s0}),
        MemoryDep('arg3_1', (tmp32) + (tmp6)*s2 + c0*s1*s2, {c0: s0}),
        MemoryDep('arg3_1', (tmp40)*s2 + (tmp47) + c0*s1*s2, {c0: s0}),
        MemoryDep('arg3_1', (tmp42)*s2 + (tmp49) + c0*s1*s2, {c0: s0})]
buf0_buf1_buf2_buf3_buf4.users = []
    buf0_buf1_buf2_buf3_buf4.snodes[0] =
    buf0: SchedulerNode(ComputedBuffer)
    buf0.writes = [MemoryDep('buf0', c0, {c0: s0*s3*s4})]
    buf0.unmet_dependencies = []
    buf0.met_dependencies = [MemoryDep('arg3_1', (tmp25)*s2 + (tmp51) + c0*s1*s2, {c0: s0})]
    buf0.users = [NodeUser(node=SchedulerNode(name='buf1'), can_inplace=True, is_weak=False)]
    buf0.group.device = cpu
    buf0.group.iteration = ((s0, s3, s4), ())
    buf0.sizes = ([s0, s3, s4], [])
    class buf0_loop_body:
        var_ranges = {z0: s0, z1: s3, z2: s4}
        index0 = s1/(s3 - 1.0) - 1.0/(s3 - 1.0)
        index1 = z1
        index2 = s1 - 1
        index3 = s2/(s4 - 1.0) - 1.0/(s4 - 1.0)
        index4 = z2
        index5 = s2 - 1
        index6 = indirect0*s2 + indirect1 + s1*s2*z0
        index7 = s3*s4*z0 + s4*z1 + z2
        def body(self, ops):
            get_index = self.get_index('index0')
            index_expr = ops.index_expr(get_index, torch.int64)
            get_index_1 = self.get_index('index1')
            index_expr_1 = ops.index_expr(get_index_1, torch.int64)
            mul = ops.mul(index_expr_1, index_expr)
            to_dtype = ops.to_dtype(mul, torch.float32, src_dtype = torch.int64)
            constant = ops.constant(0.0, torch.float32)
            maximum = ops.maximum(to_dtype, constant)
            to_dtype_1 = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
            get_index_2 = self.get_index('index2')
            index_expr_2 = ops.index_expr(get_index_2, torch.int64)
            lt = ops.lt(to_dtype_1, index_expr_2)
            get_index_3 = self.get_index('index0')
            index_expr_3 = ops.index_expr(get_index_3, torch.int64)
            get_index_4 = self.get_index('index1')
            index_expr_4 = ops.index_expr(get_index_4, torch.int64)
            mul_1 = ops.mul(index_expr_4, index_expr_3)
            to_dtype_2 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.int64)
            constant_1 = ops.constant(0.0, torch.float32)
            maximum_1 = ops.maximum(to_dtype_2, constant_1)
            to_dtype_3 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
            constant_2 = ops.constant(1, torch.int64)
            add = ops.add(to_dtype_3, constant_2)
            get_index_5 = self.get_index('index0')
            index_expr_5 = ops.index_expr(get_index_5, torch.int64)
            get_index_6 = self.get_index('index1')
            index_expr_6 = ops.index_expr(get_index_6, torch.int64)
            mul_2 = ops.mul(index_expr_6, index_expr_5)
            to_dtype_4 = ops.to_dtype(mul_2, torch.float32, src_dtype = torch.int64)
            constant_3 = ops.constant(0.0, torch.float32)
            maximum_2 = ops.maximum(to_dtype_4, constant_3)
            to_dtype_5 = ops.to_dtype(maximum_2, torch.int64, src_dtype = torch.float32)
            where = ops.where(lt, add, to_dtype_5)
            set_indirect0 = self.set_indirect0(where)
            get_index_7 = self.get_index('index3')
            index_expr_7 = ops.index_expr(get_index_7, torch.int64)
            get_index_8 = self.get_index('index4')
            index_expr_8 = ops.index_expr(get_index_8, torch.int64)
            mul_3 = ops.mul(index_expr_8, index_expr_7)
            to_dtype_6 = ops.to_dtype(mul_3, torch.float32, src_dtype = torch.int64)
            constant_4 = ops.constant(0.0, torch.float32)
            maximum_3 = ops.maximum(to_dtype_6, constant_4)
            to_dtype_7 = ops.to_dtype(maximum_3, torch.int64, src_dtype = torch.float32)
            get_index_9 = self.get_index('index5')
            index_expr_9 = ops.index_expr(get_index_9, torch.int64)
            lt_1 = ops.lt(to_dtype_7, index_expr_9)
            get_index_10 = self.get_index('index3')
            index_expr_10 = ops.index_expr(get_index_10, torch.int64)
            get_index_11 = self.get_index('index4')
            index_expr_11 = ops.index_expr(get_index_11, torch.int64)
            mul_4 = ops.mul(index_expr_11, index_expr_10)
            to_dtype_8 = ops.to_dtype(mul_4, torch.float32, src_dtype = torch.int64)
            constant_5 = ops.constant(0.0, torch.float32)
            maximum_4 = ops.maximum(to_dtype_8, constant_5)
            to_dtype_9 = ops.to_dtype(maximum_4, torch.int64, src_dtype = torch.float32)
            constant_6 = ops.constant(1, torch.int64)
            add_1 = ops.add(to_dtype_9, constant_6)
            get_index_12 = self.get_index('index3')
            index_expr_12 = ops.index_expr(get_index_12, torch.int64)
            get_index_13 = self.get_index('index4')
            index_expr_13 = ops.index_expr(get_index_13, torch.int64)
            mul_5 = ops.mul(index_expr_13, index_expr_12)
            to_dtype_10 = ops.to_dtype(mul_5, torch.float32, src_dtype = torch.int64)
            constant_7 = ops.constant(0.0, torch.float32)
            maximum_5 = ops.maximum(to_dtype_10, constant_7)
            to_dtype_11 = ops.to_dtype(maximum_5, torch.int64, src_dtype = torch.float32)
            where_1 = ops.where(lt_1, add_1, to_dtype_11)
            set_indirect1 = self.set_indirect1(where_1)
            get_index_14 = self.get_index('index6')
            load = ops.load('arg3_1', get_index_14)
            get_index_15 = self.get_index('index7')
            store = ops.store('buf0', get_index_15, load, None)
            return store
    buf0_buf1_buf2_buf3_buf4.snodes[1] =
    buf1: SchedulerNode(ComputedBuffer)
    buf1.writes = [MemoryDep('buf1', c0, {c0: s0*s3*s4})]
    buf1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: s0*s3*s4})]
    buf1.met_dependencies = [MemoryDep('arg3_1', (tmp26)*s2 + (tmp33) + c0*s1*s2, {c0: s0})]
    buf1.users = [NodeUser(node=SchedulerNode(name='buf3'), can_inplace=True, is_weak=False)]
    buf1.group.device = cpu
    buf1.group.iteration = ((s0, s3, s4), ())
    buf1.sizes = ([s0, s3, s4], [])
    class buf1_loop_body:
        var_ranges = {z0: s0, z1: s3, z2: s4}
        index0 = s3*s4*z0 + s4*z1 + z2
        index1 = s1/(s3 - 1.0) - 1.0/(s3 - 1.0)
        index2 = z1
        index3 = s1 - 1
        index4 = s2/(s4 - 1.0) - 1.0/(s4 - 1.0)
        index5 = z2
        index6 = indirect0*s2 + indirect1 + s1*s2*z0
        def body(self, ops):
            get_index = self.get_index('index0')
            load = ops.load('buf0', get_index)
            get_index_1 = self.get_index('index1')
            index_expr = ops.index_expr(get_index_1, torch.int64)
            get_index_2 = self.get_index('index2')
            index_expr_1 = ops.index_expr(get_index_2, torch.int64)
            mul = ops.mul(index_expr_1, index_expr)
            to_dtype = ops.to_dtype(mul, torch.float32, src_dtype = torch.int64)
            constant = ops.constant(0.0, torch.float32)
            maximum = ops.maximum(to_dtype, constant)
            to_dtype_1 = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
            get_index_3 = self.get_index('index3')
            index_expr_2 = ops.index_expr(get_index_3, torch.int64)
            lt = ops.lt(to_dtype_1, index_expr_2)
            get_index_4 = self.get_index('index1')
            index_expr_3 = ops.index_expr(get_index_4, torch.int64)
            get_index_5 = self.get_index('index2')
            index_expr_4 = ops.index_expr(get_index_5, torch.int64)
            mul_1 = ops.mul(index_expr_4, index_expr_3)
            to_dtype_2 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.int64)
            constant_1 = ops.constant(0.0, torch.float32)
            maximum_1 = ops.maximum(to_dtype_2, constant_1)
            to_dtype_3 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
            constant_2 = ops.constant(1, torch.int64)
            add = ops.add(to_dtype_3, constant_2)
            get_index_6 = self.get_index('index1')
            index_expr_5 = ops.index_expr(get_index_6, torch.int64)
            get_index_7 = self.get_index('index2')
            index_expr_6 = ops.index_expr(get_index_7, torch.int64)
            mul_2 = ops.mul(index_expr_6, index_expr_5)
            to_dtype_4 = ops.to_dtype(mul_2, torch.float32, src_dtype = torch.int64)
            constant_3 = ops.constant(0.0, torch.float32)
            maximum_2 = ops.maximum(to_dtype_4, constant_3)
            to_dtype_5 = ops.to_dtype(maximum_2, torch.int64, src_dtype = torch.float32)
            where = ops.where(lt, add, to_dtype_5)
            set_indirect0 = self.set_indirect0(where)
            get_index_8 = self.get_index('index4')
            index_expr_7 = ops.index_expr(get_index_8, torch.int64)
            get_index_9 = self.get_index('index5')
            index_expr_8 = ops.index_expr(get_index_9, torch.int64)
            mul_3 = ops.mul(index_expr_8, index_expr_7)
            to_dtype_6 = ops.to_dtype(mul_3, torch.float32, src_dtype = torch.int64)
            constant_4 = ops.constant(0.0, torch.float32)
            maximum_3 = ops.maximum(to_dtype_6, constant_4)
            to_dtype_7 = ops.to_dtype(maximum_3, torch.int64, src_dtype = torch.float32)
            set_indirect1 = self.set_indirect1(to_dtype_7)
            get_index_10 = self.get_index('index6')
            load_1 = ops.load('arg3_1', get_index_10)
            sub = ops.sub(load, load_1)
            get_index_11 = self.get_index('index4')
            index_expr_9 = ops.index_expr(get_index_11, torch.int64)
            get_index_12 = self.get_index('index5')
            index_expr_10 = ops.index_expr(get_index_12, torch.int64)
            mul_4 = ops.mul(index_expr_10, index_expr_9)
            to_dtype_8 = ops.to_dtype(mul_4, torch.float32, src_dtype = torch.int64)
            constant_5 = ops.constant(0.0, torch.float32)
            maximum_4 = ops.maximum(to_dtype_8, constant_5)
            get_index_13 = self.get_index('index4')
            index_expr_11 = ops.index_expr(get_index_13, torch.int64)
            get_index_14 = self.get_index('index5')
            index_expr_12 = ops.index_expr(get_index_14, torch.int64)
            mul_5 = ops.mul(index_expr_12, index_expr_11)
            to_dtype_9 = ops.to_dtype(mul_5, torch.float32, src_dtype = torch.int64)
            constant_6 = ops.constant(0.0, torch.float32)
            maximum_5 = ops.maximum(to_dtype_9, constant_6)
            to_dtype_10 = ops.to_dtype(maximum_5, torch.int64, src_dtype = torch.float32)
            to_dtype_11 = ops.to_dtype(to_dtype_10, torch.float32, src_dtype = torch.int64)
            sub_1 = ops.sub(maximum_4, to_dtype_11)
            constant_7 = ops.constant(0.0, torch.float32)
            maximum_6 = ops.maximum(sub_1, constant_7)
            constant_8 = ops.constant(1.0, torch.float32)
            minimum = ops.minimum(maximum_6, constant_8)
            mul_6 = ops.mul(sub, minimum)
            get_index_15 = self.get_index('index0')
            store = ops.store('buf1', get_index_15, mul_6, None)
            return store
    buf0_buf1_buf2_buf3_buf4.snodes[2] =
    buf2: SchedulerNode(ComputedBuffer)
    buf2.writes = [MemoryDep('buf2', c0, {c0: s0*s3*s4})]
    buf2.unmet_dependencies = []
    buf2.met_dependencies = 
        [   MemoryDep('arg3_1', (tmp32) + (tmp6)*s2 + c0*s1*s2, {c0: s0}),
            MemoryDep('arg3_1', (tmp40)*s2 + (tmp47) + c0*s1*s2, {c0: s0})]
    buf2.users = [NodeUser(node=SchedulerNode(name='buf3'), can_inplace=True, is_weak=False), NodeUser(node=SchedulerNode(name='buf4'), can_inplace=True, is_weak=False)]
    buf2.group.device = cpu
    buf2.group.iteration = ((s0, s3, s4), ())
    buf2.sizes = ([s0, s3, s4], [])
    class buf2_loop_body:
        var_ranges = {z0: s0, z1: s3, z2: s4}
        index0 = s1/(s3 - 1.0) - 1.0/(s3 - 1.0)
        index1 = z1
        index2 = s2/(s4 - 1.0) - 1.0/(s4 - 1.0)
        index3 = z2
        index4 = s2 - 1
        index5 = indirect0*s2 + indirect1 + s1*s2*z0
        index6 = indirect2*s2 + indirect3 + s1*s2*z0
        index7 = s3*s4*z0 + s4*z1 + z2
        def body(self, ops):
            get_index = self.get_index('index0')
            index_expr = ops.index_expr(get_index, torch.int64)
            get_index_1 = self.get_index('index1')
            index_expr_1 = ops.index_expr(get_index_1, torch.int64)
            mul = ops.mul(index_expr_1, index_expr)
            to_dtype = ops.to_dtype(mul, torch.float32, src_dtype = torch.int64)
            constant = ops.constant(0.0, torch.float32)
            maximum = ops.maximum(to_dtype, constant)
            to_dtype_1 = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
            set_indirect0 = self.set_indirect0(to_dtype_1)
            get_index_2 = self.get_index('index2')
            index_expr_2 = ops.index_expr(get_index_2, torch.int64)
            get_index_3 = self.get_index('index3')
            index_expr_3 = ops.index_expr(get_index_3, torch.int64)
            mul_1 = ops.mul(index_expr_3, index_expr_2)
            to_dtype_2 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.int64)
            constant_1 = ops.constant(0.0, torch.float32)
            maximum_1 = ops.maximum(to_dtype_2, constant_1)
            to_dtype_3 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
            get_index_4 = self.get_index('index4')
            index_expr_4 = ops.index_expr(get_index_4, torch.int64)
            lt = ops.lt(to_dtype_3, index_expr_4)
            get_index_5 = self.get_index('index2')
            index_expr_5 = ops.index_expr(get_index_5, torch.int64)
            get_index_6 = self.get_index('index3')
            index_expr_6 = ops.index_expr(get_index_6, torch.int64)
            mul_2 = ops.mul(index_expr_6, index_expr_5)
            to_dtype_4 = ops.to_dtype(mul_2, torch.float32, src_dtype = torch.int64)
            constant_2 = ops.constant(0.0, torch.float32)
            maximum_2 = ops.maximum(to_dtype_4, constant_2)
            to_dtype_5 = ops.to_dtype(maximum_2, torch.int64, src_dtype = torch.float32)
            constant_3 = ops.constant(1, torch.int64)
            add = ops.add(to_dtype_5, constant_3)
            get_index_7 = self.get_index('index2')
            index_expr_7 = ops.index_expr(get_index_7, torch.int64)
            get_index_8 = self.get_index('index3')
            index_expr_8 = ops.index_expr(get_index_8, torch.int64)
            mul_3 = ops.mul(index_expr_8, index_expr_7)
            to_dtype_6 = ops.to_dtype(mul_3, torch.float32, src_dtype = torch.int64)
            constant_4 = ops.constant(0.0, torch.float32)
            maximum_3 = ops.maximum(to_dtype_6, constant_4)
            to_dtype_7 = ops.to_dtype(maximum_3, torch.int64, src_dtype = torch.float32)
            where = ops.where(lt, add, to_dtype_7)
            set_indirect1 = self.set_indirect1(where)
            get_index_9 = self.get_index('index5')
            load = ops.load('arg3_1', get_index_9)
            get_index_10 = self.get_index('index0')
            index_expr_9 = ops.index_expr(get_index_10, torch.int64)
            get_index_11 = self.get_index('index1')
            index_expr_10 = ops.index_expr(get_index_11, torch.int64)
            mul_4 = ops.mul(index_expr_10, index_expr_9)
            to_dtype_8 = ops.to_dtype(mul_4, torch.float32, src_dtype = torch.int64)
            constant_5 = ops.constant(0.0, torch.float32)
            maximum_4 = ops.maximum(to_dtype_8, constant_5)
            to_dtype_9 = ops.to_dtype(maximum_4, torch.int64, src_dtype = torch.float32)
            set_indirect2 = self.set_indirect2(to_dtype_9)
            get_index_12 = self.get_index('index2')
            index_expr_11 = ops.index_expr(get_index_12, torch.int64)
            get_index_13 = self.get_index('index3')
            index_expr_12 = ops.index_expr(get_index_13, torch.int64)
            mul_5 = ops.mul(index_expr_12, index_expr_11)
            to_dtype_10 = ops.to_dtype(mul_5, torch.float32, src_dtype = torch.int64)
            constant_6 = ops.constant(0.0, torch.float32)
            maximum_5 = ops.maximum(to_dtype_10, constant_6)
            to_dtype_11 = ops.to_dtype(maximum_5, torch.int64, src_dtype = torch.float32)
            set_indirect3 = self.set_indirect3(to_dtype_11)
            get_index_14 = self.get_index('index6')
            load_1 = ops.load('arg3_1', get_index_14)
            sub = ops.sub(load, load_1)
            get_index_15 = self.get_index('index7')
            store = ops.store('buf2', get_index_15, sub, None)
            return store
    buf0_buf1_buf2_buf3_buf4.snodes[3] =
    buf3: SchedulerNode(ComputedBuffer)
    buf3.writes = [MemoryDep('buf3', c0, {c0: s0*s3*s4})]
    buf3.unmet_dependencies = [MemoryDep('buf1', c0, {c0: s0*s3*s4}), MemoryDep('buf2', c0, {c0: s0*s3*s4})]
    buf3.met_dependencies = 
        [   MemoryDep('arg3_1', (tmp25)*s2 + (tmp32) + c0*s1*s2, {c0: s0}),
            MemoryDep('arg3_1', (tmp42)*s2 + (tmp49) + c0*s1*s2, {c0: s0})]
    buf3.users = [NodeUser(node=SchedulerNode(name='buf4'), can_inplace=True, is_weak=False)]
    buf3.group.device = cpu
    buf3.group.iteration = ((s0, s3, s4), ())
    buf3.sizes = ([s0, s3, s4], [])
    class buf3_loop_body:
        var_ranges = {z0: s0, z1: s3, z2: s4}
        index0 = s1/(s3 - 1.0) - 1.0/(s3 - 1.0)
        index1 = z1
        index2 = s1 - 1
        index3 = s2/(s4 - 1.0) - 1.0/(s4 - 1.0)
        index4 = z2
        index5 = indirect0*s2 + indirect1 + s1*s2*z0
        index6 = s3*s4*z0 + s4*z1 + z2
        index7 = indirect2*s2 + indirect3 + s1*s2*z0
        def body(self, ops):
            get_index = self.get_index('index0')
            index_expr = ops.index_expr(get_index, torch.int64)
            get_index_1 = self.get_index('index1')
            index_expr_1 = ops.index_expr(get_index_1, torch.int64)
            mul = ops.mul(index_expr_1, index_expr)
            to_dtype = ops.to_dtype(mul, torch.float32, src_dtype = torch.int64)
            constant = ops.constant(0.0, torch.float32)
            maximum = ops.maximum(to_dtype, constant)
            to_dtype_1 = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
            get_index_2 = self.get_index('index2')
            index_expr_2 = ops.index_expr(get_index_2, torch.int64)
            lt = ops.lt(to_dtype_1, index_expr_2)
            get_index_3 = self.get_index('index0')
            index_expr_3 = ops.index_expr(get_index_3, torch.int64)
            get_index_4 = self.get_index('index1')
            index_expr_4 = ops.index_expr(get_index_4, torch.int64)
            mul_1 = ops.mul(index_expr_4, index_expr_3)
            to_dtype_2 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.int64)
            constant_1 = ops.constant(0.0, torch.float32)
            maximum_1 = ops.maximum(to_dtype_2, constant_1)
            to_dtype_3 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
            constant_2 = ops.constant(1, torch.int64)
            add = ops.add(to_dtype_3, constant_2)
            get_index_5 = self.get_index('index0')
            index_expr_5 = ops.index_expr(get_index_5, torch.int64)
            get_index_6 = self.get_index('index1')
            index_expr_6 = ops.index_expr(get_index_6, torch.int64)
            mul_2 = ops.mul(index_expr_6, index_expr_5)
            to_dtype_4 = ops.to_dtype(mul_2, torch.float32, src_dtype = torch.int64)
            constant_3 = ops.constant(0.0, torch.float32)
            maximum_2 = ops.maximum(to_dtype_4, constant_3)
            to_dtype_5 = ops.to_dtype(maximum_2, torch.int64, src_dtype = torch.float32)
            where = ops.where(lt, add, to_dtype_5)
            set_indirect0 = self.set_indirect0(where)
            get_index_7 = self.get_index('index3')
            index_expr_7 = ops.index_expr(get_index_7, torch.int64)
            get_index_8 = self.get_index('index4')
            index_expr_8 = ops.index_expr(get_index_8, torch.int64)
            mul_3 = ops.mul(index_expr_8, index_expr_7)
            to_dtype_6 = ops.to_dtype(mul_3, torch.float32, src_dtype = torch.int64)
            constant_4 = ops.constant(0.0, torch.float32)
            maximum_3 = ops.maximum(to_dtype_6, constant_4)
            to_dtype_7 = ops.to_dtype(maximum_3, torch.int64, src_dtype = torch.float32)
            set_indirect1 = self.set_indirect1(to_dtype_7)
            get_index_9 = self.get_index('index5')
            load = ops.load('arg3_1', get_index_9)
            get_index_10 = self.get_index('index6')
            load_1 = ops.load('buf1', get_index_10)
            add_1 = ops.add(load, load_1)
            get_index_11 = self.get_index('index0')
            index_expr_9 = ops.index_expr(get_index_11, torch.int64)
            get_index_12 = self.get_index('index1')
            index_expr_10 = ops.index_expr(get_index_12, torch.int64)
            mul_4 = ops.mul(index_expr_10, index_expr_9)
            to_dtype_8 = ops.to_dtype(mul_4, torch.float32, src_dtype = torch.int64)
            constant_5 = ops.constant(0.0, torch.float32)
            maximum_4 = ops.maximum(to_dtype_8, constant_5)
            to_dtype_9 = ops.to_dtype(maximum_4, torch.int64, src_dtype = torch.float32)
            set_indirect2 = self.set_indirect2(to_dtype_9)
            get_index_13 = self.get_index('index3')
            index_expr_11 = ops.index_expr(get_index_13, torch.int64)
            get_index_14 = self.get_index('index4')
            index_expr_12 = ops.index_expr(get_index_14, torch.int64)
            mul_5 = ops.mul(index_expr_12, index_expr_11)
            to_dtype_10 = ops.to_dtype(mul_5, torch.float32, src_dtype = torch.int64)
            constant_6 = ops.constant(0.0, torch.float32)
            maximum_5 = ops.maximum(to_dtype_10, constant_6)
            to_dtype_11 = ops.to_dtype(maximum_5, torch.int64, src_dtype = torch.float32)
            set_indirect3 = self.set_indirect3(to_dtype_11)
            get_index_15 = self.get_index('index7')
            load_2 = ops.load('arg3_1', get_index_15)
            get_index_16 = self.get_index('index6')
            load_3 = ops.load('buf2', get_index_16)
            get_index_17 = self.get_index('index3')
            index_expr_13 = ops.index_expr(get_index_17, torch.int64)
            get_index_18 = self.get_index('index4')
            index_expr_14 = ops.index_expr(get_index_18, torch.int64)
            mul_6 = ops.mul(index_expr_14, index_expr_13)
            to_dtype_12 = ops.to_dtype(mul_6, torch.float32, src_dtype = torch.int64)
            constant_7 = ops.constant(0.0, torch.float32)
            maximum_6 = ops.maximum(to_dtype_12, constant_7)
            get_index_19 = self.get_index('index3')
            index_expr_15 = ops.index_expr(get_index_19, torch.int64)
            get_index_20 = self.get_index('index4')
            index_expr_16 = ops.index_expr(get_index_20, torch.int64)
            mul_7 = ops.mul(index_expr_16, index_expr_15)
            to_dtype_13 = ops.to_dtype(mul_7, torch.float32, src_dtype = torch.int64)
            constant_8 = ops.constant(0.0, torch.float32)
            maximum_7 = ops.maximum(to_dtype_13, constant_8)
            to_dtype_14 = ops.to_dtype(maximum_7, torch.int64, src_dtype = torch.float32)
            to_dtype_15 = ops.to_dtype(to_dtype_14, torch.float32, src_dtype = torch.int64)
            sub = ops.sub(maximum_6, to_dtype_15)
            constant_9 = ops.constant(0.0, torch.float32)
            maximum_8 = ops.maximum(sub, constant_9)
            constant_10 = ops.constant(1.0, torch.float32)
            minimum = ops.minimum(maximum_8, constant_10)
            mul_8 = ops.mul(load_3, minimum)
            add_2 = ops.add(load_2, mul_8)
            sub_1 = ops.sub(add_1, add_2)
            get_index_21 = self.get_index('index6')
            store = ops.store('buf3', get_index_21, sub_1, None)
            return store
    buf0_buf1_buf2_buf3_buf4.snodes[4] =
    buf4: SchedulerNode(ComputedBuffer)
    buf4.writes = [MemoryDep('buf4', c0, {c0: s0*s3*s4})]
    buf4.unmet_dependencies = [MemoryDep('buf2', c0, {c0: s0*s3*s4}), MemoryDep('buf3', c0, {c0: s0*s3*s4})]
    buf4.met_dependencies = [MemoryDep('arg3_1', (tmp13) + (tmp6)*s2 + c0*s1*s2, {c0: s0})]
    buf4.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf4.group.device = cpu
    buf4.group.iteration = ((s0, s3, s4), ())
    buf4.sizes = ([s0, s3, s4], [])
    class buf4_loop_body:
        var_ranges = {z0: s0, z1: s3, z2: s4}
        index0 = s1/(s3 - 1.0) - 1.0/(s3 - 1.0)
        index1 = z1
        index2 = s2/(s4 - 1.0) - 1.0/(s4 - 1.0)
        index3 = z2
        index4 = indirect0*s2 + indirect1 + s1*s2*z0
        index5 = s3*s4*z0 + s4*z1 + z2
        def body(self, ops):
            get_index = self.get_index('index0')
            index_expr = ops.index_expr(get_index, torch.int64)
            get_index_1 = self.get_index('index1')
            index_expr_1 = ops.index_expr(get_index_1, torch.int64)
            mul = ops.mul(index_expr_1, index_expr)
            to_dtype = ops.to_dtype(mul, torch.float32, src_dtype = torch.int64)
            constant = ops.constant(0.0, torch.float32)
            maximum = ops.maximum(to_dtype, constant)
            to_dtype_1 = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
            set_indirect0 = self.set_indirect0(to_dtype_1)
            get_index_2 = self.get_index('index2')
            index_expr_2 = ops.index_expr(get_index_2, torch.int64)
            get_index_3 = self.get_index('index3')
            index_expr_3 = ops.index_expr(get_index_3, torch.int64)
            mul_1 = ops.mul(index_expr_3, index_expr_2)
            to_dtype_2 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.int64)
            constant_1 = ops.constant(0.0, torch.float32)
            maximum_1 = ops.maximum(to_dtype_2, constant_1)
            to_dtype_3 = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
            set_indirect1 = self.set_indirect1(to_dtype_3)
            get_index_4 = self.get_index('index4')
            load = ops.load('arg3_1', get_index_4)
            get_index_5 = self.get_index('index5')
            load_1 = ops.load('buf2', get_index_5)
            get_index_6 = self.get_index('index2')
            index_expr_4 = ops.index_expr(get_index_6, torch.int64)
            get_index_7 = self.get_index('index3')
            index_expr_5 = ops.index_expr(get_index_7, torch.int64)
            mul_2 = ops.mul(index_expr_5, index_expr_4)
            to_dtype_4 = ops.to_dtype(mul_2, torch.float32, src_dtype = torch.int64)
            constant_2 = ops.constant(0.0, torch.float32)
            maximum_2 = ops.maximum(to_dtype_4, constant_2)
            get_index_8 = self.get_index('index2')
            index_expr_6 = ops.index_expr(get_index_8, torch.int64)
            get_index_9 = self.get_index('index3')
            index_expr_7 = ops.index_expr(get_index_9, torch.int64)
            mul_3 = ops.mul(index_expr_7, index_expr_6)
            to_dtype_5 = ops.to_dtype(mul_3, torch.float32, src_dtype = torch.int64)
            constant_3 = ops.constant(0.0, torch.float32)
            maximum_3 = ops.maximum(to_dtype_5, constant_3)
            to_dtype_6 = ops.to_dtype(maximum_3, torch.int64, src_dtype = torch.float32)
            to_dtype_7 = ops.to_dtype(to_dtype_6, torch.float32, src_dtype = torch.int64)
            sub = ops.sub(maximum_2, to_dtype_7)
            constant_4 = ops.constant(0.0, torch.float32)
            maximum_4 = ops.maximum(sub, constant_4)
            constant_5 = ops.constant(1.0, torch.float32)
            minimum = ops.minimum(maximum_4, constant_5)
            mul_4 = ops.mul(load_1, minimum)
            add = ops.add(load, mul_4)
            get_index_10 = self.get_index('index5')
            load_2 = ops.load('buf3', get_index_10)
            get_index_11 = self.get_index('index0')
            index_expr_8 = ops.index_expr(get_index_11, torch.int64)
            get_index_12 = self.get_index('index1')
            index_expr_9 = ops.index_expr(get_index_12, torch.int64)
            mul_5 = ops.mul(index_expr_9, index_expr_8)
            to_dtype_8 = ops.to_dtype(mul_5, torch.float32, src_dtype = torch.int64)
            constant_6 = ops.constant(0.0, torch.float32)
            maximum_5 = ops.maximum(to_dtype_8, constant_6)
            get_index_13 = self.get_index('index0')
            index_expr_10 = ops.index_expr(get_index_13, torch.int64)
            get_index_14 = self.get_index('index1')
            index_expr_11 = ops.index_expr(get_index_14, torch.int64)
            mul_6 = ops.mul(index_expr_11, index_expr_10)
            to_dtype_9 = ops.to_dtype(mul_6, torch.float32, src_dtype = torch.int64)
            constant_7 = ops.constant(0.0, torch.float32)
            maximum_6 = ops.maximum(to_dtype_9, constant_7)
            to_dtype_10 = ops.to_dtype(maximum_6, torch.int64, src_dtype = torch.float32)
            to_dtype_11 = ops.to_dtype(to_dtype_10, torch.float32, src_dtype = torch.int64)
            sub_1 = ops.sub(maximum_5, to_dtype_11)
            constant_8 = ops.constant(0.0, torch.float32)
            maximum_7 = ops.maximum(sub_1, constant_8)
            constant_9 = ops.constant(1.0, torch.float32)
            minimum_1 = ops.minimum(maximum_7, constant_9)
            mul_7 = ops.mul(load_2, minimum_1)
            add_1 = ops.add(add, mul_7)
            get_index_15 = self.get_index('index5')
            store = ops.store('buf4', get_index_15, add_1, None)
            return store


