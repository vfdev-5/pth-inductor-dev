buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep('buf1', c0, {c0: 629280})]
buf1.unmet_dependencies = []
buf1.met_dependencies = 
    [   MemoryDep('arg1_1', 6*c0 + 3*c2 + 1, {c0: 2, c1: 157320, c2: 2}),
        MemoryDep('arg1_1', 6*c0 + 3*c2 + 2, {c0: 2, c1: 157320, c2: 2}),
        MemoryDep('arg1_1', 6*c0 + 3*c2, {c0: 2, c1: 157320, c2: 2})]
buf1.users = [NodeUser(node=SchedulerNode(name='buf2'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf3'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf4'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf5'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf6'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf7'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf8'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf9'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf10'), can_inplace=False)]
buf1.group.device = cuda:0
buf1.group.iteration = (629280, 1)
buf1.sizes = ([2, 345, 456, 2], [])
class buf1_loop_body:
    var_ranges = {z0: 2, z1: 345, z2: 456, z3: 2}
    index0 = z2
    index1 = 455 - z2
    index2 = z1
    index3 = 344 - z1
    index4 = 6*z0 + 3*z3
    index5 = 6*z0 + 3*z3 + 1
    index6 = 6*z0 + 3*z3 + 2
    index7 = 314640*z0 + 912*z1 + 2*z2 + z3
    def body(self, ops):
        constant = ops.constant(0, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(constant, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        constant_2 = ops.constant(-1, torch.int64)
        constant_3 = ops.constant(0, torch.int64)
        ge = ops.ge(constant_2, constant_3)
        constant_4 = ops.constant(-1, torch.int64)
        constant_5 = ops.constant(1, torch.int64)
        lt_1 = ops.lt(constant_4, constant_5)
        and_ = ops.and_(ge, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        add = ops.add(masked_subblock1, masked_subblock2)
        constant_6 = ops.constant(-2, torch.int64)
        constant_7 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(constant_6, constant_7)
        masked_subblock3 = self.masked_subblock3(ge_1, 0.0)
        add_1 = ops.add(add, masked_subblock3)
        get_index = self.get_index('index4')
        load = ops.load('arg1_1', get_index)
        mul = ops.mul(add_1, load)
        constant_8 = ops.constant(1, torch.int64)
        constant_9 = ops.constant(1, torch.int64)
        lt_2 = ops.lt(constant_8, constant_9)
        masked_subblock4 = self.masked_subblock4(lt_2, 0.0)
        constant_10 = ops.constant(0, torch.int64)
        constant_11 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(constant_10, constant_11)
        constant_12 = ops.constant(0, torch.int64)
        constant_13 = ops.constant(1, torch.int64)
        lt_3 = ops.lt(constant_12, constant_13)
        and__1 = ops.and_(ge_2, lt_3)
        masked_subblock5 = self.masked_subblock5(and__1, 0.0)
        add_2 = ops.add(masked_subblock4, masked_subblock5)
        constant_14 = ops.constant(-1, torch.int64)
        constant_15 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(constant_14, constant_15)
        masked_subblock6 = self.masked_subblock6(ge_3, 0.0)
        add_3 = ops.add(add_2, masked_subblock6)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('arg1_1', get_index_1)
        mul_1 = ops.mul(add_3, load_1)
        add_4 = ops.add(mul, mul_1)
        constant_16 = ops.constant(2, torch.int64)
        constant_17 = ops.constant(1, torch.int64)
        lt_4 = ops.lt(constant_16, constant_17)
        masked_subblock7 = self.masked_subblock7(lt_4, 0.0)
        constant_18 = ops.constant(1, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(constant_18, constant_19)
        constant_20 = ops.constant(1, torch.int64)
        constant_21 = ops.constant(1, torch.int64)
        lt_5 = ops.lt(constant_20, constant_21)
        and__2 = ops.and_(ge_4, lt_5)
        masked_subblock8 = self.masked_subblock8(and__2, 0.0)
        add_5 = ops.add(masked_subblock7, masked_subblock8)
        constant_22 = ops.constant(0, torch.int64)
        constant_23 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(constant_22, constant_23)
        masked_subblock9 = self.masked_subblock9(ge_5, 0.0)
        add_6 = ops.add(add_5, masked_subblock9)
        get_index_2 = self.get_index('index6')
        load_2 = ops.load('arg1_1', get_index_2)
        mul_2 = ops.mul(add_6, load_2)
        add_7 = ops.add(add_4, mul_2)
        get_index_3 = self.get_index('index7')
        store = ops.store('buf1', get_index_3, add_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32)
        constant = ops.constant(228.0, torch.float32)
        lt = ops.lt(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32)
        constant_1 = ops.constant(0.004385964912280702, torch.float32)
        mul = ops.mul(to_dtype_1, constant_1)
        constant_2 = ops.constant(-0.9978070175438597, torch.float32)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32)
        constant_3 = ops.constant(0.004385964912280702, torch.float32)
        mul_1 = ops.mul(to_dtype_2, constant_3)
        constant_4 = ops.constant(0.9978070175438597, torch.float32)
        sub = ops.sub(constant_4, mul_1)
        where = ops.where(lt, add, sub)
        return where
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32)
        constant = ops.constant(172.5, torch.float32)
        lt = ops.lt(to_dtype, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32)
        constant_1 = ops.constant(0.005797101449275362, torch.float32)
        mul = ops.mul(to_dtype_1, constant_1)
        constant_2 = ops.constant(-0.9971014492753624, torch.float32)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32)
        constant_3 = ops.constant(0.005797101449275362, torch.float32)
        mul_1 = ops.mul(to_dtype_2, constant_3)
        constant_4 = ops.constant(0.9971014492753624, torch.float32)
        sub = ops.sub(constant_4, mul_1)
        where = ops.where(lt, add, sub)
        return where
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock4(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32)
        constant = ops.constant(228.0, torch.float32)
        lt = ops.lt(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32)
        constant_1 = ops.constant(0.004385964912280702, torch.float32)
        mul = ops.mul(to_dtype_1, constant_1)
        constant_2 = ops.constant(-0.9978070175438597, torch.float32)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32)
        constant_3 = ops.constant(0.004385964912280702, torch.float32)
        mul_1 = ops.mul(to_dtype_2, constant_3)
        constant_4 = ops.constant(0.9978070175438597, torch.float32)
        sub = ops.sub(constant_4, mul_1)
        where = ops.where(lt, add, sub)
        return where
    def masked_subblock5(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32)
        constant = ops.constant(172.5, torch.float32)
        lt = ops.lt(to_dtype, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32)
        constant_1 = ops.constant(0.005797101449275362, torch.float32)
        mul = ops.mul(to_dtype_1, constant_1)
        constant_2 = ops.constant(-0.9971014492753624, torch.float32)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32)
        constant_3 = ops.constant(0.005797101449275362, torch.float32)
        mul_1 = ops.mul(to_dtype_2, constant_3)
        constant_4 = ops.constant(0.9971014492753624, torch.float32)
        sub = ops.sub(constant_4, mul_1)
        where = ops.where(lt, add, sub)
        return where
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock7(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32)
        constant = ops.constant(228.0, torch.float32)
        lt = ops.lt(to_dtype, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32)
        constant_1 = ops.constant(0.004385964912280702, torch.float32)
        mul = ops.mul(to_dtype_1, constant_1)
        constant_2 = ops.constant(-0.9978070175438597, torch.float32)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32)
        constant_3 = ops.constant(0.004385964912280702, torch.float32)
        mul_1 = ops.mul(to_dtype_2, constant_3)
        constant_4 = ops.constant(0.9978070175438597, torch.float32)
        sub = ops.sub(constant_4, mul_1)
        where = ops.where(lt, add, sub)
        return where
    def masked_subblock8(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32)
        constant = ops.constant(172.5, torch.float32)
        lt = ops.lt(to_dtype, constant)
        get_index_1 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32)
        constant_1 = ops.constant(0.005797101449275362, torch.float32)
        mul = ops.mul(to_dtype_1, constant_1)
        constant_2 = ops.constant(-0.9971014492753624, torch.float32)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32)
        constant_3 = ops.constant(0.005797101449275362, torch.float32)
        mul_1 = ops.mul(to_dtype_2, constant_3)
        constant_4 = ops.constant(0.9971014492753624, torch.float32)
        sub = ops.sub(constant_4, mul_1)
        where = ops.where(lt, add, sub)
        return where
    def masked_subblock9(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep('buf2', c0, {c0: 943920})]
buf2.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf2.met_dependencies = [MemoryDep('arg0_1', 456*(tmp43) + (tmp87) + 157320*c0, {c0: 6})]
buf2.users = [NodeUser(node=SchedulerNode(name='buf11'), can_inplace=True)]
buf2.group.device = cuda:0
buf2.group.iteration = (943920, 1)
buf2.sizes = ([2, 3, 157320], [])
class buf2_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 456*indirect0 + indirect1 + 471960*z0 + 157320*z1
    index3 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_3 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_3)
        constant_4 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_4)
        floor_1 = ops.floor(add_1)
        constant_5 = ops.constant(456.0, torch.float32)
        lt = ops.lt(floor_1, constant_5)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_6 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_6)
        constant_7 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_7)
        floor_2 = ops.floor(add_2)
        constant_8 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(floor_2, constant_8)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_9 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_9)
        constant_10 = ops.constant(172.0, torch.float32)
        add_3 = ops.add(mul_3, constant_10)
        floor_3 = ops.floor(add_3)
        constant_11 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(floor_3, constant_11)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_4, constant_13)
        floor_4 = ops.floor(add_4)
        to_dtype = ops.to_dtype(floor_4, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_14)
        set_indirect0 = self.set_indirect0(where)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1', get_index_5)
        constant_15 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_15)
        constant_16 = ops.constant(227.5, torch.float32)
        add_5 = ops.add(mul_5, constant_16)
        floor_5 = ops.floor(add_5)
        constant_17 = ops.constant(0.0, torch.float32)
        ge_2 = ops.ge(floor_5, constant_17)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1', get_index_6)
        constant_18 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_6, constant_18)
        constant_19 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_6, constant_19)
        floor_6 = ops.floor(add_6)
        constant_20 = ops.constant(456.0, torch.float32)
        lt_2 = ops.lt(floor_6, constant_20)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_21 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_7, constant_21)
        constant_22 = ops.constant(172.0, torch.float32)
        add_7 = ops.add(mul_7, constant_22)
        floor_7 = ops.floor(add_7)
        constant_23 = ops.constant(0.0, torch.float32)
        ge_3 = ops.ge(floor_7, constant_23)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_24 = ops.constant(172.5, torch.float32)
        mul_8 = ops.mul(load_8, constant_24)
        constant_25 = ops.constant(172.0, torch.float32)
        add_8 = ops.add(mul_8, constant_25)
        floor_8 = ops.floor(add_8)
        constant_26 = ops.constant(345.0, torch.float32)
        lt_3 = ops.lt(floor_8, constant_26)
        logical_and_3 = ops.logical_and(ge_3, lt_3)
        logical_and_4 = ops.logical_and(lt_2, logical_and_3)
        logical_and_5 = ops.logical_and(ge_2, logical_and_4)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf1', get_index_9)
        constant_27 = ops.constant(228.0, torch.float32)
        mul_9 = ops.mul(load_9, constant_27)
        constant_28 = ops.constant(227.5, torch.float32)
        add_9 = ops.add(mul_9, constant_28)
        floor_9 = ops.floor(add_9)
        to_dtype_1 = ops.to_dtype(floor_9, torch.int64)
        constant_29 = ops.constant(0, torch.int64)
        where_1 = ops.where(logical_and_5, to_dtype_1, constant_29)
        set_indirect1 = self.set_indirect1(where_1)
        get_index_10 = self.get_index('index2')
        load_10 = ops.load('arg0_1', get_index_10)
        get_index_11 = self.get_index('index3')
        store = ops.store('buf2', get_index_11, load_10, None)
        return store


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = [MemoryDep('buf3', c0, {c0: 943920})]
buf3.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf3.met_dependencies = []
buf3.users = [NodeUser(node=SchedulerNode(name='buf11'), can_inplace=True)]
buf3.group.device = cuda:0
buf3.group.iteration = (943920, 1)
buf3.sizes = ([2, 3, 157320], [])
class buf3_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_3 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_3)
        constant_4 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_4)
        floor_1 = ops.floor(add_1)
        constant_5 = ops.constant(456.0, torch.float32)
        lt = ops.lt(floor_1, constant_5)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_6 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_6)
        constant_7 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_7)
        floor_2 = ops.floor(add_2)
        constant_8 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(floor_2, constant_8)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_9 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_9)
        constant_10 = ops.constant(172.0, torch.float32)
        add_3 = ops.add(mul_3, constant_10)
        floor_3 = ops.floor(add_3)
        constant_11 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(floor_3, constant_11)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_12 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_12)
        constant_13 = ops.constant(227.5, torch.float32)
        add_4 = ops.add(mul_4, constant_13)
        floor_4 = ops.floor(add_4)
        constant_14 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_4, constant_14)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1', get_index_5)
        constant_15 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_15)
        constant_16 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_5, constant_16)
        sub = ops.sub(add_5, add_6)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_17 = ops.constant(172.5, torch.float32)
        mul_6 = ops.mul(load_6, constant_17)
        constant_18 = ops.constant(172.0, torch.float32)
        add_7 = ops.add(mul_6, constant_18)
        floor_5 = ops.floor(add_7)
        constant_19 = ops.constant(1.0, torch.float32)
        add_8 = ops.add(floor_5, constant_19)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_20 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_7, constant_20)
        constant_21 = ops.constant(172.0, torch.float32)
        add_9 = ops.add(mul_7, constant_21)
        sub_1 = ops.sub(add_8, add_9)
        mul_8 = ops.mul(sub, sub_1)
        constant_22 = ops.constant(0.0, torch.float32)
        where = ops.where(logical_and_2, mul_8, constant_22)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf3', get_index_8, where, None)
        return store


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = [MemoryDep('buf4', c0, {c0: 943920})]
buf4.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf4.met_dependencies = [MemoryDep('arg0_1', 456*(tmp47) + (tmp97) + 157320*c0, {c0: 6})]
buf4.users = [NodeUser(node=SchedulerNode(name='buf11'), can_inplace=True)]
buf4.group.device = cuda:0
buf4.group.iteration = (943920, 1)
buf4.sizes = ([2, 3, 157320], [])
class buf4_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 456*indirect0 + indirect1 + 471960*z0 + 157320*z1
    index3 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(floor_2, constant_10)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_11 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_11)
        constant_12 = ops.constant(172.0, torch.float32)
        add_5 = ops.add(mul_3, constant_12)
        floor_3 = ops.floor(add_5)
        constant_13 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(floor_3, constant_13)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_14 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_14)
        constant_15 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_4, constant_15)
        floor_4 = ops.floor(add_6)
        to_dtype = ops.to_dtype(floor_4, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_16)
        set_indirect0 = self.set_indirect0(where)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1', get_index_5)
        constant_17 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_17)
        constant_18 = ops.constant(227.5, torch.float32)
        add_7 = ops.add(mul_5, constant_18)
        floor_5 = ops.floor(add_7)
        constant_19 = ops.constant(1.0, torch.float32)
        add_8 = ops.add(floor_5, constant_19)
        constant_20 = ops.constant(0.0, torch.float32)
        ge_2 = ops.ge(add_8, constant_20)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1', get_index_6)
        constant_21 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_6, constant_21)
        constant_22 = ops.constant(227.5, torch.float32)
        add_9 = ops.add(mul_6, constant_22)
        floor_6 = ops.floor(add_9)
        constant_23 = ops.constant(1.0, torch.float32)
        add_10 = ops.add(floor_6, constant_23)
        constant_24 = ops.constant(456.0, torch.float32)
        lt_2 = ops.lt(add_10, constant_24)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_25 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_7, constant_25)
        constant_26 = ops.constant(172.0, torch.float32)
        add_11 = ops.add(mul_7, constant_26)
        floor_7 = ops.floor(add_11)
        constant_27 = ops.constant(0.0, torch.float32)
        ge_3 = ops.ge(floor_7, constant_27)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_28 = ops.constant(172.5, torch.float32)
        mul_8 = ops.mul(load_8, constant_28)
        constant_29 = ops.constant(172.0, torch.float32)
        add_12 = ops.add(mul_8, constant_29)
        floor_8 = ops.floor(add_12)
        constant_30 = ops.constant(345.0, torch.float32)
        lt_3 = ops.lt(floor_8, constant_30)
        logical_and_3 = ops.logical_and(ge_3, lt_3)
        logical_and_4 = ops.logical_and(lt_2, logical_and_3)
        logical_and_5 = ops.logical_and(ge_2, logical_and_4)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf1', get_index_9)
        constant_31 = ops.constant(228.0, torch.float32)
        mul_9 = ops.mul(load_9, constant_31)
        constant_32 = ops.constant(227.5, torch.float32)
        add_13 = ops.add(mul_9, constant_32)
        floor_9 = ops.floor(add_13)
        constant_33 = ops.constant(1.0, torch.float32)
        add_14 = ops.add(floor_9, constant_33)
        to_dtype_1 = ops.to_dtype(add_14, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        where_1 = ops.where(logical_and_5, to_dtype_1, constant_34)
        set_indirect1 = self.set_indirect1(where_1)
        get_index_10 = self.get_index('index2')
        load_10 = ops.load('arg0_1', get_index_10)
        get_index_11 = self.get_index('index3')
        store = ops.store('buf4', get_index_11, load_10, None)
        return store


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = [MemoryDep('buf5', c0, {c0: 943920})]
buf5.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf5.met_dependencies = []
buf5.users = [NodeUser(node=SchedulerNode(name='buf11'), can_inplace=True)]
buf5.group.device = cuda:0
buf5.group.iteration = (943920, 1)
buf5.sizes = ([2, 3, 157320], [])
class buf5_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(floor_2, constant_10)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_11 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_11)
        constant_12 = ops.constant(172.0, torch.float32)
        add_5 = ops.add(mul_3, constant_12)
        floor_3 = ops.floor(add_5)
        constant_13 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(floor_3, constant_13)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_14 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_14)
        constant_15 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_4, constant_15)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1', get_index_5)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_7 = ops.add(mul_5, constant_17)
        floor_4 = ops.floor(add_7)
        sub = ops.sub(add_6, floor_4)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_18 = ops.constant(172.5, torch.float32)
        mul_6 = ops.mul(load_6, constant_18)
        constant_19 = ops.constant(172.0, torch.float32)
        add_8 = ops.add(mul_6, constant_19)
        floor_5 = ops.floor(add_8)
        constant_20 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_5, constant_20)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_21 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_7, constant_21)
        constant_22 = ops.constant(172.0, torch.float32)
        add_10 = ops.add(mul_7, constant_22)
        sub_1 = ops.sub(add_9, add_10)
        mul_8 = ops.mul(sub, sub_1)
        constant_23 = ops.constant(0.0, torch.float32)
        where = ops.where(logical_and_2, mul_8, constant_23)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf5', get_index_8, where, None)
        return store


buf6: SchedulerNode(ComputedBuffer)
buf6.writes = [MemoryDep('buf6', c0, {c0: 943920})]
buf6.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf6.met_dependencies = [MemoryDep('arg0_1', 456*(tmp49) + (tmp97) + 157320*c0, {c0: 6})]
buf6.users = [NodeUser(node=SchedulerNode(name='buf11'), can_inplace=True)]
buf6.group.device = cuda:0
buf6.group.iteration = (943920, 1)
buf6.sizes = ([2, 3, 157320], [])
class buf6_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 456*indirect0 + indirect1 + 471960*z0 + 157320*z1
    index3 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_3 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_3)
        constant_4 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_4)
        floor_1 = ops.floor(add_1)
        constant_5 = ops.constant(456.0, torch.float32)
        lt = ops.lt(floor_1, constant_5)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_6 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_6)
        constant_7 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_7)
        floor_2 = ops.floor(add_2)
        constant_8 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_8)
        constant_9 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_9)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_10 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_10)
        constant_11 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_11)
        floor_3 = ops.floor(add_4)
        constant_12 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_12)
        constant_13 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_13)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_14 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_14)
        constant_15 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_4, constant_15)
        floor_4 = ops.floor(add_6)
        constant_16 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_4, constant_16)
        to_dtype = ops.to_dtype(add_7, torch.int64)
        constant_17 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_17)
        set_indirect0 = self.set_indirect0(where)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1', get_index_5)
        constant_18 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_18)
        constant_19 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_5, constant_19)
        floor_5 = ops.floor(add_8)
        constant_20 = ops.constant(0.0, torch.float32)
        ge_2 = ops.ge(floor_5, constant_20)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf1', get_index_6)
        constant_21 = ops.constant(228.0, torch.float32)
        mul_6 = ops.mul(load_6, constant_21)
        constant_22 = ops.constant(227.5, torch.float32)
        add_9 = ops.add(mul_6, constant_22)
        floor_6 = ops.floor(add_9)
        constant_23 = ops.constant(456.0, torch.float32)
        lt_2 = ops.lt(floor_6, constant_23)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_24 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_7, constant_24)
        constant_25 = ops.constant(172.0, torch.float32)
        add_10 = ops.add(mul_7, constant_25)
        floor_7 = ops.floor(add_10)
        constant_26 = ops.constant(1.0, torch.float32)
        add_11 = ops.add(floor_7, constant_26)
        constant_27 = ops.constant(0.0, torch.float32)
        ge_3 = ops.ge(add_11, constant_27)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf1', get_index_8)
        constant_28 = ops.constant(172.5, torch.float32)
        mul_8 = ops.mul(load_8, constant_28)
        constant_29 = ops.constant(172.0, torch.float32)
        add_12 = ops.add(mul_8, constant_29)
        floor_8 = ops.floor(add_12)
        constant_30 = ops.constant(1.0, torch.float32)
        add_13 = ops.add(floor_8, constant_30)
        constant_31 = ops.constant(345.0, torch.float32)
        lt_3 = ops.lt(add_13, constant_31)
        logical_and_3 = ops.logical_and(ge_3, lt_3)
        logical_and_4 = ops.logical_and(lt_2, logical_and_3)
        logical_and_5 = ops.logical_and(ge_2, logical_and_4)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf1', get_index_9)
        constant_32 = ops.constant(228.0, torch.float32)
        mul_9 = ops.mul(load_9, constant_32)
        constant_33 = ops.constant(227.5, torch.float32)
        add_14 = ops.add(mul_9, constant_33)
        floor_9 = ops.floor(add_14)
        to_dtype_1 = ops.to_dtype(floor_9, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        where_1 = ops.where(logical_and_5, to_dtype_1, constant_34)
        set_indirect1 = self.set_indirect1(where_1)
        get_index_10 = self.get_index('index2')
        load_10 = ops.load('arg0_1', get_index_10)
        get_index_11 = self.get_index('index3')
        store = ops.store('buf6', get_index_11, load_10, None)
        return store


buf7: SchedulerNode(ComputedBuffer)
buf7.writes = [MemoryDep('buf7', c0, {c0: 943920})]
buf7.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf7.met_dependencies = []
buf7.users = [NodeUser(node=SchedulerNode(name='buf11'), can_inplace=True)]
buf7.group.device = cuda:0
buf7.group.iteration = (943920, 1)
buf7.sizes = ([2, 3, 157320], [])
class buf7_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(0.0, torch.float32)
        ge = ops.ge(floor, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_3 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_3)
        constant_4 = ops.constant(227.5, torch.float32)
        add_1 = ops.add(mul_1, constant_4)
        floor_1 = ops.floor(add_1)
        constant_5 = ops.constant(456.0, torch.float32)
        lt = ops.lt(floor_1, constant_5)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_6 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_6)
        constant_7 = ops.constant(172.0, torch.float32)
        add_2 = ops.add(mul_2, constant_7)
        floor_2 = ops.floor(add_2)
        constant_8 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_2, constant_8)
        constant_9 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_3, constant_9)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_10 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_10)
        constant_11 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_3, constant_11)
        floor_3 = ops.floor(add_4)
        constant_12 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_3, constant_12)
        constant_13 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_5, constant_13)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_14 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_14)
        constant_15 = ops.constant(227.5, torch.float32)
        add_6 = ops.add(mul_4, constant_15)
        floor_4 = ops.floor(add_6)
        constant_16 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_4, constant_16)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1', get_index_5)
        constant_17 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_17)
        constant_18 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_5, constant_18)
        sub = ops.sub(add_7, add_8)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_19 = ops.constant(172.5, torch.float32)
        mul_6 = ops.mul(load_6, constant_19)
        constant_20 = ops.constant(172.0, torch.float32)
        add_9 = ops.add(mul_6, constant_20)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_21 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_7, constant_21)
        constant_22 = ops.constant(172.0, torch.float32)
        add_10 = ops.add(mul_7, constant_22)
        floor_5 = ops.floor(add_10)
        sub_1 = ops.sub(add_9, floor_5)
        mul_8 = ops.mul(sub, sub_1)
        constant_23 = ops.constant(0.0, torch.float32)
        where = ops.where(logical_and_2, mul_8, constant_23)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf7', get_index_8, where, None)
        return store


buf8: SchedulerNode(ComputedBuffer)
buf8.writes = [MemoryDep('buf8', c0, {c0: 943920})]
buf8.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf8.met_dependencies = []
buf8.users = [NodeUser(node=SchedulerNode(name='buf11'), can_inplace=True)]
buf8.group.device = cuda:0
buf8.group.iteration = (943920, 1)
buf8.sizes = ([2, 3, 157320], [])
class buf8_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(172.5, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(172.0, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf8', get_index_5, where, None)
        return store


buf9: SchedulerNode(ComputedBuffer)
buf9.writes = [MemoryDep('buf9', c0, {c0: 943920})]
buf9.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf9.met_dependencies = []
buf9.users = [NodeUser(node=SchedulerNode(name='buf11'), can_inplace=True)]
buf9.group.device = cuda:0
buf9.group.iteration = (943920, 1)
buf9.sizes = ([2, 3, 157320], [])
class buf9_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        floor_4 = ops.floor(add_8)
        constant_18 = ops.constant(1.0, torch.float32)
        add_9 = ops.add(floor_4, constant_18)
        to_dtype = ops.to_dtype(add_9, torch.int64)
        constant_19 = ops.constant(0, torch.int64)
        where = ops.where(logical_and_2, to_dtype, constant_19)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf9', get_index_5, where, None)
        return store


buf10: SchedulerNode(ComputedBuffer)
buf10.writes = [MemoryDep('buf10', c0, {c0: 943920})]
buf10.unmet_dependencies = 
    [   MemoryDep('buf1', 314640*c0 + 2*c2 + 1, {c0: 2, c1: 3, c2: 157320}),
        MemoryDep('buf1', 314640*c0 + 2*c2, {c0: 2, c1: 3, c2: 157320})]
buf10.met_dependencies = []
buf10.users = [NodeUser(node=SchedulerNode(name='buf11'), can_inplace=True)]
buf10.group.device = cuda:0
buf10.group.iteration = (943920, 1)
buf10.sizes = ([2, 3, 157320], [])
class buf10_loop_body:
    var_ranges = {z0: 2, z1: 3, z2: 157320}
    index0 = 314640*z0 + 2*z2
    index1 = 314640*z0 + 2*z2 + 1
    index2 = 471960*z0 + 157320*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(228.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(227.5, torch.float32)
        add = ops.add(mul, constant_1)
        floor = ops.floor(add)
        constant_2 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(floor, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        ge = ops.ge(add_1, constant_3)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant_4 = ops.constant(228.0, torch.float32)
        mul_1 = ops.mul(load_1, constant_4)
        constant_5 = ops.constant(227.5, torch.float32)
        add_2 = ops.add(mul_1, constant_5)
        floor_1 = ops.floor(add_2)
        constant_6 = ops.constant(1.0, torch.float32)
        add_3 = ops.add(floor_1, constant_6)
        constant_7 = ops.constant(456.0, torch.float32)
        lt = ops.lt(add_3, constant_7)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant_8 = ops.constant(172.5, torch.float32)
        mul_2 = ops.mul(load_2, constant_8)
        constant_9 = ops.constant(172.0, torch.float32)
        add_4 = ops.add(mul_2, constant_9)
        floor_2 = ops.floor(add_4)
        constant_10 = ops.constant(1.0, torch.float32)
        add_5 = ops.add(floor_2, constant_10)
        constant_11 = ops.constant(0.0, torch.float32)
        ge_1 = ops.ge(add_5, constant_11)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf1', get_index_3)
        constant_12 = ops.constant(172.5, torch.float32)
        mul_3 = ops.mul(load_3, constant_12)
        constant_13 = ops.constant(172.0, torch.float32)
        add_6 = ops.add(mul_3, constant_13)
        floor_3 = ops.floor(add_6)
        constant_14 = ops.constant(1.0, torch.float32)
        add_7 = ops.add(floor_3, constant_14)
        constant_15 = ops.constant(345.0, torch.float32)
        lt_1 = ops.lt(add_7, constant_15)
        logical_and = ops.logical_and(ge_1, lt_1)
        logical_and_1 = ops.logical_and(lt, logical_and)
        logical_and_2 = ops.logical_and(ge, logical_and_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_4)
        constant_16 = ops.constant(228.0, torch.float32)
        mul_4 = ops.mul(load_4, constant_16)
        constant_17 = ops.constant(227.5, torch.float32)
        add_8 = ops.add(mul_4, constant_17)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf1', get_index_5)
        constant_18 = ops.constant(228.0, torch.float32)
        mul_5 = ops.mul(load_5, constant_18)
        constant_19 = ops.constant(227.5, torch.float32)
        add_9 = ops.add(mul_5, constant_19)
        floor_4 = ops.floor(add_9)
        sub = ops.sub(add_8, floor_4)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf1', get_index_6)
        constant_20 = ops.constant(172.5, torch.float32)
        mul_6 = ops.mul(load_6, constant_20)
        constant_21 = ops.constant(172.0, torch.float32)
        add_10 = ops.add(mul_6, constant_21)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_7)
        constant_22 = ops.constant(172.5, torch.float32)
        mul_7 = ops.mul(load_7, constant_22)
        constant_23 = ops.constant(172.0, torch.float32)
        add_11 = ops.add(mul_7, constant_23)
        floor_5 = ops.floor(add_11)
        sub_1 = ops.sub(add_10, floor_5)
        mul_8 = ops.mul(sub, sub_1)
        constant_24 = ops.constant(0.0, torch.float32)
        where = ops.where(logical_and_2, mul_8, constant_24)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf10', get_index_8, where, None)
        return store


buf11: SchedulerNode(ComputedBuffer)
buf11.writes = [MemoryDep('buf11', c0, {c0: 943920})]
buf11.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 943920}),
        MemoryDep('buf2', c0, {c0: 943920}),
        MemoryDep('buf3', c0, {c0: 943920}),
        MemoryDep('buf4', c0, {c0: 943920}),
        MemoryDep('buf5', c0, {c0: 943920}),
        MemoryDep('buf6', c0, {c0: 943920}),
        MemoryDep('buf7', c0, {c0: 943920}),
        MemoryDep('buf8', c0, {c0: 943920}),
        MemoryDep('buf9', c0, {c0: 943920})]
buf11.met_dependencies = [MemoryDep('arg0_1', 456*(tmp11) + (tmp12) + 157320*c0, {c0: 6})]
buf11.users = [NodeUser(node=OUTPUT, can_inplace=False)]
buf11.group.device = cuda:0
buf11.group.iteration = (943920, 1)
buf11.sizes = ([6, 157320], [])
class buf11_loop_body:
    var_ranges = {z0: 6, z1: 157320}
    index0 = 157320*z0 + z1
    index1 = 456*indirect0 + indirect1 + 157320*z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf3', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf4', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf5', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf6', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf7', get_index_5)
        mul_2 = ops.mul(load_4, load_5)
        add_1 = ops.add(add, mul_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf8', get_index_6)
        set_indirect0 = self.set_indirect0(load_6)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf9', get_index_7)
        set_indirect1 = self.set_indirect1(load_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg0_1', get_index_8)
        get_index_9 = self.get_index('index0')
        load_9 = ops.load('buf10', get_index_9)
        mul_3 = ops.mul(load_8, load_9)
        add_2 = ops.add(add_1, mul_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf11', get_index_10, add_2, None)
        return store


