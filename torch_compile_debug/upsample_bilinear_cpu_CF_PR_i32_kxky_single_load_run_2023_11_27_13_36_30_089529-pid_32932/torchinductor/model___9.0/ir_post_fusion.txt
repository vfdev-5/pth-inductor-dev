buf0: SchedulerNode(ComputedBuffer)
buf0.writes = [MemoryDep('buf0', c0, {c0: 512})]
buf0.unmet_dependencies = []
buf0.met_dependencies = []
buf0.users = [NodeUser(node=SchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]
buf0.group.device = cpu
buf0.group.iteration = ((256, 2), ())
buf0.sizes = ([256, 2], [])
class buf0_loop_body:
    var_ranges = {z0: 256, z1: 2}
    index0 = z1
    index1 = z0
    index2 = 2*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(2, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf0', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.953125, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_3)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int32)
        constant_4 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(to_dtype_1, constant_4)
        constant_5 = ops.constant(1.953125, torch.float32)
        mul_1 = ops.mul(add_1, constant_5)
        constant_6 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_6)
        constant_7 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_7)
        to_dtype_2 = ops.to_dtype(maximum_1, torch.int32, src_dtype = torch.float32)
        to_dtype_3 = ops.to_dtype(to_dtype_2, torch.float32, src_dtype = torch.int32)
        sub_2 = ops.sub(maximum, to_dtype_3)
        constant_8 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum_2, constant_9)
        constant_10 = ops.constant(1.0, torch.float32)
        sub_3 = ops.sub(constant_10, minimum)
        return sub_3
    def masked_subblock2(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.953125, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_3)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int32)
        constant_4 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(to_dtype_1, constant_4)
        constant_5 = ops.constant(1.953125, torch.float32)
        mul_1 = ops.mul(add_1, constant_5)
        constant_6 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_6)
        constant_7 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_7)
        to_dtype_2 = ops.to_dtype(maximum_1, torch.int32, src_dtype = torch.float32)
        to_dtype_3 = ops.to_dtype(to_dtype_2, torch.float32, src_dtype = torch.int32)
        sub_2 = ops.sub(maximum, to_dtype_3)
        constant_8 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum_2, constant_9)
        return minimum


buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep('buf1', c0, {c0: 512})]
buf1.unmet_dependencies = []
buf1.met_dependencies = []
buf1.users = [NodeUser(node=SchedulerNode(name='buf2'), can_inplace=False, is_weak=False)]
buf1.group.device = cpu
buf1.group.iteration = ((256, 2), ())
buf1.sizes = ([256, 2], [])
class buf1_loop_body:
    var_ranges = {z0: 256, z1: 2}
    index0 = z1
    index1 = z0
    index2 = 2*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(2, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf1', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.953125, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_3)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int32)
        constant_4 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(to_dtype_1, constant_4)
        constant_5 = ops.constant(1.953125, torch.float32)
        mul_1 = ops.mul(add_1, constant_5)
        constant_6 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_6)
        constant_7 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_7)
        to_dtype_2 = ops.to_dtype(maximum_1, torch.int32, src_dtype = torch.float32)
        to_dtype_3 = ops.to_dtype(to_dtype_2, torch.float32, src_dtype = torch.int32)
        sub_2 = ops.sub(maximum, to_dtype_3)
        constant_8 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum_2, constant_9)
        constant_10 = ops.constant(1.0, torch.float32)
        sub_3 = ops.sub(constant_10, minimum)
        return sub_3
    def masked_subblock2(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.953125, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_3)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int32)
        constant_4 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(to_dtype_1, constant_4)
        constant_5 = ops.constant(1.953125, torch.float32)
        mul_1 = ops.mul(add_1, constant_5)
        constant_6 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_6)
        constant_7 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_7)
        to_dtype_2 = ops.to_dtype(maximum_1, torch.int32, src_dtype = torch.float32)
        to_dtype_3 = ops.to_dtype(to_dtype_2, torch.float32, src_dtype = torch.int32)
        sub_2 = ops.sub(maximum, to_dtype_3)
        constant_8 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum_2, constant_9)
        return minimum


buf2: SchedulerNode(ComputedBuffer)
buf2.writes = [MemoryDep('buf2', c0, {c0: 393216})]
buf2.unmet_dependencies = 
    [   MemoryDep('buf0', 2*c1 + 1, {c0: 6, c1: 256}),
        MemoryDep('buf0', 2*c1, {c0: 6, c1: 256}),
        MemoryDep('buf1', 2*c1 + 1, {c0: 1536, c1: 256}),
        MemoryDep('buf1', 2*c1, {c0: 1536, c1: 256})]
buf2.met_dependencies = 
    [   MemoryDep('arg0_1', (tmp104) + 500*(tmp89) + 250000*c0, {c0: 6}),
        MemoryDep('arg0_1', 500*(tmp126) + (tmp141) + 250000*c0, {c0: 6}),
        MemoryDep('arg0_1', 500*(tmp16) + (tmp31) + 250000*c0, {c0: 6}),
        MemoryDep('arg0_1', 500*(tmp52) + (tmp67) + 250000*c0, {c0: 6})]
buf2.users = [NodeUser(node=SchedulerNode(name='buf3'), can_inplace=True, is_weak=False)]
buf2.group.device = cpu
buf2.group.iteration = ((6, 256, 256), ())
buf2.sizes = ([6, 256, 256], [])
class buf2_loop_body:
    var_ranges = {z0: 6, z1: 256, z2: 256}
    index0 = 2*z1
    index1 = 2*z2
    index2 = z1
    index3 = z2
    index4 = 500*indirect0 + indirect1 + 250000*z0
    index5 = 2*z2 + 1
    index6 = 500*indirect2 + indirect3 + 250000*z0
    index7 = 2*z1 + 1
    index8 = 500*indirect4 + indirect5 + 250000*z0
    index9 = 500*indirect6 + indirect7 + 250000*z0
    index10 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int32)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.953125, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_3)
        to_dtype_1 = ops.to_dtype(maximum, torch.int32, src_dtype = torch.float32)
        constant_4 = ops.constant(0, torch.int32)
        add_1 = ops.add(to_dtype_1, constant_4)
        constant_5 = ops.constant(499, torch.int32)
        minimum = ops.minimum(add_1, constant_5)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_3 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_3, torch.int32)
        to_dtype_2 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int32)
        constant_6 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(to_dtype_2, constant_6)
        constant_7 = ops.constant(1.953125, torch.float32)
        mul_1 = ops.mul(add_2, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_8)
        constant_9 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_9)
        to_dtype_3 = ops.to_dtype(maximum_1, torch.int32, src_dtype = torch.float32)
        constant_10 = ops.constant(0, torch.int32)
        add_3 = ops.add(to_dtype_3, constant_10)
        constant_11 = ops.constant(499, torch.int32)
        minimum_1 = ops.minimum(add_3, constant_11)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg0_1', get_index_4)
        to_dtype_4 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.uint8)
        mul_2 = ops.mul(load_1, to_dtype_4)
        mul_3 = ops.mul(load, mul_2)
        get_index_5 = self.get_index('index0')
        load_3 = ops.load('buf0', get_index_5)
        get_index_6 = self.get_index('index5')
        load_4 = ops.load('buf1', get_index_6)
        get_index_7 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_7, torch.int32)
        to_dtype_5 = ops.to_dtype(index_expr_2, torch.float32, src_dtype = torch.int32)
        constant_12 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(to_dtype_5, constant_12)
        constant_13 = ops.constant(1.953125, torch.float32)
        mul_4 = ops.mul(add_4, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        sub_2 = ops.sub(mul_4, constant_14)
        constant_15 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_2, constant_15)
        to_dtype_6 = ops.to_dtype(maximum_2, torch.int32, src_dtype = torch.float32)
        constant_16 = ops.constant(0, torch.int32)
        add_5 = ops.add(to_dtype_6, constant_16)
        constant_17 = ops.constant(499, torch.int32)
        minimum_2 = ops.minimum(add_5, constant_17)
        set_indirect2 = self.set_indirect2(minimum_2)
        get_index_8 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_8, torch.int32)
        to_dtype_7 = ops.to_dtype(index_expr_3, torch.float32, src_dtype = torch.int32)
        constant_18 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(to_dtype_7, constant_18)
        constant_19 = ops.constant(1.953125, torch.float32)
        mul_5 = ops.mul(add_6, constant_19)
        constant_20 = ops.constant(0.5, torch.float32)
        sub_3 = ops.sub(mul_5, constant_20)
        constant_21 = ops.constant(0.0, torch.float32)
        maximum_3 = ops.maximum(sub_3, constant_21)
        to_dtype_8 = ops.to_dtype(maximum_3, torch.int32, src_dtype = torch.float32)
        constant_22 = ops.constant(1, torch.int32)
        add_7 = ops.add(to_dtype_8, constant_22)
        constant_23 = ops.constant(499, torch.int32)
        minimum_3 = ops.minimum(add_7, constant_23)
        set_indirect3 = self.set_indirect3(minimum_3)
        get_index_9 = self.get_index('index6')
        load_5 = ops.load('arg0_1', get_index_9)
        to_dtype_9 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.uint8)
        mul_6 = ops.mul(load_4, to_dtype_9)
        mul_7 = ops.mul(load_3, mul_6)
        add_8 = ops.add(mul_3, mul_7)
        get_index_10 = self.get_index('index7')
        load_6 = ops.load('buf0', get_index_10)
        get_index_11 = self.get_index('index1')
        load_7 = ops.load('buf1', get_index_11)
        get_index_12 = self.get_index('index2')
        index_expr_4 = ops.index_expr(get_index_12, torch.int32)
        to_dtype_10 = ops.to_dtype(index_expr_4, torch.float32, src_dtype = torch.int32)
        constant_24 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(to_dtype_10, constant_24)
        constant_25 = ops.constant(1.953125, torch.float32)
        mul_8 = ops.mul(add_9, constant_25)
        constant_26 = ops.constant(0.5, torch.float32)
        sub_4 = ops.sub(mul_8, constant_26)
        constant_27 = ops.constant(0.0, torch.float32)
        maximum_4 = ops.maximum(sub_4, constant_27)
        to_dtype_11 = ops.to_dtype(maximum_4, torch.int32, src_dtype = torch.float32)
        constant_28 = ops.constant(1, torch.int32)
        add_10 = ops.add(to_dtype_11, constant_28)
        constant_29 = ops.constant(499, torch.int32)
        minimum_4 = ops.minimum(add_10, constant_29)
        set_indirect4 = self.set_indirect4(minimum_4)
        get_index_13 = self.get_index('index3')
        index_expr_5 = ops.index_expr(get_index_13, torch.int32)
        to_dtype_12 = ops.to_dtype(index_expr_5, torch.float32, src_dtype = torch.int32)
        constant_30 = ops.constant(0.5, torch.float32)
        add_11 = ops.add(to_dtype_12, constant_30)
        constant_31 = ops.constant(1.953125, torch.float32)
        mul_9 = ops.mul(add_11, constant_31)
        constant_32 = ops.constant(0.5, torch.float32)
        sub_5 = ops.sub(mul_9, constant_32)
        constant_33 = ops.constant(0.0, torch.float32)
        maximum_5 = ops.maximum(sub_5, constant_33)
        to_dtype_13 = ops.to_dtype(maximum_5, torch.int32, src_dtype = torch.float32)
        constant_34 = ops.constant(0, torch.int32)
        add_12 = ops.add(to_dtype_13, constant_34)
        constant_35 = ops.constant(499, torch.int32)
        minimum_5 = ops.minimum(add_12, constant_35)
        set_indirect5 = self.set_indirect5(minimum_5)
        get_index_14 = self.get_index('index8')
        load_8 = ops.load('arg0_1', get_index_14)
        to_dtype_14 = ops.to_dtype(load_8, torch.float32, src_dtype = torch.uint8)
        mul_10 = ops.mul(load_7, to_dtype_14)
        mul_11 = ops.mul(load_6, mul_10)
        add_13 = ops.add(add_8, mul_11)
        get_index_15 = self.get_index('index7')
        load_9 = ops.load('buf0', get_index_15)
        get_index_16 = self.get_index('index5')
        load_10 = ops.load('buf1', get_index_16)
        get_index_17 = self.get_index('index2')
        index_expr_6 = ops.index_expr(get_index_17, torch.int32)
        to_dtype_15 = ops.to_dtype(index_expr_6, torch.float32, src_dtype = torch.int32)
        constant_36 = ops.constant(0.5, torch.float32)
        add_14 = ops.add(to_dtype_15, constant_36)
        constant_37 = ops.constant(1.953125, torch.float32)
        mul_12 = ops.mul(add_14, constant_37)
        constant_38 = ops.constant(0.5, torch.float32)
        sub_6 = ops.sub(mul_12, constant_38)
        constant_39 = ops.constant(0.0, torch.float32)
        maximum_6 = ops.maximum(sub_6, constant_39)
        to_dtype_16 = ops.to_dtype(maximum_6, torch.int32, src_dtype = torch.float32)
        constant_40 = ops.constant(1, torch.int32)
        add_15 = ops.add(to_dtype_16, constant_40)
        constant_41 = ops.constant(499, torch.int32)
        minimum_6 = ops.minimum(add_15, constant_41)
        set_indirect6 = self.set_indirect6(minimum_6)
        get_index_18 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_18, torch.int32)
        to_dtype_17 = ops.to_dtype(index_expr_7, torch.float32, src_dtype = torch.int32)
        constant_42 = ops.constant(0.5, torch.float32)
        add_16 = ops.add(to_dtype_17, constant_42)
        constant_43 = ops.constant(1.953125, torch.float32)
        mul_13 = ops.mul(add_16, constant_43)
        constant_44 = ops.constant(0.5, torch.float32)
        sub_7 = ops.sub(mul_13, constant_44)
        constant_45 = ops.constant(0.0, torch.float32)
        maximum_7 = ops.maximum(sub_7, constant_45)
        to_dtype_18 = ops.to_dtype(maximum_7, torch.int32, src_dtype = torch.float32)
        constant_46 = ops.constant(1, torch.int32)
        add_17 = ops.add(to_dtype_18, constant_46)
        constant_47 = ops.constant(499, torch.int32)
        minimum_7 = ops.minimum(add_17, constant_47)
        set_indirect7 = self.set_indirect7(minimum_7)
        get_index_19 = self.get_index('index9')
        load_11 = ops.load('arg0_1', get_index_19)
        to_dtype_19 = ops.to_dtype(load_11, torch.float32, src_dtype = torch.uint8)
        mul_14 = ops.mul(load_10, to_dtype_19)
        mul_15 = ops.mul(load_9, mul_14)
        add_18 = ops.add(add_13, mul_15)
        get_index_20 = self.get_index('index10')
        store = ops.store('buf2', get_index_20, add_18, None)
        return store


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = [MemoryDep('buf3', c0, {c0: 393216})]
buf3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 393216})]
buf3.met_dependencies = []
buf3.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf3.group.device = cpu
buf3.group.iteration = ((393216,), ())
buf3.sizes = ([393216], [])
class buf3_loop_body:
    var_ranges = {z0: 393216}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        round_1 = ops.round(load)
        to_dtype = ops.to_dtype(round_1, torch.uint8, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf3', get_index_1, to_dtype, None)
        return store


