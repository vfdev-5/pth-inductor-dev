buf0: SchedulerNode(ComputedBuffer)
buf0.writes = [MemoryDep('buf0', c0, {c0: 471960})]
buf0.unmet_dependencies = []
buf0.met_dependencies = []
buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='buf1'), can_inplace=False)]
buf0.group.device = cuda:0
buf0.group.iteration = (471960, 1)
buf0.sizes = ([345, 456, 3], [])
class buf0_loop_body:
    var_ranges = {z0: 345, z1: 456, z2: 3}
    index0 = z2
    index1 = z1
    index2 = 455 - z1
    index3 = z2 - 1
    index4 = z0
    index5 = 344 - z0
    index6 = z2 - 2
    index7 = 1368*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_1 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr_1, constant_1)
        get_index_2 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        lt_1 = ops.lt(index_expr_2, constant_2)
        and_ = ops.and_(ge, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        add = ops.add(masked_subblock1, masked_subblock2)
        get_index_3 = self.get_index('index6')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_3, constant_3)
        masked_subblock3 = self.masked_subblock3(ge_1, 0.0)
        add_1 = ops.add(add, masked_subblock3)
        get_index_4 = self.get_index('index7')
        store = ops.store('buf0', get_index_4, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32)
        constant = ops.constant(228.0, torch.float32)
        lt = ops.lt(to_dtype, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32)
        constant_1 = ops.constant(0.004385964912280702, torch.float32)
        mul = ops.mul(to_dtype_1, constant_1)
        constant_2 = ops.constant(-0.9978070175438597, torch.float32)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32)
        constant_3 = ops.constant(0.004385964912280702, torch.float32)
        mul_1 = ops.mul(to_dtype_2, constant_3)
        constant_4 = ops.constant(0.9978070175438597, torch.float32)
        sub = ops.sub(constant_4, mul_1)
        where = ops.where(lt, add, sub)
        return where
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32)
        constant = ops.constant(172.5, torch.float32)
        lt = ops.lt(to_dtype, constant)
        get_index_1 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_1 = ops.to_dtype(index_expr_1, torch.float32)
        constant_1 = ops.constant(0.005797101449275362, torch.float32)
        mul = ops.mul(to_dtype_1, constant_1)
        constant_2 = ops.constant(-0.9971014492753624, torch.float32)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index5')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_2, torch.float32)
        constant_3 = ops.constant(0.005797101449275362, torch.float32)
        mul_1 = ops.mul(to_dtype_2, constant_3)
        constant_4 = ops.constant(0.9971014492753624, torch.float32)
        sub = ops.sub(constant_4, mul_1)
        where = ops.where(lt, add, sub)
        return where
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


buf1: ExternKernelSchedulerNode(ExternKernelOut)
buf1.writes = [StarDep(name='buf1')]
buf1.unmet_dependencies = [StarDep(name='buf0')]
buf1.met_dependencies = [StarDep(name='arg1_1')]
buf1.users = [NodeUser(node=SchedulerNode(name='buf2'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf3'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf4'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf5'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf6'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf7'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf8'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf9'), can_inplace=False), NodeUser(node=SchedulerNode(name='buf10'), can_inplace=False)]
buf1.node.kernel = extern_kernels.bmm


buf2_buf3_buf4_buf5_buf6_buf7_buf10_buf8_buf9_buf11: FusedSchedulerNode(NoneType)
buf2_buf3_buf4_buf5_buf6_buf7_buf10_buf8_buf9_buf11.writes = 
    [   MemoryDep('buf10', c0, {c0: 471960}),
        MemoryDep('buf11', c0, {c0: 471960}),
        MemoryDep('buf2', c0, {c0: 471960}),
        MemoryDep('buf3', c0, {c0: 471960}),
        MemoryDep('buf4', c0, {c0: 471960}),
        MemoryDep('buf5', c0, {c0: 471960}),
        MemoryDep('buf6', c0, {c0: 471960}),
        MemoryDep('buf7', c0, {c0: 471960}),
        MemoryDep('buf8', c0, {c0: 471960}),
        MemoryDep('buf9', c0, {c0: 471960})]
buf2_buf3_buf4_buf5_buf6_buf7_buf10_buf8_buf9_buf11.unmet_dependencies = 
    [   MemoryDep('buf1', 2*c1 + 1, {c0: 3, c1: 157320}),
        MemoryDep('buf1', 2*c1, {c0: 3, c1: 157320})]
buf2_buf3_buf4_buf5_buf6_buf7_buf10_buf8_buf9_buf11.met_dependencies = 
    [   MemoryDep('arg0_1', 456*(tmp11) + (tmp12) + 157320*c0, {c0: 3}),
        MemoryDep('arg0_1', 456*(tmp43) + (tmp87) + 157320*c0, {c0: 3}),
        MemoryDep('arg0_1', 456*(tmp47) + (tmp97) + 157320*c0, {c0: 3}),
        MemoryDep('arg0_1', 456*(tmp49) + (tmp97) + 157320*c0, {c0: 3})]
buf2_buf3_buf4_buf5_buf6_buf7_buf10_buf8_buf9_buf11.users = None
buf2_buf3_buf4_buf5_buf6_buf7_buf10_buf8_buf9_buf11.snodes = 
    [   'buf2',
        'buf3',
        'buf4',
        'buf5',
        'buf6',
        'buf7',
        'buf10',
        'buf8',
        'buf9',
        'buf11']


