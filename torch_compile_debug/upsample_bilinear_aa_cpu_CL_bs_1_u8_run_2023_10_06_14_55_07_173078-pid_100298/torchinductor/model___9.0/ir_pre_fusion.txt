buf1: SchedulerNode(ComputedBuffer)
buf1.writes = [MemoryDep('buf1', c0, {c0: 272})]
buf1.unmet_dependencies = []
buf1.met_dependencies = []
buf1.users = [NodeUser(node=SchedulerNode(name='buf4'), can_inplace=False, is_weak=False)]
buf1.group.device = cpu
buf1.group.iteration = ((272,), ())
buf1.sizes = ([272], [])
class buf1_loop_body:
    var_ranges = {z0: 272}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.6764705882352942, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(1.6764705882352942, torch.float32)
        add_1 = ops.add(mul, constant_2)
        constant_3 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(add_1, constant_3)
        to_dtype_1 = ops.to_dtype(add_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(456, torch.int64)
        minimum = ops.minimum(to_dtype_1, constant_4)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int64)
        constant_5 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(to_dtype_2, constant_5)
        constant_6 = ops.constant(1.6764705882352942, torch.float32)
        mul_1 = ops.mul(add_3, constant_6)
        constant_7 = ops.constant(1.6764705882352942, torch.float32)
        sub = ops.sub(mul_1, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(sub, constant_8)
        to_dtype_3 = ops.to_dtype(add_4, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype_3, constant_9)
        sub_1 = ops.sub(minimum, maximum)
        constant_10 = ops.constant(5, torch.int64)
        minimum_1 = ops.minimum(sub_1, constant_10)
        constant_11 = ops.constant(0, torch.int64)
        lt = ops.lt(constant_11, minimum_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_4 = ops.to_dtype(index_expr_2, torch.float32, src_dtype = torch.int64)
        constant_12 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(to_dtype_4, constant_12)
        constant_13 = ops.constant(1.6764705882352942, torch.float32)
        mul_2 = ops.mul(add_5, constant_13)
        constant_14 = ops.constant(1.6764705882352942, torch.float32)
        sub_2 = ops.sub(mul_2, constant_14)
        constant_15 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(sub_2, constant_15)
        to_dtype_5 = ops.to_dtype(add_6, torch.int64, src_dtype = torch.float32)
        constant_16 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_5, constant_16)
        constant_17 = ops.constant(0, torch.int64)
        add_7 = ops.add(constant_17, maximum_1)
        to_dtype_6 = ops.to_dtype(add_7, torch.float32, src_dtype = torch.int64)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        to_dtype_7 = ops.to_dtype(index_expr_3, torch.float32, src_dtype = torch.int64)
        constant_18 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(to_dtype_7, constant_18)
        constant_19 = ops.constant(1.6764705882352942, torch.float32)
        mul_3 = ops.mul(add_8, constant_19)
        sub_3 = ops.sub(to_dtype_6, mul_3)
        constant_20 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(sub_3, constant_20)
        constant_21 = ops.constant(0.5964912280701754, torch.float32)
        mul_4 = ops.mul(add_9, constant_21)
        abs_1 = ops.abs(mul_4)
        constant_22 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(abs_1, constant_22)
        constant_23 = ops.constant(1.0, torch.float32)
        sub_4 = ops.sub(constant_23, minimum_2)
        constant_24 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, sub_4, constant_24)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        to_dtype_8 = ops.to_dtype(index_expr_4, torch.float32, src_dtype = torch.int64)
        constant_25 = ops.constant(0.5, torch.float32)
        add_10 = ops.add(to_dtype_8, constant_25)
        constant_26 = ops.constant(1.6764705882352942, torch.float32)
        mul_5 = ops.mul(add_10, constant_26)
        constant_27 = ops.constant(1.6764705882352942, torch.float32)
        add_11 = ops.add(mul_5, constant_27)
        constant_28 = ops.constant(0.5, torch.float32)
        add_12 = ops.add(add_11, constant_28)
        to_dtype_9 = ops.to_dtype(add_12, torch.int64, src_dtype = torch.float32)
        constant_29 = ops.constant(456, torch.int64)
        minimum_3 = ops.minimum(to_dtype_9, constant_29)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        to_dtype_10 = ops.to_dtype(index_expr_5, torch.float32, src_dtype = torch.int64)
        constant_30 = ops.constant(0.5, torch.float32)
        add_13 = ops.add(to_dtype_10, constant_30)
        constant_31 = ops.constant(1.6764705882352942, torch.float32)
        mul_6 = ops.mul(add_13, constant_31)
        constant_32 = ops.constant(1.6764705882352942, torch.float32)
        sub_5 = ops.sub(mul_6, constant_32)
        constant_33 = ops.constant(0.5, torch.float32)
        add_14 = ops.add(sub_5, constant_33)
        to_dtype_11 = ops.to_dtype(add_14, torch.int64, src_dtype = torch.float32)
        constant_34 = ops.constant(0, torch.int64)
        maximum_2 = ops.maximum(to_dtype_11, constant_34)
        sub_6 = ops.sub(minimum_3, maximum_2)
        constant_35 = ops.constant(5, torch.int64)
        minimum_4 = ops.minimum(sub_6, constant_35)
        constant_36 = ops.constant(1, torch.int64)
        lt_1 = ops.lt(constant_36, minimum_4)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        to_dtype_12 = ops.to_dtype(index_expr_6, torch.float32, src_dtype = torch.int64)
        constant_37 = ops.constant(0.5, torch.float32)
        add_15 = ops.add(to_dtype_12, constant_37)
        constant_38 = ops.constant(1.6764705882352942, torch.float32)
        mul_7 = ops.mul(add_15, constant_38)
        constant_39 = ops.constant(1.6764705882352942, torch.float32)
        sub_7 = ops.sub(mul_7, constant_39)
        constant_40 = ops.constant(0.5, torch.float32)
        add_16 = ops.add(sub_7, constant_40)
        to_dtype_13 = ops.to_dtype(add_16, torch.int64, src_dtype = torch.float32)
        constant_41 = ops.constant(0, torch.int64)
        maximum_3 = ops.maximum(to_dtype_13, constant_41)
        constant_42 = ops.constant(1, torch.int64)
        add_17 = ops.add(constant_42, maximum_3)
        to_dtype_14 = ops.to_dtype(add_17, torch.float32, src_dtype = torch.int64)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        to_dtype_15 = ops.to_dtype(index_expr_7, torch.float32, src_dtype = torch.int64)
        constant_43 = ops.constant(0.5, torch.float32)
        add_18 = ops.add(to_dtype_15, constant_43)
        constant_44 = ops.constant(1.6764705882352942, torch.float32)
        mul_8 = ops.mul(add_18, constant_44)
        sub_8 = ops.sub(to_dtype_14, mul_8)
        constant_45 = ops.constant(0.5, torch.float32)
        add_19 = ops.add(sub_8, constant_45)
        constant_46 = ops.constant(0.5964912280701754, torch.float32)
        mul_9 = ops.mul(add_19, constant_46)
        abs_2 = ops.abs(mul_9)
        constant_47 = ops.constant(1.0, torch.float32)
        minimum_5 = ops.minimum(abs_2, constant_47)
        constant_48 = ops.constant(1.0, torch.float32)
        sub_9 = ops.sub(constant_48, minimum_5)
        constant_49 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(lt_1, sub_9, constant_49)
        add_20 = ops.add(where, where_1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        to_dtype_16 = ops.to_dtype(index_expr_8, torch.float32, src_dtype = torch.int64)
        constant_50 = ops.constant(0.5, torch.float32)
        add_21 = ops.add(to_dtype_16, constant_50)
        constant_51 = ops.constant(1.6764705882352942, torch.float32)
        mul_10 = ops.mul(add_21, constant_51)
        constant_52 = ops.constant(1.6764705882352942, torch.float32)
        add_22 = ops.add(mul_10, constant_52)
        constant_53 = ops.constant(0.5, torch.float32)
        add_23 = ops.add(add_22, constant_53)
        to_dtype_17 = ops.to_dtype(add_23, torch.int64, src_dtype = torch.float32)
        constant_54 = ops.constant(456, torch.int64)
        minimum_6 = ops.minimum(to_dtype_17, constant_54)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        to_dtype_18 = ops.to_dtype(index_expr_9, torch.float32, src_dtype = torch.int64)
        constant_55 = ops.constant(0.5, torch.float32)
        add_24 = ops.add(to_dtype_18, constant_55)
        constant_56 = ops.constant(1.6764705882352942, torch.float32)
        mul_11 = ops.mul(add_24, constant_56)
        constant_57 = ops.constant(1.6764705882352942, torch.float32)
        sub_10 = ops.sub(mul_11, constant_57)
        constant_58 = ops.constant(0.5, torch.float32)
        add_25 = ops.add(sub_10, constant_58)
        to_dtype_19 = ops.to_dtype(add_25, torch.int64, src_dtype = torch.float32)
        constant_59 = ops.constant(0, torch.int64)
        maximum_4 = ops.maximum(to_dtype_19, constant_59)
        sub_11 = ops.sub(minimum_6, maximum_4)
        constant_60 = ops.constant(5, torch.int64)
        minimum_7 = ops.minimum(sub_11, constant_60)
        constant_61 = ops.constant(2, torch.int64)
        lt_2 = ops.lt(constant_61, minimum_7)
        get_index_10 = self.get_index('index0')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        to_dtype_20 = ops.to_dtype(index_expr_10, torch.float32, src_dtype = torch.int64)
        constant_62 = ops.constant(0.5, torch.float32)
        add_26 = ops.add(to_dtype_20, constant_62)
        constant_63 = ops.constant(1.6764705882352942, torch.float32)
        mul_12 = ops.mul(add_26, constant_63)
        constant_64 = ops.constant(1.6764705882352942, torch.float32)
        sub_12 = ops.sub(mul_12, constant_64)
        constant_65 = ops.constant(0.5, torch.float32)
        add_27 = ops.add(sub_12, constant_65)
        to_dtype_21 = ops.to_dtype(add_27, torch.int64, src_dtype = torch.float32)
        constant_66 = ops.constant(0, torch.int64)
        maximum_5 = ops.maximum(to_dtype_21, constant_66)
        constant_67 = ops.constant(2, torch.int64)
        add_28 = ops.add(constant_67, maximum_5)
        to_dtype_22 = ops.to_dtype(add_28, torch.float32, src_dtype = torch.int64)
        get_index_11 = self.get_index('index0')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        to_dtype_23 = ops.to_dtype(index_expr_11, torch.float32, src_dtype = torch.int64)
        constant_68 = ops.constant(0.5, torch.float32)
        add_29 = ops.add(to_dtype_23, constant_68)
        constant_69 = ops.constant(1.6764705882352942, torch.float32)
        mul_13 = ops.mul(add_29, constant_69)
        sub_13 = ops.sub(to_dtype_22, mul_13)
        constant_70 = ops.constant(0.5, torch.float32)
        add_30 = ops.add(sub_13, constant_70)
        constant_71 = ops.constant(0.5964912280701754, torch.float32)
        mul_14 = ops.mul(add_30, constant_71)
        abs_3 = ops.abs(mul_14)
        constant_72 = ops.constant(1.0, torch.float32)
        minimum_8 = ops.minimum(abs_3, constant_72)
        constant_73 = ops.constant(1.0, torch.float32)
        sub_14 = ops.sub(constant_73, minimum_8)
        constant_74 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_2, sub_14, constant_74)
        add_31 = ops.add(add_20, where_2)
        get_index_12 = self.get_index('index0')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        to_dtype_24 = ops.to_dtype(index_expr_12, torch.float32, src_dtype = torch.int64)
        constant_75 = ops.constant(0.5, torch.float32)
        add_32 = ops.add(to_dtype_24, constant_75)
        constant_76 = ops.constant(1.6764705882352942, torch.float32)
        mul_15 = ops.mul(add_32, constant_76)
        constant_77 = ops.constant(1.6764705882352942, torch.float32)
        add_33 = ops.add(mul_15, constant_77)
        constant_78 = ops.constant(0.5, torch.float32)
        add_34 = ops.add(add_33, constant_78)
        to_dtype_25 = ops.to_dtype(add_34, torch.int64, src_dtype = torch.float32)
        constant_79 = ops.constant(456, torch.int64)
        minimum_9 = ops.minimum(to_dtype_25, constant_79)
        get_index_13 = self.get_index('index0')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        to_dtype_26 = ops.to_dtype(index_expr_13, torch.float32, src_dtype = torch.int64)
        constant_80 = ops.constant(0.5, torch.float32)
        add_35 = ops.add(to_dtype_26, constant_80)
        constant_81 = ops.constant(1.6764705882352942, torch.float32)
        mul_16 = ops.mul(add_35, constant_81)
        constant_82 = ops.constant(1.6764705882352942, torch.float32)
        sub_15 = ops.sub(mul_16, constant_82)
        constant_83 = ops.constant(0.5, torch.float32)
        add_36 = ops.add(sub_15, constant_83)
        to_dtype_27 = ops.to_dtype(add_36, torch.int64, src_dtype = torch.float32)
        constant_84 = ops.constant(0, torch.int64)
        maximum_6 = ops.maximum(to_dtype_27, constant_84)
        sub_16 = ops.sub(minimum_9, maximum_6)
        constant_85 = ops.constant(5, torch.int64)
        minimum_10 = ops.minimum(sub_16, constant_85)
        constant_86 = ops.constant(3, torch.int64)
        lt_3 = ops.lt(constant_86, minimum_10)
        get_index_14 = self.get_index('index0')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        to_dtype_28 = ops.to_dtype(index_expr_14, torch.float32, src_dtype = torch.int64)
        constant_87 = ops.constant(0.5, torch.float32)
        add_37 = ops.add(to_dtype_28, constant_87)
        constant_88 = ops.constant(1.6764705882352942, torch.float32)
        mul_17 = ops.mul(add_37, constant_88)
        constant_89 = ops.constant(1.6764705882352942, torch.float32)
        sub_17 = ops.sub(mul_17, constant_89)
        constant_90 = ops.constant(0.5, torch.float32)
        add_38 = ops.add(sub_17, constant_90)
        to_dtype_29 = ops.to_dtype(add_38, torch.int64, src_dtype = torch.float32)
        constant_91 = ops.constant(0, torch.int64)
        maximum_7 = ops.maximum(to_dtype_29, constant_91)
        constant_92 = ops.constant(3, torch.int64)
        add_39 = ops.add(constant_92, maximum_7)
        to_dtype_30 = ops.to_dtype(add_39, torch.float32, src_dtype = torch.int64)
        get_index_15 = self.get_index('index0')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        to_dtype_31 = ops.to_dtype(index_expr_15, torch.float32, src_dtype = torch.int64)
        constant_93 = ops.constant(0.5, torch.float32)
        add_40 = ops.add(to_dtype_31, constant_93)
        constant_94 = ops.constant(1.6764705882352942, torch.float32)
        mul_18 = ops.mul(add_40, constant_94)
        sub_18 = ops.sub(to_dtype_30, mul_18)
        constant_95 = ops.constant(0.5, torch.float32)
        add_41 = ops.add(sub_18, constant_95)
        constant_96 = ops.constant(0.5964912280701754, torch.float32)
        mul_19 = ops.mul(add_41, constant_96)
        abs_4 = ops.abs(mul_19)
        constant_97 = ops.constant(1.0, torch.float32)
        minimum_11 = ops.minimum(abs_4, constant_97)
        constant_98 = ops.constant(1.0, torch.float32)
        sub_19 = ops.sub(constant_98, minimum_11)
        constant_99 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(lt_3, sub_19, constant_99)
        add_42 = ops.add(add_31, where_3)
        get_index_16 = self.get_index('index0')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        to_dtype_32 = ops.to_dtype(index_expr_16, torch.float32, src_dtype = torch.int64)
        constant_100 = ops.constant(0.5, torch.float32)
        add_43 = ops.add(to_dtype_32, constant_100)
        constant_101 = ops.constant(1.6764705882352942, torch.float32)
        mul_20 = ops.mul(add_43, constant_101)
        constant_102 = ops.constant(1.6764705882352942, torch.float32)
        add_44 = ops.add(mul_20, constant_102)
        constant_103 = ops.constant(0.5, torch.float32)
        add_45 = ops.add(add_44, constant_103)
        to_dtype_33 = ops.to_dtype(add_45, torch.int64, src_dtype = torch.float32)
        constant_104 = ops.constant(456, torch.int64)
        minimum_12 = ops.minimum(to_dtype_33, constant_104)
        get_index_17 = self.get_index('index0')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        to_dtype_34 = ops.to_dtype(index_expr_17, torch.float32, src_dtype = torch.int64)
        constant_105 = ops.constant(0.5, torch.float32)
        add_46 = ops.add(to_dtype_34, constant_105)
        constant_106 = ops.constant(1.6764705882352942, torch.float32)
        mul_21 = ops.mul(add_46, constant_106)
        constant_107 = ops.constant(1.6764705882352942, torch.float32)
        sub_20 = ops.sub(mul_21, constant_107)
        constant_108 = ops.constant(0.5, torch.float32)
        add_47 = ops.add(sub_20, constant_108)
        to_dtype_35 = ops.to_dtype(add_47, torch.int64, src_dtype = torch.float32)
        constant_109 = ops.constant(0, torch.int64)
        maximum_8 = ops.maximum(to_dtype_35, constant_109)
        sub_21 = ops.sub(minimum_12, maximum_8)
        constant_110 = ops.constant(5, torch.int64)
        minimum_13 = ops.minimum(sub_21, constant_110)
        constant_111 = ops.constant(4, torch.int64)
        lt_4 = ops.lt(constant_111, minimum_13)
        get_index_18 = self.get_index('index0')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        to_dtype_36 = ops.to_dtype(index_expr_18, torch.float32, src_dtype = torch.int64)
        constant_112 = ops.constant(0.5, torch.float32)
        add_48 = ops.add(to_dtype_36, constant_112)
        constant_113 = ops.constant(1.6764705882352942, torch.float32)
        mul_22 = ops.mul(add_48, constant_113)
        constant_114 = ops.constant(1.6764705882352942, torch.float32)
        sub_22 = ops.sub(mul_22, constant_114)
        constant_115 = ops.constant(0.5, torch.float32)
        add_49 = ops.add(sub_22, constant_115)
        to_dtype_37 = ops.to_dtype(add_49, torch.int64, src_dtype = torch.float32)
        constant_116 = ops.constant(0, torch.int64)
        maximum_9 = ops.maximum(to_dtype_37, constant_116)
        constant_117 = ops.constant(4, torch.int64)
        add_50 = ops.add(constant_117, maximum_9)
        to_dtype_38 = ops.to_dtype(add_50, torch.float32, src_dtype = torch.int64)
        get_index_19 = self.get_index('index0')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        to_dtype_39 = ops.to_dtype(index_expr_19, torch.float32, src_dtype = torch.int64)
        constant_118 = ops.constant(0.5, torch.float32)
        add_51 = ops.add(to_dtype_39, constant_118)
        constant_119 = ops.constant(1.6764705882352942, torch.float32)
        mul_23 = ops.mul(add_51, constant_119)
        sub_23 = ops.sub(to_dtype_38, mul_23)
        constant_120 = ops.constant(0.5, torch.float32)
        add_52 = ops.add(sub_23, constant_120)
        constant_121 = ops.constant(0.5964912280701754, torch.float32)
        mul_24 = ops.mul(add_52, constant_121)
        abs_5 = ops.abs(mul_24)
        constant_122 = ops.constant(1.0, torch.float32)
        minimum_14 = ops.minimum(abs_5, constant_122)
        constant_123 = ops.constant(1.0, torch.float32)
        sub_24 = ops.sub(constant_123, minimum_14)
        constant_124 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(lt_4, sub_24, constant_124)
        add_53 = ops.add(add_42, where_4)
        get_index_20 = self.get_index('index0')
        store = ops.store('buf1', get_index_20, add_53, None)
        return store


buf3: SchedulerNode(ComputedBuffer)
buf3.writes = [MemoryDep('buf3', c0, {c0: 271})]
buf3.unmet_dependencies = []
buf3.met_dependencies = []
buf3.users = [NodeUser(node=SchedulerNode(name='buf8'), can_inplace=False, is_weak=False)]
buf3.group.device = cpu
buf3.group.iteration = ((271,), ())
buf3.sizes = ([271], [])
class buf3_loop_body:
    var_ranges = {z0: 271}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.2730627306273063, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(1.2730627306273063, torch.float32)
        add_1 = ops.add(mul, constant_2)
        constant_3 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(add_1, constant_3)
        to_dtype_1 = ops.to_dtype(add_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(345, torch.int64)
        minimum = ops.minimum(to_dtype_1, constant_4)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int64)
        constant_5 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(to_dtype_2, constant_5)
        constant_6 = ops.constant(1.2730627306273063, torch.float32)
        mul_1 = ops.mul(add_3, constant_6)
        constant_7 = ops.constant(1.2730627306273063, torch.float32)
        sub = ops.sub(mul_1, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(sub, constant_8)
        to_dtype_3 = ops.to_dtype(add_4, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype_3, constant_9)
        sub_1 = ops.sub(minimum, maximum)
        constant_10 = ops.constant(5, torch.int64)
        minimum_1 = ops.minimum(sub_1, constant_10)
        constant_11 = ops.constant(0, torch.int64)
        lt = ops.lt(constant_11, minimum_1)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_4 = ops.to_dtype(index_expr_2, torch.float32, src_dtype = torch.int64)
        constant_12 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(to_dtype_4, constant_12)
        constant_13 = ops.constant(1.2730627306273063, torch.float32)
        mul_2 = ops.mul(add_5, constant_13)
        constant_14 = ops.constant(1.2730627306273063, torch.float32)
        sub_2 = ops.sub(mul_2, constant_14)
        constant_15 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(sub_2, constant_15)
        to_dtype_5 = ops.to_dtype(add_6, torch.int64, src_dtype = torch.float32)
        constant_16 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_5, constant_16)
        constant_17 = ops.constant(0, torch.int64)
        add_7 = ops.add(constant_17, maximum_1)
        to_dtype_6 = ops.to_dtype(add_7, torch.float32, src_dtype = torch.int64)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        to_dtype_7 = ops.to_dtype(index_expr_3, torch.float32, src_dtype = torch.int64)
        constant_18 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(to_dtype_7, constant_18)
        constant_19 = ops.constant(1.2730627306273063, torch.float32)
        mul_3 = ops.mul(add_8, constant_19)
        sub_3 = ops.sub(to_dtype_6, mul_3)
        constant_20 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(sub_3, constant_20)
        constant_21 = ops.constant(0.7855072463768116, torch.float32)
        mul_4 = ops.mul(add_9, constant_21)
        abs_1 = ops.abs(mul_4)
        constant_22 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(abs_1, constant_22)
        constant_23 = ops.constant(1.0, torch.float32)
        sub_4 = ops.sub(constant_23, minimum_2)
        constant_24 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, sub_4, constant_24)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        to_dtype_8 = ops.to_dtype(index_expr_4, torch.float32, src_dtype = torch.int64)
        constant_25 = ops.constant(0.5, torch.float32)
        add_10 = ops.add(to_dtype_8, constant_25)
        constant_26 = ops.constant(1.2730627306273063, torch.float32)
        mul_5 = ops.mul(add_10, constant_26)
        constant_27 = ops.constant(1.2730627306273063, torch.float32)
        add_11 = ops.add(mul_5, constant_27)
        constant_28 = ops.constant(0.5, torch.float32)
        add_12 = ops.add(add_11, constant_28)
        to_dtype_9 = ops.to_dtype(add_12, torch.int64, src_dtype = torch.float32)
        constant_29 = ops.constant(345, torch.int64)
        minimum_3 = ops.minimum(to_dtype_9, constant_29)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        to_dtype_10 = ops.to_dtype(index_expr_5, torch.float32, src_dtype = torch.int64)
        constant_30 = ops.constant(0.5, torch.float32)
        add_13 = ops.add(to_dtype_10, constant_30)
        constant_31 = ops.constant(1.2730627306273063, torch.float32)
        mul_6 = ops.mul(add_13, constant_31)
        constant_32 = ops.constant(1.2730627306273063, torch.float32)
        sub_5 = ops.sub(mul_6, constant_32)
        constant_33 = ops.constant(0.5, torch.float32)
        add_14 = ops.add(sub_5, constant_33)
        to_dtype_11 = ops.to_dtype(add_14, torch.int64, src_dtype = torch.float32)
        constant_34 = ops.constant(0, torch.int64)
        maximum_2 = ops.maximum(to_dtype_11, constant_34)
        sub_6 = ops.sub(minimum_3, maximum_2)
        constant_35 = ops.constant(5, torch.int64)
        minimum_4 = ops.minimum(sub_6, constant_35)
        constant_36 = ops.constant(1, torch.int64)
        lt_1 = ops.lt(constant_36, minimum_4)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        to_dtype_12 = ops.to_dtype(index_expr_6, torch.float32, src_dtype = torch.int64)
        constant_37 = ops.constant(0.5, torch.float32)
        add_15 = ops.add(to_dtype_12, constant_37)
        constant_38 = ops.constant(1.2730627306273063, torch.float32)
        mul_7 = ops.mul(add_15, constant_38)
        constant_39 = ops.constant(1.2730627306273063, torch.float32)
        sub_7 = ops.sub(mul_7, constant_39)
        constant_40 = ops.constant(0.5, torch.float32)
        add_16 = ops.add(sub_7, constant_40)
        to_dtype_13 = ops.to_dtype(add_16, torch.int64, src_dtype = torch.float32)
        constant_41 = ops.constant(0, torch.int64)
        maximum_3 = ops.maximum(to_dtype_13, constant_41)
        constant_42 = ops.constant(1, torch.int64)
        add_17 = ops.add(constant_42, maximum_3)
        to_dtype_14 = ops.to_dtype(add_17, torch.float32, src_dtype = torch.int64)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        to_dtype_15 = ops.to_dtype(index_expr_7, torch.float32, src_dtype = torch.int64)
        constant_43 = ops.constant(0.5, torch.float32)
        add_18 = ops.add(to_dtype_15, constant_43)
        constant_44 = ops.constant(1.2730627306273063, torch.float32)
        mul_8 = ops.mul(add_18, constant_44)
        sub_8 = ops.sub(to_dtype_14, mul_8)
        constant_45 = ops.constant(0.5, torch.float32)
        add_19 = ops.add(sub_8, constant_45)
        constant_46 = ops.constant(0.7855072463768116, torch.float32)
        mul_9 = ops.mul(add_19, constant_46)
        abs_2 = ops.abs(mul_9)
        constant_47 = ops.constant(1.0, torch.float32)
        minimum_5 = ops.minimum(abs_2, constant_47)
        constant_48 = ops.constant(1.0, torch.float32)
        sub_9 = ops.sub(constant_48, minimum_5)
        constant_49 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(lt_1, sub_9, constant_49)
        add_20 = ops.add(where, where_1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        to_dtype_16 = ops.to_dtype(index_expr_8, torch.float32, src_dtype = torch.int64)
        constant_50 = ops.constant(0.5, torch.float32)
        add_21 = ops.add(to_dtype_16, constant_50)
        constant_51 = ops.constant(1.2730627306273063, torch.float32)
        mul_10 = ops.mul(add_21, constant_51)
        constant_52 = ops.constant(1.2730627306273063, torch.float32)
        add_22 = ops.add(mul_10, constant_52)
        constant_53 = ops.constant(0.5, torch.float32)
        add_23 = ops.add(add_22, constant_53)
        to_dtype_17 = ops.to_dtype(add_23, torch.int64, src_dtype = torch.float32)
        constant_54 = ops.constant(345, torch.int64)
        minimum_6 = ops.minimum(to_dtype_17, constant_54)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        to_dtype_18 = ops.to_dtype(index_expr_9, torch.float32, src_dtype = torch.int64)
        constant_55 = ops.constant(0.5, torch.float32)
        add_24 = ops.add(to_dtype_18, constant_55)
        constant_56 = ops.constant(1.2730627306273063, torch.float32)
        mul_11 = ops.mul(add_24, constant_56)
        constant_57 = ops.constant(1.2730627306273063, torch.float32)
        sub_10 = ops.sub(mul_11, constant_57)
        constant_58 = ops.constant(0.5, torch.float32)
        add_25 = ops.add(sub_10, constant_58)
        to_dtype_19 = ops.to_dtype(add_25, torch.int64, src_dtype = torch.float32)
        constant_59 = ops.constant(0, torch.int64)
        maximum_4 = ops.maximum(to_dtype_19, constant_59)
        sub_11 = ops.sub(minimum_6, maximum_4)
        constant_60 = ops.constant(5, torch.int64)
        minimum_7 = ops.minimum(sub_11, constant_60)
        constant_61 = ops.constant(2, torch.int64)
        lt_2 = ops.lt(constant_61, minimum_7)
        get_index_10 = self.get_index('index0')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        to_dtype_20 = ops.to_dtype(index_expr_10, torch.float32, src_dtype = torch.int64)
        constant_62 = ops.constant(0.5, torch.float32)
        add_26 = ops.add(to_dtype_20, constant_62)
        constant_63 = ops.constant(1.2730627306273063, torch.float32)
        mul_12 = ops.mul(add_26, constant_63)
        constant_64 = ops.constant(1.2730627306273063, torch.float32)
        sub_12 = ops.sub(mul_12, constant_64)
        constant_65 = ops.constant(0.5, torch.float32)
        add_27 = ops.add(sub_12, constant_65)
        to_dtype_21 = ops.to_dtype(add_27, torch.int64, src_dtype = torch.float32)
        constant_66 = ops.constant(0, torch.int64)
        maximum_5 = ops.maximum(to_dtype_21, constant_66)
        constant_67 = ops.constant(2, torch.int64)
        add_28 = ops.add(constant_67, maximum_5)
        to_dtype_22 = ops.to_dtype(add_28, torch.float32, src_dtype = torch.int64)
        get_index_11 = self.get_index('index0')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        to_dtype_23 = ops.to_dtype(index_expr_11, torch.float32, src_dtype = torch.int64)
        constant_68 = ops.constant(0.5, torch.float32)
        add_29 = ops.add(to_dtype_23, constant_68)
        constant_69 = ops.constant(1.2730627306273063, torch.float32)
        mul_13 = ops.mul(add_29, constant_69)
        sub_13 = ops.sub(to_dtype_22, mul_13)
        constant_70 = ops.constant(0.5, torch.float32)
        add_30 = ops.add(sub_13, constant_70)
        constant_71 = ops.constant(0.7855072463768116, torch.float32)
        mul_14 = ops.mul(add_30, constant_71)
        abs_3 = ops.abs(mul_14)
        constant_72 = ops.constant(1.0, torch.float32)
        minimum_8 = ops.minimum(abs_3, constant_72)
        constant_73 = ops.constant(1.0, torch.float32)
        sub_14 = ops.sub(constant_73, minimum_8)
        constant_74 = ops.constant(0.0, torch.float32)
        where_2 = ops.where(lt_2, sub_14, constant_74)
        add_31 = ops.add(add_20, where_2)
        get_index_12 = self.get_index('index0')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        to_dtype_24 = ops.to_dtype(index_expr_12, torch.float32, src_dtype = torch.int64)
        constant_75 = ops.constant(0.5, torch.float32)
        add_32 = ops.add(to_dtype_24, constant_75)
        constant_76 = ops.constant(1.2730627306273063, torch.float32)
        mul_15 = ops.mul(add_32, constant_76)
        constant_77 = ops.constant(1.2730627306273063, torch.float32)
        add_33 = ops.add(mul_15, constant_77)
        constant_78 = ops.constant(0.5, torch.float32)
        add_34 = ops.add(add_33, constant_78)
        to_dtype_25 = ops.to_dtype(add_34, torch.int64, src_dtype = torch.float32)
        constant_79 = ops.constant(345, torch.int64)
        minimum_9 = ops.minimum(to_dtype_25, constant_79)
        get_index_13 = self.get_index('index0')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        to_dtype_26 = ops.to_dtype(index_expr_13, torch.float32, src_dtype = torch.int64)
        constant_80 = ops.constant(0.5, torch.float32)
        add_35 = ops.add(to_dtype_26, constant_80)
        constant_81 = ops.constant(1.2730627306273063, torch.float32)
        mul_16 = ops.mul(add_35, constant_81)
        constant_82 = ops.constant(1.2730627306273063, torch.float32)
        sub_15 = ops.sub(mul_16, constant_82)
        constant_83 = ops.constant(0.5, torch.float32)
        add_36 = ops.add(sub_15, constant_83)
        to_dtype_27 = ops.to_dtype(add_36, torch.int64, src_dtype = torch.float32)
        constant_84 = ops.constant(0, torch.int64)
        maximum_6 = ops.maximum(to_dtype_27, constant_84)
        sub_16 = ops.sub(minimum_9, maximum_6)
        constant_85 = ops.constant(5, torch.int64)
        minimum_10 = ops.minimum(sub_16, constant_85)
        constant_86 = ops.constant(3, torch.int64)
        lt_3 = ops.lt(constant_86, minimum_10)
        get_index_14 = self.get_index('index0')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        to_dtype_28 = ops.to_dtype(index_expr_14, torch.float32, src_dtype = torch.int64)
        constant_87 = ops.constant(0.5, torch.float32)
        add_37 = ops.add(to_dtype_28, constant_87)
        constant_88 = ops.constant(1.2730627306273063, torch.float32)
        mul_17 = ops.mul(add_37, constant_88)
        constant_89 = ops.constant(1.2730627306273063, torch.float32)
        sub_17 = ops.sub(mul_17, constant_89)
        constant_90 = ops.constant(0.5, torch.float32)
        add_38 = ops.add(sub_17, constant_90)
        to_dtype_29 = ops.to_dtype(add_38, torch.int64, src_dtype = torch.float32)
        constant_91 = ops.constant(0, torch.int64)
        maximum_7 = ops.maximum(to_dtype_29, constant_91)
        constant_92 = ops.constant(3, torch.int64)
        add_39 = ops.add(constant_92, maximum_7)
        to_dtype_30 = ops.to_dtype(add_39, torch.float32, src_dtype = torch.int64)
        get_index_15 = self.get_index('index0')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        to_dtype_31 = ops.to_dtype(index_expr_15, torch.float32, src_dtype = torch.int64)
        constant_93 = ops.constant(0.5, torch.float32)
        add_40 = ops.add(to_dtype_31, constant_93)
        constant_94 = ops.constant(1.2730627306273063, torch.float32)
        mul_18 = ops.mul(add_40, constant_94)
        sub_18 = ops.sub(to_dtype_30, mul_18)
        constant_95 = ops.constant(0.5, torch.float32)
        add_41 = ops.add(sub_18, constant_95)
        constant_96 = ops.constant(0.7855072463768116, torch.float32)
        mul_19 = ops.mul(add_41, constant_96)
        abs_4 = ops.abs(mul_19)
        constant_97 = ops.constant(1.0, torch.float32)
        minimum_11 = ops.minimum(abs_4, constant_97)
        constant_98 = ops.constant(1.0, torch.float32)
        sub_19 = ops.sub(constant_98, minimum_11)
        constant_99 = ops.constant(0.0, torch.float32)
        where_3 = ops.where(lt_3, sub_19, constant_99)
        add_42 = ops.add(add_31, where_3)
        get_index_16 = self.get_index('index0')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        to_dtype_32 = ops.to_dtype(index_expr_16, torch.float32, src_dtype = torch.int64)
        constant_100 = ops.constant(0.5, torch.float32)
        add_43 = ops.add(to_dtype_32, constant_100)
        constant_101 = ops.constant(1.2730627306273063, torch.float32)
        mul_20 = ops.mul(add_43, constant_101)
        constant_102 = ops.constant(1.2730627306273063, torch.float32)
        add_44 = ops.add(mul_20, constant_102)
        constant_103 = ops.constant(0.5, torch.float32)
        add_45 = ops.add(add_44, constant_103)
        to_dtype_33 = ops.to_dtype(add_45, torch.int64, src_dtype = torch.float32)
        constant_104 = ops.constant(345, torch.int64)
        minimum_12 = ops.minimum(to_dtype_33, constant_104)
        get_index_17 = self.get_index('index0')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        to_dtype_34 = ops.to_dtype(index_expr_17, torch.float32, src_dtype = torch.int64)
        constant_105 = ops.constant(0.5, torch.float32)
        add_46 = ops.add(to_dtype_34, constant_105)
        constant_106 = ops.constant(1.2730627306273063, torch.float32)
        mul_21 = ops.mul(add_46, constant_106)
        constant_107 = ops.constant(1.2730627306273063, torch.float32)
        sub_20 = ops.sub(mul_21, constant_107)
        constant_108 = ops.constant(0.5, torch.float32)
        add_47 = ops.add(sub_20, constant_108)
        to_dtype_35 = ops.to_dtype(add_47, torch.int64, src_dtype = torch.float32)
        constant_109 = ops.constant(0, torch.int64)
        maximum_8 = ops.maximum(to_dtype_35, constant_109)
        sub_21 = ops.sub(minimum_12, maximum_8)
        constant_110 = ops.constant(5, torch.int64)
        minimum_13 = ops.minimum(sub_21, constant_110)
        constant_111 = ops.constant(4, torch.int64)
        lt_4 = ops.lt(constant_111, minimum_13)
        get_index_18 = self.get_index('index0')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        to_dtype_36 = ops.to_dtype(index_expr_18, torch.float32, src_dtype = torch.int64)
        constant_112 = ops.constant(0.5, torch.float32)
        add_48 = ops.add(to_dtype_36, constant_112)
        constant_113 = ops.constant(1.2730627306273063, torch.float32)
        mul_22 = ops.mul(add_48, constant_113)
        constant_114 = ops.constant(1.2730627306273063, torch.float32)
        sub_22 = ops.sub(mul_22, constant_114)
        constant_115 = ops.constant(0.5, torch.float32)
        add_49 = ops.add(sub_22, constant_115)
        to_dtype_37 = ops.to_dtype(add_49, torch.int64, src_dtype = torch.float32)
        constant_116 = ops.constant(0, torch.int64)
        maximum_9 = ops.maximum(to_dtype_37, constant_116)
        constant_117 = ops.constant(4, torch.int64)
        add_50 = ops.add(constant_117, maximum_9)
        to_dtype_38 = ops.to_dtype(add_50, torch.float32, src_dtype = torch.int64)
        get_index_19 = self.get_index('index0')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        to_dtype_39 = ops.to_dtype(index_expr_19, torch.float32, src_dtype = torch.int64)
        constant_118 = ops.constant(0.5, torch.float32)
        add_51 = ops.add(to_dtype_39, constant_118)
        constant_119 = ops.constant(1.2730627306273063, torch.float32)
        mul_23 = ops.mul(add_51, constant_119)
        sub_23 = ops.sub(to_dtype_38, mul_23)
        constant_120 = ops.constant(0.5, torch.float32)
        add_52 = ops.add(sub_23, constant_120)
        constant_121 = ops.constant(0.7855072463768116, torch.float32)
        mul_24 = ops.mul(add_52, constant_121)
        abs_5 = ops.abs(mul_24)
        constant_122 = ops.constant(1.0, torch.float32)
        minimum_14 = ops.minimum(abs_5, constant_122)
        constant_123 = ops.constant(1.0, torch.float32)
        sub_24 = ops.sub(constant_123, minimum_14)
        constant_124 = ops.constant(0.0, torch.float32)
        where_4 = ops.where(lt_4, sub_24, constant_124)
        add_53 = ops.add(add_42, where_4)
        get_index_20 = self.get_index('index0')
        store = ops.store('buf3', get_index_20, add_53, None)
        return store


buf4: SchedulerNode(ComputedBuffer)
buf4.writes = [MemoryDep('buf4', c0, {c0: 1360})]
buf4.unmet_dependencies = [MemoryDep('buf1', c1, {c0: 5, c1: 272})]
buf4.met_dependencies = []
buf4.users = [NodeUser(node=SchedulerNode(name='buf5'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf6'), can_inplace=False, is_weak=False)]
buf4.group.device = cpu
buf4.group.iteration = ((5, 272), ())
buf4.sizes = ([5, 272], [])
class buf4_loop_body:
    var_ranges = {z0: 5, z1: 272}
    index0 = z1
    index1 = z0
    index2 = 272*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.6764705882352942, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(1.6764705882352942, torch.float32)
        add_1 = ops.add(mul, constant_2)
        constant_3 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(add_1, constant_3)
        to_dtype_1 = ops.to_dtype(add_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(456, torch.int64)
        minimum = ops.minimum(to_dtype_1, constant_4)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int64)
        constant_5 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(to_dtype_2, constant_5)
        constant_6 = ops.constant(1.6764705882352942, torch.float32)
        mul_1 = ops.mul(add_3, constant_6)
        constant_7 = ops.constant(1.6764705882352942, torch.float32)
        sub = ops.sub(mul_1, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(sub, constant_8)
        to_dtype_3 = ops.to_dtype(add_4, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype_3, constant_9)
        sub_1 = ops.sub(minimum, maximum)
        constant_10 = ops.constant(5, torch.int64)
        minimum_1 = ops.minimum(sub_1, constant_10)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr_2, minimum_1)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        to_dtype_4 = ops.to_dtype(index_expr_3, torch.float32, src_dtype = torch.int64)
        constant_11 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(to_dtype_4, constant_11)
        constant_12 = ops.constant(1.6764705882352942, torch.float32)
        mul_2 = ops.mul(add_5, constant_12)
        constant_13 = ops.constant(1.6764705882352942, torch.float32)
        sub_2 = ops.sub(mul_2, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(sub_2, constant_14)
        to_dtype_5 = ops.to_dtype(add_6, torch.int64, src_dtype = torch.float32)
        constant_15 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_5, constant_15)
        get_index_4 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        add_7 = ops.add(index_expr_4, maximum_1)
        to_dtype_6 = ops.to_dtype(add_7, torch.float32, src_dtype = torch.int64)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        to_dtype_7 = ops.to_dtype(index_expr_5, torch.float32, src_dtype = torch.int64)
        constant_16 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(to_dtype_7, constant_16)
        constant_17 = ops.constant(1.6764705882352942, torch.float32)
        mul_3 = ops.mul(add_8, constant_17)
        sub_3 = ops.sub(to_dtype_6, mul_3)
        constant_18 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(sub_3, constant_18)
        constant_19 = ops.constant(0.5964912280701754, torch.float32)
        mul_4 = ops.mul(add_9, constant_19)
        abs_1 = ops.abs(mul_4)
        constant_20 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(abs_1, constant_20)
        constant_21 = ops.constant(1.0, torch.float32)
        sub_4 = ops.sub(constant_21, minimum_2)
        constant_22 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, sub_4, constant_22)
        get_index_6 = self.get_index('index0')
        load = ops.load('buf1', get_index_6)
        div = ops.div(where, load)
        get_index_7 = self.get_index('index2')
        store = ops.store('buf4', get_index_7, div, None)
        return store


buf5: SchedulerNode(ComputedBuffer)
buf5.writes = [MemoryDep('buf5', c0, {c0: 281520})]
buf5.unmet_dependencies = 
    [   MemoryDep('buf4', c1 + 272, {c0: 1035, c1: 272}),
        MemoryDep('buf4', c1, {c0: 1035, c1: 272})]
buf5.met_dependencies = 
    [   MemoryDep('arg0_1', 3*(tmp16) + c0 + 1368*c1, {c0: 3, c1: 345}),
        MemoryDep('arg0_1', 3*(tmp37) + c0 + 1368*c1, {c0: 3, c1: 345})]
buf5.users = [NodeUser(node=SchedulerNode(name='buf6'), can_inplace=True, is_weak=False)]
buf5.group.device = cpu
buf5.group.iteration = ((3, 345, 272), ())
buf5.sizes = ([3, 345, 272], [])
class buf5_loop_body:
    var_ranges = {z0: 3, z1: 345, z2: 272}
    index0 = z2
    index1 = 3*indirect0 + z0 + 1368*z1
    index2 = 3*indirect1 + z0 + 1368*z1
    index3 = z2 + 272
    index4 = 93840*z0 + 272*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.6764705882352942, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(1.6764705882352942, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(sub, constant_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype_1, constant_4)
        constant_5 = ops.constant(0, torch.int64)
        add_2 = ops.add(maximum, constant_5)
        constant_6 = ops.constant(455, torch.int64)
        minimum = ops.minimum(add_2, constant_6)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        load = ops.load('arg0_1', get_index_1)
        to_dtype_2 = ops.to_dtype(load, torch.float32, src_dtype = torch.uint8)
        get_index_2 = self.get_index('index0')
        load_1 = ops.load('buf4', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_1)
        get_index_3 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        to_dtype_3 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int64)
        constant_7 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(to_dtype_3, constant_7)
        constant_8 = ops.constant(1.6764705882352942, torch.float32)
        mul_2 = ops.mul(add_3, constant_8)
        constant_9 = ops.constant(1.6764705882352942, torch.float32)
        sub_1 = ops.sub(mul_2, constant_9)
        constant_10 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(sub_1, constant_10)
        to_dtype_4 = ops.to_dtype(add_4, torch.int64, src_dtype = torch.float32)
        constant_11 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_4, constant_11)
        constant_12 = ops.constant(1, torch.int64)
        add_5 = ops.add(maximum_1, constant_12)
        constant_13 = ops.constant(455, torch.int64)
        minimum_1 = ops.minimum(add_5, constant_13)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_4 = self.get_index('index2')
        load_2 = ops.load('arg0_1', get_index_4)
        to_dtype_5 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.uint8)
        get_index_5 = self.get_index('index3')
        load_3 = ops.load('buf4', get_index_5)
        mul_3 = ops.mul(to_dtype_5, load_3)
        add_6 = ops.add(mul_1, mul_3)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf5', get_index_6, add_6, None)
        return store


buf6: SchedulerNode(ComputedBuffer)
buf6.writes = [MemoryDep('buf6', c0, {c0: 281520})]
buf6.unmet_dependencies = 
    [   MemoryDep('buf4', c1 + 544, {c0: 1035, c1: 272}),
        MemoryDep('buf4', c1 + 816, {c0: 1035, c1: 272}),
        MemoryDep('buf5', c0, {c0: 281520})]
buf6.met_dependencies = 
    [   MemoryDep('arg0_1', 3*(tmp17) + c0 + 1368*c1, {c0: 3, c1: 345}),
        MemoryDep('arg0_1', 3*(tmp39) + c0 + 1368*c1, {c0: 3, c1: 345})]
buf6.users = [NodeUser(node=SchedulerNode(name='buf7'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf9'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf10'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf11'), can_inplace=False, is_weak=False), NodeUser(node=SchedulerNode(name='buf12'), can_inplace=False, is_weak=False)]
buf6.group.device = cpu
buf6.group.iteration = ((3, 345, 272), ())
buf6.sizes = ([3, 345, 272], [])
class buf6_loop_body:
    var_ranges = {z0: 3, z1: 345, z2: 272}
    index0 = 93840*z0 + 272*z1 + z2
    index1 = z2
    index2 = 3*indirect0 + z0 + 1368*z1
    index3 = z2 + 544
    index4 = 3*indirect1 + z0 + 1368*z1
    index5 = z2 + 816
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.6764705882352942, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(1.6764705882352942, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(sub, constant_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype_1, constant_4)
        constant_5 = ops.constant(2, torch.int64)
        add_2 = ops.add(maximum, constant_5)
        constant_6 = ops.constant(455, torch.int64)
        minimum = ops.minimum(add_2, constant_6)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_2 = self.get_index('index2')
        load_1 = ops.load('arg0_1', get_index_2)
        to_dtype_2 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.uint8)
        get_index_3 = self.get_index('index3')
        load_2 = ops.load('buf4', get_index_3)
        mul_1 = ops.mul(to_dtype_2, load_2)
        add_3 = ops.add(load, mul_1)
        get_index_4 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        to_dtype_3 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int64)
        constant_7 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(to_dtype_3, constant_7)
        constant_8 = ops.constant(1.6764705882352942, torch.float32)
        mul_2 = ops.mul(add_4, constant_8)
        constant_9 = ops.constant(1.6764705882352942, torch.float32)
        sub_1 = ops.sub(mul_2, constant_9)
        constant_10 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(sub_1, constant_10)
        to_dtype_4 = ops.to_dtype(add_5, torch.int64, src_dtype = torch.float32)
        constant_11 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_4, constant_11)
        constant_12 = ops.constant(3, torch.int64)
        add_6 = ops.add(maximum_1, constant_12)
        constant_13 = ops.constant(455, torch.int64)
        minimum_1 = ops.minimum(add_6, constant_13)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('arg0_1', get_index_5)
        to_dtype_5 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.uint8)
        get_index_6 = self.get_index('index5')
        load_4 = ops.load('buf4', get_index_6)
        mul_3 = ops.mul(to_dtype_5, load_4)
        add_7 = ops.add(add_3, mul_3)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf6', get_index_7, add_7, None)
        return store


buf7: SchedulerNode(ComputedBuffer)
buf7.writes = [MemoryDep('buf7', c0, {c0: 221136})]
buf7.unmet_dependencies = [MemoryDep('buf6', 272*(tmp16) + 93840*c0 + c2, {c0: 3, c1: 271, c2: 272})]
buf7.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp16) + 3*(tmp34) + c0, {c0: 3})]
buf7.users = [NodeUser(node=SchedulerNode(name='buf13'), can_inplace=True, is_weak=False)]
buf7.group.device = cpu
buf7.group.iteration = ((3, 271, 272), ())
buf7.sizes = ([3, 271, 272], [])
class buf7_loop_body:
    var_ranges = {z0: 3, z1: 271, z2: 272}
    index0 = z1
    index1 = 272*indirect0 + 93840*z0 + z2
    index2 = z2
    index3 = 1368*indirect0 + 3*indirect1 + z0
    index4 = 73712*z0 + 272*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.2730627306273063, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(1.2730627306273063, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(sub, constant_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype_1, constant_4)
        constant_5 = ops.constant(0, torch.int64)
        add_2 = ops.add(maximum, constant_5)
        constant_6 = ops.constant(344, torch.int64)
        minimum = ops.minimum(add_2, constant_6)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf6', get_index_1)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int64)
        constant_7 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(to_dtype_2, constant_7)
        constant_8 = ops.constant(1.6764705882352942, torch.float32)
        mul_1 = ops.mul(add_3, constant_8)
        constant_9 = ops.constant(1.6764705882352942, torch.float32)
        sub_1 = ops.sub(mul_1, constant_9)
        constant_10 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(sub_1, constant_10)
        to_dtype_3 = ops.to_dtype(add_4, torch.int64, src_dtype = torch.float32)
        constant_11 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_3, constant_11)
        constant_12 = ops.constant(4, torch.int64)
        add_5 = ops.add(maximum_1, constant_12)
        constant_13 = ops.constant(455, torch.int64)
        minimum_1 = ops.minimum(add_5, constant_13)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg0_1', get_index_3)
        to_dtype_4 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.uint8)
        constant_14 = ops.constant(0.0, torch.float32)
        mul_2 = ops.mul(to_dtype_4, constant_14)
        add_6 = ops.add(load, mul_2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf7', get_index_4, add_6, None)
        return store


buf8: SchedulerNode(ComputedBuffer)
buf8.writes = [MemoryDep('buf8', c0, {c0: 1355})]
buf8.unmet_dependencies = [MemoryDep('buf3', c1, {c0: 5, c1: 271})]
buf8.met_dependencies = []
buf8.users = [NodeUser(node=SchedulerNode(name='buf13'), can_inplace=False, is_weak=False)]
buf8.group.device = cpu
buf8.group.iteration = ((5, 271), ())
buf8.sizes = ([5, 271], [])
class buf8_loop_body:
    var_ranges = {z0: 5, z1: 271}
    index0 = z1
    index1 = z0
    index2 = 271*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.2730627306273063, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(1.2730627306273063, torch.float32)
        add_1 = ops.add(mul, constant_2)
        constant_3 = ops.constant(0.5, torch.float32)
        add_2 = ops.add(add_1, constant_3)
        to_dtype_1 = ops.to_dtype(add_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(345, torch.int64)
        minimum = ops.minimum(to_dtype_1, constant_4)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int64)
        constant_5 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(to_dtype_2, constant_5)
        constant_6 = ops.constant(1.2730627306273063, torch.float32)
        mul_1 = ops.mul(add_3, constant_6)
        constant_7 = ops.constant(1.2730627306273063, torch.float32)
        sub = ops.sub(mul_1, constant_7)
        constant_8 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(sub, constant_8)
        to_dtype_3 = ops.to_dtype(add_4, torch.int64, src_dtype = torch.float32)
        constant_9 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype_3, constant_9)
        sub_1 = ops.sub(minimum, maximum)
        constant_10 = ops.constant(5, torch.int64)
        minimum_1 = ops.minimum(sub_1, constant_10)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr_2, minimum_1)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        to_dtype_4 = ops.to_dtype(index_expr_3, torch.float32, src_dtype = torch.int64)
        constant_11 = ops.constant(0.5, torch.float32)
        add_5 = ops.add(to_dtype_4, constant_11)
        constant_12 = ops.constant(1.2730627306273063, torch.float32)
        mul_2 = ops.mul(add_5, constant_12)
        constant_13 = ops.constant(1.2730627306273063, torch.float32)
        sub_2 = ops.sub(mul_2, constant_13)
        constant_14 = ops.constant(0.5, torch.float32)
        add_6 = ops.add(sub_2, constant_14)
        to_dtype_5 = ops.to_dtype(add_6, torch.int64, src_dtype = torch.float32)
        constant_15 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_5, constant_15)
        get_index_4 = self.get_index('index1')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        add_7 = ops.add(index_expr_4, maximum_1)
        to_dtype_6 = ops.to_dtype(add_7, torch.float32, src_dtype = torch.int64)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        to_dtype_7 = ops.to_dtype(index_expr_5, torch.float32, src_dtype = torch.int64)
        constant_16 = ops.constant(0.5, torch.float32)
        add_8 = ops.add(to_dtype_7, constant_16)
        constant_17 = ops.constant(1.2730627306273063, torch.float32)
        mul_3 = ops.mul(add_8, constant_17)
        sub_3 = ops.sub(to_dtype_6, mul_3)
        constant_18 = ops.constant(0.5, torch.float32)
        add_9 = ops.add(sub_3, constant_18)
        constant_19 = ops.constant(0.7855072463768116, torch.float32)
        mul_4 = ops.mul(add_9, constant_19)
        abs_1 = ops.abs(mul_4)
        constant_20 = ops.constant(1.0, torch.float32)
        minimum_2 = ops.minimum(abs_1, constant_20)
        constant_21 = ops.constant(1.0, torch.float32)
        sub_4 = ops.sub(constant_21, minimum_2)
        constant_22 = ops.constant(0.0, torch.float32)
        where = ops.where(lt, sub_4, constant_22)
        get_index_6 = self.get_index('index0')
        load = ops.load('buf3', get_index_6)
        div = ops.div(where, load)
        get_index_7 = self.get_index('index2')
        store = ops.store('buf8', get_index_7, div, None)
        return store


buf9: SchedulerNode(ComputedBuffer)
buf9.writes = [MemoryDep('buf9', c0, {c0: 221136})]
buf9.unmet_dependencies = [MemoryDep('buf6', 272*(tmp16) + 93840*c0 + c2, {c0: 3, c1: 271, c2: 272})]
buf9.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp16) + 3*(tmp34) + c0, {c0: 3})]
buf9.users = [NodeUser(node=SchedulerNode(name='buf13'), can_inplace=True, is_weak=False)]
buf9.group.device = cpu
buf9.group.iteration = ((3, 271, 272), ())
buf9.sizes = ([3, 271, 272], [])
class buf9_loop_body:
    var_ranges = {z0: 3, z1: 271, z2: 272}
    index0 = z1
    index1 = 272*indirect0 + 93840*z0 + z2
    index2 = z2
    index3 = 1368*indirect0 + 3*indirect1 + z0
    index4 = 73712*z0 + 272*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.2730627306273063, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(1.2730627306273063, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(sub, constant_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype_1, constant_4)
        constant_5 = ops.constant(1, torch.int64)
        add_2 = ops.add(maximum, constant_5)
        constant_6 = ops.constant(344, torch.int64)
        minimum = ops.minimum(add_2, constant_6)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf6', get_index_1)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int64)
        constant_7 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(to_dtype_2, constant_7)
        constant_8 = ops.constant(1.6764705882352942, torch.float32)
        mul_1 = ops.mul(add_3, constant_8)
        constant_9 = ops.constant(1.6764705882352942, torch.float32)
        sub_1 = ops.sub(mul_1, constant_9)
        constant_10 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(sub_1, constant_10)
        to_dtype_3 = ops.to_dtype(add_4, torch.int64, src_dtype = torch.float32)
        constant_11 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_3, constant_11)
        constant_12 = ops.constant(4, torch.int64)
        add_5 = ops.add(maximum_1, constant_12)
        constant_13 = ops.constant(455, torch.int64)
        minimum_1 = ops.minimum(add_5, constant_13)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg0_1', get_index_3)
        to_dtype_4 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.uint8)
        constant_14 = ops.constant(0.0, torch.float32)
        mul_2 = ops.mul(to_dtype_4, constant_14)
        add_6 = ops.add(load, mul_2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf9', get_index_4, add_6, None)
        return store


buf10: SchedulerNode(ComputedBuffer)
buf10.writes = [MemoryDep('buf10', c0, {c0: 221136})]
buf10.unmet_dependencies = [MemoryDep('buf6', 272*(tmp16) + 93840*c0 + c2, {c0: 3, c1: 271, c2: 272})]
buf10.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp16) + 3*(tmp34) + c0, {c0: 3})]
buf10.users = [NodeUser(node=SchedulerNode(name='buf13'), can_inplace=True, is_weak=False)]
buf10.group.device = cpu
buf10.group.iteration = ((3, 271, 272), ())
buf10.sizes = ([3, 271, 272], [])
class buf10_loop_body:
    var_ranges = {z0: 3, z1: 271, z2: 272}
    index0 = z1
    index1 = 272*indirect0 + 93840*z0 + z2
    index2 = z2
    index3 = 1368*indirect0 + 3*indirect1 + z0
    index4 = 73712*z0 + 272*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.2730627306273063, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(1.2730627306273063, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(sub, constant_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype_1, constant_4)
        constant_5 = ops.constant(2, torch.int64)
        add_2 = ops.add(maximum, constant_5)
        constant_6 = ops.constant(344, torch.int64)
        minimum = ops.minimum(add_2, constant_6)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf6', get_index_1)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int64)
        constant_7 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(to_dtype_2, constant_7)
        constant_8 = ops.constant(1.6764705882352942, torch.float32)
        mul_1 = ops.mul(add_3, constant_8)
        constant_9 = ops.constant(1.6764705882352942, torch.float32)
        sub_1 = ops.sub(mul_1, constant_9)
        constant_10 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(sub_1, constant_10)
        to_dtype_3 = ops.to_dtype(add_4, torch.int64, src_dtype = torch.float32)
        constant_11 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_3, constant_11)
        constant_12 = ops.constant(4, torch.int64)
        add_5 = ops.add(maximum_1, constant_12)
        constant_13 = ops.constant(455, torch.int64)
        minimum_1 = ops.minimum(add_5, constant_13)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg0_1', get_index_3)
        to_dtype_4 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.uint8)
        constant_14 = ops.constant(0.0, torch.float32)
        mul_2 = ops.mul(to_dtype_4, constant_14)
        add_6 = ops.add(load, mul_2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf10', get_index_4, add_6, None)
        return store


buf11: SchedulerNode(ComputedBuffer)
buf11.writes = [MemoryDep('buf11', c0, {c0: 221136})]
buf11.unmet_dependencies = [MemoryDep('buf6', 272*(tmp16) + 93840*c0 + c2, {c0: 3, c1: 271, c2: 272})]
buf11.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp16) + 3*(tmp34) + c0, {c0: 3})]
buf11.users = [NodeUser(node=SchedulerNode(name='buf13'), can_inplace=True, is_weak=False)]
buf11.group.device = cpu
buf11.group.iteration = ((3, 271, 272), ())
buf11.sizes = ([3, 271, 272], [])
class buf11_loop_body:
    var_ranges = {z0: 3, z1: 271, z2: 272}
    index0 = z1
    index1 = 272*indirect0 + 93840*z0 + z2
    index2 = z2
    index3 = 1368*indirect0 + 3*indirect1 + z0
    index4 = 73712*z0 + 272*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.2730627306273063, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(1.2730627306273063, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(sub, constant_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype_1, constant_4)
        constant_5 = ops.constant(3, torch.int64)
        add_2 = ops.add(maximum, constant_5)
        constant_6 = ops.constant(344, torch.int64)
        minimum = ops.minimum(add_2, constant_6)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf6', get_index_1)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int64)
        constant_7 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(to_dtype_2, constant_7)
        constant_8 = ops.constant(1.6764705882352942, torch.float32)
        mul_1 = ops.mul(add_3, constant_8)
        constant_9 = ops.constant(1.6764705882352942, torch.float32)
        sub_1 = ops.sub(mul_1, constant_9)
        constant_10 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(sub_1, constant_10)
        to_dtype_3 = ops.to_dtype(add_4, torch.int64, src_dtype = torch.float32)
        constant_11 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_3, constant_11)
        constant_12 = ops.constant(4, torch.int64)
        add_5 = ops.add(maximum_1, constant_12)
        constant_13 = ops.constant(455, torch.int64)
        minimum_1 = ops.minimum(add_5, constant_13)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg0_1', get_index_3)
        to_dtype_4 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.uint8)
        constant_14 = ops.constant(0.0, torch.float32)
        mul_2 = ops.mul(to_dtype_4, constant_14)
        add_6 = ops.add(load, mul_2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf11', get_index_4, add_6, None)
        return store


buf12: SchedulerNode(ComputedBuffer)
buf12.writes = [MemoryDep('buf12', c0, {c0: 221136})]
buf12.unmet_dependencies = [MemoryDep('buf6', 272*(tmp16) + 93840*c0 + c2, {c0: 3, c1: 271, c2: 272})]
buf12.met_dependencies = [MemoryDep('arg0_1', 1368*(tmp16) + 3*(tmp34) + c0, {c0: 3})]
buf12.users = [NodeUser(node=SchedulerNode(name='buf13'), can_inplace=True, is_weak=False)]
buf12.group.device = cpu
buf12.group.iteration = ((3, 271, 272), ())
buf12.sizes = ([3, 271, 272], [])
class buf12_loop_body:
    var_ranges = {z0: 3, z1: 271, z2: 272}
    index0 = z1
    index1 = 272*indirect0 + 93840*z0 + z2
    index2 = z2
    index3 = 1368*indirect0 + 3*indirect1 + z0
    index4 = 73712*z0 + 272*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        to_dtype = ops.to_dtype(index_expr, torch.float32, src_dtype = torch.int64)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(to_dtype, constant)
        constant_1 = ops.constant(1.2730627306273063, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(1.2730627306273063, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(sub, constant_3)
        to_dtype_1 = ops.to_dtype(add_1, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(0, torch.int64)
        maximum = ops.maximum(to_dtype_1, constant_4)
        constant_5 = ops.constant(4, torch.int64)
        add_2 = ops.add(maximum, constant_5)
        constant_6 = ops.constant(344, torch.int64)
        minimum = ops.minimum(add_2, constant_6)
        set_indirect0 = self.set_indirect0(minimum)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf6', get_index_1)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        to_dtype_2 = ops.to_dtype(index_expr_1, torch.float32, src_dtype = torch.int64)
        constant_7 = ops.constant(0.5, torch.float32)
        add_3 = ops.add(to_dtype_2, constant_7)
        constant_8 = ops.constant(1.6764705882352942, torch.float32)
        mul_1 = ops.mul(add_3, constant_8)
        constant_9 = ops.constant(1.6764705882352942, torch.float32)
        sub_1 = ops.sub(mul_1, constant_9)
        constant_10 = ops.constant(0.5, torch.float32)
        add_4 = ops.add(sub_1, constant_10)
        to_dtype_3 = ops.to_dtype(add_4, torch.int64, src_dtype = torch.float32)
        constant_11 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(to_dtype_3, constant_11)
        constant_12 = ops.constant(4, torch.int64)
        add_5 = ops.add(maximum_1, constant_12)
        constant_13 = ops.constant(455, torch.int64)
        minimum_1 = ops.minimum(add_5, constant_13)
        set_indirect1 = self.set_indirect1(minimum_1)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('arg0_1', get_index_3)
        to_dtype_4 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.uint8)
        constant_14 = ops.constant(0.0, torch.float32)
        mul_2 = ops.mul(to_dtype_4, constant_14)
        add_6 = ops.add(load, mul_2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf12', get_index_4, add_6, None)
        return store


buf13: SchedulerNode(ComputedBuffer)
buf13.writes = [MemoryDep('buf13', c0, {c0: 221136})]
buf13.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 221136}),
        MemoryDep('buf11', c0, {c0: 221136}),
        MemoryDep('buf12', c0, {c0: 221136}),
        MemoryDep('buf7', c0, {c0: 221136}),
        MemoryDep('buf8', c1 + 1084, {c0: 3, c1: 271}),
        MemoryDep('buf8', c1 + 271, {c0: 3, c1: 271}),
        MemoryDep('buf8', c1 + 542, {c0: 3, c1: 271}),
        MemoryDep('buf8', c1 + 813, {c0: 3, c1: 271}),
        MemoryDep('buf8', c1, {c0: 3, c1: 271}),
        MemoryDep('buf9', c0, {c0: 221136})]
buf13.met_dependencies = []
buf13.users = [NodeUser(node=SchedulerNode(name='buf14'), can_inplace=False, is_weak=False)]
buf13.group.device = cpu
buf13.group.iteration = ((3, 271, 272), ())
buf13.sizes = ([3, 271, 272], [])
class buf13_loop_body:
    var_ranges = {z0: 3, z1: 271, z2: 272}
    index0 = 73712*z0 + 272*z1 + z2
    index1 = z1
    index2 = z1 + 271
    index3 = z1 + 542
    index4 = z1 + 813
    index5 = z1 + 1084
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf9', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf8', get_index_3)
        mul_1 = ops.mul(load_2, load_3)
        add = ops.add(mul, mul_1)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf10', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf8', get_index_5)
        mul_2 = ops.mul(load_4, load_5)
        add_1 = ops.add(add, mul_2)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf11', get_index_6)
        get_index_7 = self.get_index('index4')
        load_7 = ops.load('buf8', get_index_7)
        mul_3 = ops.mul(load_6, load_7)
        add_2 = ops.add(add_1, mul_3)
        get_index_8 = self.get_index('index0')
        load_8 = ops.load('buf12', get_index_8)
        get_index_9 = self.get_index('index5')
        load_9 = ops.load('buf8', get_index_9)
        mul_4 = ops.mul(load_8, load_9)
        add_3 = ops.add(add_2, mul_4)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf13', get_index_10, add_3, None)
        return store


buf14: SchedulerNode(ComputedBuffer)
buf14.writes = [MemoryDep('buf14', c0 + 3*c1, {c0: 3, c1: 73712})]
buf14.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 221136})]
buf14.met_dependencies = []
buf14.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
buf14.group.device = cpu
buf14.group.iteration = ((3, 73712), ())
buf14.sizes = ([3, 73712], [])
class buf14_loop_body:
    var_ranges = {z0: 3, z1: 73712}
    index0 = 73712*z0 + z1
    index1 = z0 + 3*z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        round_1 = ops.round(load)
        to_dtype = ops.to_dtype(round_1, torch.uint8, src_dtype = torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf14', get_index_1, to_dtype, None)
        return store


